# Source bytes:       24.96875KiB
# Tokens:             4725 (23.0947265625KiB)
# AST Nodes:          2222 (28.326171875KiB)
# Total ZIR bytes:    77.5537109375KiB
# Instructions:       4644 (40.81640625KiB)
# String Table Bytes: 3.0654296875KiB
# Extra Data Items:   8604 (33.609375KiB)
%0 = extended(struct_decl(parent, Auto, {
  [8383] std line(0) hash(cb7ed07435a4018649fc73567d92e14e): %1 = block_inline({
    %2 = import("../std.zig") token_offset:1:21
    %3 = break_inline(%1, %2)
  }) node_offset:1:1
  [8391] builtin line(1) hash(8b77004b7ea8a6822291509a81bfb6dc): %4 = block_inline({
    %5 = import("builtin") token_offset:2:25
    %6 = break_inline(%4, %5)
  }) node_offset:2:1
  [8399] testing line(3) hash(5ca1f5366500bcaa864a1e0395718939): %7 = block_inline({
    %8 = decl_val("std") token_offset:4:17
    %9 = field_val(%8, "testing") node_offset:4:20
    %10 = break_inline(%7, %9)
  }) node_offset:4:1
  [8407] Ordering line(4) hash(fe6c92f448c2cc09a1592ae3d6586ff0): %11 = block_inline({
    %12 = decl_val("std") token_offset:5:18
    %13 = field_val(%12, "atomic") node_offset:5:21
    %14 = field_val(%13, "Ordering") node_offset:5:28
    %15 = break_inline(%11, %14)
  }) node_offset:5:1
  [8415] pub Atomic line(6) hash(f8d7d20eaef3bd916885ba53a12e8f2e): %16 = block_inline({
    %18 = param_comptime("T", {
      %17 = break_inline(%18, @Zir.Inst.Ref.type_type)
    }) token_offset:7:24
    %1297 = func(ret_ty={
      %19 = break_inline(%1297, @Zir.Inst.Ref.type_type)
    }, body={
      %20 = dbg_block_begin())
      %21 = dbg_stmt(2, 5)
      %22 = ret_type() node_offset:8:5
      %23 = extended(struct_decl(func, Extern, {
        [2679] Self line(4) hash(e636bd82946b5e97c8b7772b5702d6b7): %26 = block_inline({
          %27 = extended(this()) node_offset:11:22
          %28 = break_inline(%26, %27)
        }) node_offset:11:9
        [2687] pub init line(6) hash(fa2c63a4375e48c4a085a00ecbd74746): %29 = block_inline({
          %32 = param("value", {
            %30 = closure_get(%24) node_offset:13:28
            %31 = break_inline(%32, %30)
          }) token_offset:13:21
          %44 = func(ret_ty={
            %33 = decl_val("Self") token_offset:13:31
            %34 = break_inline(%44, %33)
          }, body={
            %35 = dbg_block_begin())
            %36 = dbg_stmt(2, 13)
            %37 = ret_ptr() node_offset:14:13
            %38 = field_base_ptr(%37) node_offset:14:21
            %39 = field_ptr(%38, "value") node_offset:14:32
            %40 = store_node(%39, %32) node_offset:14:32
            %41 = validate_struct_init({
              %39 = field_ptr(%38, "value") node_offset:14:32
            }) node_offset:14:21
            %43 = dbg_block_end())
            %42 = ret_load(%37) node_offset:14:13
          }) (lbrace=1:36,rbrace=3:9) node_offset:13:13
          %45 = break_inline(%29, %44)
        }) node_offset:13:13
        /// Perform an atomic fence which uses the atomic value as a hint for the modification order.
        /// Use this when you want to imply a fence on an atomic variable without necessarily performing a memory access.
        /// Example:
        /// ```
        /// const RefCount = struct {
        ///     count: Atomic(usize),
        ///     dropFn: *const fn(*RefCount) void,
        ///     fn ref(self: *RefCount) void {
        ///         _ =  self.count.fetchAdd(1, .Monotonic); // no ordering necessary, just updating a counter
        ///     }
        ///     fn unref(self: *RefCount) void {
        ///         // Release ensures code before unref() happens-before the count is decremented as dropFn could be called by then.
        ///         if (self.count.fetchSub(1, .Release)) {
        ///             // Acquire ensures count decrement and code before previous unrefs()s happens-before we call dropFn below.
        ///             // NOTE: another alterative is to use .AcqRel on the fetchSub count decrement but it's extra barrier in possibly hot path.
        ///             self.count.fence(.Acquire);
        ///             (self.dropFn)(self);
        ///         }
        ///     }
        /// };
        /// ```
        [2695] pub fence line(34) hash(e270f86c95e2d5205d4b490743de32b5): %46 = block_inline({
          %50 = param("self", {
            %47 = decl_val("Self") token_offset:41:36
            %48 = ptr_type_simple(%47, One)
            %49 = break_inline(%50, %48)
          }) token_offset:41:29
          %53 = param_comptime("ordering", {
            %51 = decl_val("Ordering") token_offset:41:61
            %52 = break_inline(%53, %51)
          }) token_offset:41:51
          %162 = func_extended(ret_ty={
            %54 = break_inline(%162, @Zir.Inst.Ref.void_type)
          }, cc=@Zir.Inst.Ref.calling_convention_inline, body={
            %55 = dbg_block_begin())
            %56 = dbg_stmt(3, 13)
            %62 = block({
              %57 = dbg_stmt(3, 17)
              %58 = decl_val("builtin") token_offset:43:17
              %59 = field_val(%58, "sanitize_thread") node_offset:43:24
              %60 = as_node(@Zir.Inst.Ref.bool_type, %59) node_offset:43:24
              %61 = condbr(%60, {
                %63 = dbg_block_begin())
                %64 = dbg_block_begin())
                %65 = dbg_stmt(4, 17)
                %66 = extended(struct_decl(anon, Auto, {
                  [118] __tsan_acquire line(4) hash(3fd22cf83cc678fdefe91ba33c65174a): %67 = block_inline({
                    %70 = param("addr", {
                      %68 = ptr_type_simple(@Zir.Inst.Ref.anyopaque_type, One)
                      %69 = break_inline(%70, %68)
                    }) token_offset:45:50
                    %72 = func_extended(lib_name="c", ret_ty={
                      %71 = break_inline(%72, @Zir.Inst.Ref.void_type)
                    }, cc=@Zir.Inst.Ref.calling_convention_c, extern, body={}) node_offset:45:32
                    %73 = break_inline(%67, %72)
                  }) node_offset:45:32
                  [126] __tsan_release line(5) hash(a63cae2a487db27328fb754468500d6d): %74 = block_inline({
                    %77 = param("addr", {
                      %75 = ptr_type_simple(@Zir.Inst.Ref.anyopaque_type, One)
                      %76 = break_inline(%77, %75)
                    }) token_offset:46:50
                    %79 = func_extended(lib_name="c", ret_ty={
                      %78 = break_inline(%79, @Zir.Inst.Ref.void_type)
                    }, cc=@Zir.Inst.Ref.calling_convention_c, extern, body={}) node_offset:46:32
                    %80 = break_inline(%74, %79)
                  }) node_offset:46:32
                }, {}, {}) node_offset:44:30
                %81 = dbg_var_val(%66, "tsan")
                %82 = dbg_stmt(9, 17)
                %83 = ptr_type_simple(@Zir.Inst.Ref.anyopaque_type, One)
                %84 = ptr_cast(%83, %50) node_offset:49:30
                %85 = dbg_var_val(%84, "addr")
                %86 = dbg_stmt(10, 17)
                %87 = ret_ptr() node_offset:50:17
                %88 = switch_cond(%53) node_offset:50:32
                %89 = typeof(%88) node_offset:50:32
                %91 = enum_literal("Unordered") token_offset:51:22
                %92 = as_node(%89, %91) node_offset:51:22
                %93 = enum_literal("Monotonic") token_offset:51:34
                %94 = as_node(%89, %93) node_offset:51:34
                %102 = enum_literal("Acquire") token_offset:52:22
                %103 = as_node(%89, %102) node_offset:52:22
                %113 = enum_literal("Release") token_offset:53:22
                %114 = as_node(%89, %113) node_offset:53:22
                %124 = enum_literal("AcqRel") token_offset:54:22
                %125 = as_node(%89, %124) node_offset:54:22
                %126 = enum_literal("SeqCst") token_offset:54:31
                %127 = as_node(%89, %126) node_offset:54:31
                %90 = switch_block(%88,
                  %103 => {
                    %104 = dbg_block_begin())
                    %105 = ref(%66) token_offset:52:33
                    %106 = field_call_bind(%105, "__tsan_acquire") node_offset:52:37
                    %107 = dbg_stmt(12, 52)
                    %108 = param_type(%106, 0)
                    %109 = call(.auto, %106, [%84]) node_offset:52:52
                    %111 = dbg_block_end())
                    %110 = store_node(%87, %109) node_offset:52:52
                    %112 = break(%90, @Zir.Inst.Ref.void_value)
                  },
                  %114 => {
                    %115 = dbg_block_begin())
                    %116 = ref(%66) token_offset:53:33
                    %117 = field_call_bind(%116, "__tsan_release") node_offset:53:37
                    %118 = dbg_stmt(13, 52)
                    %119 = param_type(%117, 0)
                    %120 = call(.auto, %117, [%84]) node_offset:53:52
                    %122 = dbg_block_end())
                    %121 = store_node(%87, %120) node_offset:53:52
                    %123 = break(%90, @Zir.Inst.Ref.void_value)
                  },
                  %92, %94 => {
                    %95 = dbg_block_begin())
                    %96 = tag_name(%53) node_offset:51:61
                    %97 = str(" only applies to atomic loads and stores")
                    %98 = array_cat(%96, %97) node_offset:51:80
                    %99 = as_node(@Zir.Inst.Ref.const_slice_u8_type, %98) node_offset:51:80
                    %101 = dbg_block_end())
                    %100 = compile_error(%99) node_offset:51:47
                  },
                  %125, %127 => {
                    %128 = dbg_block_begin())
                    %129 = dbg_block_begin())
                    %130 = dbg_stmt(15, 25)
                    %131 = ref(%66) token_offset:55:25
                    %132 = field_call_bind(%131, "__tsan_acquire") node_offset:55:29
                    %133 = dbg_stmt(15, 44)
                    %134 = param_type(%132, 0)
                    %135 = call(nodiscard .auto, %132, [%84]) node_offset:55:44
                    %136 = dbg_stmt(16, 25)
                    %137 = ref(%66) token_offset:56:25
                    %138 = field_call_bind(%137, "__tsan_release") node_offset:56:29
                    %139 = dbg_stmt(16, 44)
                    %140 = param_type(%138, 0)
                    %142 = dbg_block_end())
                    %141 = call(nodiscard .auto, %138, [%84]) node_offset:56:44
                    %144 = dbg_block_end())
                    %143 = store_node(%87, @Zir.Inst.Ref.void_value) node_offset:54:41
                    %145 = break(%90, @Zir.Inst.Ref.void_value)
                  }) node_offset:50:24
                %147 = dbg_block_end())
                %148 = dbg_block_end())
                %146 = ret_load(%87) node_offset:50:17
              }, {
                %149 = break(%62, @Zir.Inst.Ref.void_value)
              }) node_offset:43:13
            }) node_offset:43:13
            %150 = ensure_result_used(%62) node_offset:43:13
            %151 = dbg_stmt(21, 13)
            %152 = ret_ptr() node_offset:61:13
            %153 = decl_ref("std") token_offset:61:20
            %154 = field_ptr(%153, "atomic") node_offset:61:23
            %155 = field_call_bind(%154, "fence") node_offset:61:30
            %156 = dbg_stmt(21, 36)
            %157 = param_type(%155, 0)
            %158 = call(.auto, %155, [%53]) node_offset:61:36
            %159 = store_node(%152, %158) node_offset:61:36
            %161 = dbg_block_end())
            %160 = ret_load(%152) node_offset:61:13
          }) (lbrace=1:76,rbrace=22:9) node_offset:41:20
          %163 = break_inline(%46, %162)
        }) node_offset:41:20
        /// Non-atomically load from the atomic value without synchronization.
        /// Care must be taken to avoid data-races when interacting with other atomic operations.
        [2703] pub loadUnchecked line(59) hash(967dfeaa45f16eb618b25179872d14f8): %164 = block_inline({
          %167 = param("self", {
            %165 = decl_val("Self") token_offset:66:43
            %166 = break_inline(%167, %165)
          }) token_offset:66:37
          %177 = func_extended(ret_ty={
            %168 = closure_get(%24) node_offset:66:49
            %169 = break_inline(%177, %168)
          }, cc=@Zir.Inst.Ref.calling_convention_inline, body={
            %170 = dbg_block_begin())
            %171 = dbg_stmt(2, 13)
            %172 = ret_type() node_offset:67:13
            %173 = field_val(%167, "value") node_offset:67:24
            %174 = as_node(%172, %173) node_offset:67:24
            %176 = dbg_block_end())
            %175 = ret_node(%174) node_offset:67:13
          }) (lbrace=1:51,rbrace=3:9) node_offset:66:20
          %178 = break_inline(%164, %177)
        }) node_offset:66:20
        /// Non-atomically store to the atomic value without synchronization.
        /// Care must be taken to avoid data-races when interacting with other atomic operations.
        [2711] pub storeUnchecked line(65) hash(de5ce4439d9b3afdd38d23c2d359107f): %179 = block_inline({
          %183 = param("self", {
            %180 = decl_val("Self") token_offset:72:45
            %181 = ptr_type_simple(%180, One)
            %182 = break_inline(%183, %181)
          }) token_offset:72:38
          %186 = param("value", {
            %184 = closure_get(%24) node_offset:72:58
            %185 = break_inline(%186, %184)
          }) token_offset:72:51
          %195 = func_extended(ret_ty={
            %187 = break_inline(%195, @Zir.Inst.Ref.void_type)
          }, cc=@Zir.Inst.Ref.calling_convention_inline, body={
            %188 = dbg_block_begin())
            %189 = dbg_stmt(2, 13)
            %190 = ref(%183) token_offset:73:13
            %191 = field_ptr(%190, "value") node_offset:73:17
            %193 = dbg_block_end())
            %192 = store_node(%191, %186) node_offset:73:26
            %194 = ret_tok(@Zir.Inst.Ref.void_value) token_offset:74:9
          }) (lbrace=1:66,rbrace=3:9) node_offset:72:20
          %196 = break_inline(%179, %195)
        }) node_offset:72:20
        [2719] pub load line(69) hash(7d73244ec5cdcb36115fd03ab95e7f94): %197 = block_inline({
          %201 = param("self", {
            %198 = decl_val("Self") token_offset:76:41
            %199 = ptr_type_simple(%198, const, One)
            %200 = break_inline(%201, %199)
          }) token_offset:76:28
          %204 = param_comptime("ordering", {
            %202 = decl_val("Ordering") token_offset:76:66
            %203 = break_inline(%204, %202)
          }) token_offset:76:56
          %247 = func_extended(ret_ty={
            %205 = closure_get(%24) node_offset:76:76
            %206 = break_inline(%247, %205)
          }, cc=@Zir.Inst.Ref.calling_convention_inline, body={
            %207 = dbg_block_begin())
            %208 = dbg_stmt(2, 13)
            %209 = ret_ptr() node_offset:77:13
            %210 = switch_cond(%204) node_offset:77:28
            %211 = typeof(%210) node_offset:77:28
            %213 = enum_literal("AcqRel") token_offset:78:18
            %214 = as_node(%211, %213) node_offset:78:18
            %228 = enum_literal("Release") token_offset:79:18
            %229 = as_node(%211, %228) node_offset:79:18
            %212 = switch_block(%210,
              else => {
                %237 = dbg_block_begin())
                %238 = closure_get(%24) node_offset:80:37
                %239 = ref(%201) token_offset:80:41
                %240 = field_ptr(%239, "value") node_offset:80:45
                %241 = atomic_load(%238, %240, %204) node_offset:80:25
                %243 = dbg_block_end())
                %242 = store_node(%209, %241) node_offset:80:25
                %244 = break(%212, @Zir.Inst.Ref.void_value)
              },
              %214 => {
                %215 = dbg_block_begin())
                %216 = tag_name(%204) node_offset:78:42
                %217 = str(" implies ")
                %218 = array_cat(%216, %217) node_offset:78:61
                %219 = decl_val("Ordering") token_offset:78:88
                %220 = field_val(%219, "Release") node_offset:78:96
                %221 = tag_name(%220) node_offset:78:79
                %222 = array_cat(%218, %221) node_offset:78:76
                %223 = str(" which is only allowed on atomic stores")
                %224 = array_cat(%222, %223) node_offset:78:106
                %225 = as_node(@Zir.Inst.Ref.const_slice_u8_type, %224) node_offset:78:106
                %227 = dbg_block_end())
                %226 = compile_error(%225) node_offset:78:28
              },
              %229 => {
                %230 = dbg_block_begin())
                %231 = tag_name(%204) node_offset:79:43
                %232 = str(" is only allowed on atomic stores")
                %233 = array_cat(%231, %232) node_offset:79:62
                %234 = as_node(@Zir.Inst.Ref.const_slice_u8_type, %233) node_offset:79:62
                %236 = dbg_block_end())
                %235 = compile_error(%234) node_offset:79:29
              }) node_offset:77:20
            %246 = dbg_block_end())
            %245 = ret_load(%209) node_offset:77:13
          }) (lbrace=1:78,rbrace=7:9) node_offset:76:20
          %248 = break_inline(%197, %247)
        }) node_offset:76:20
        [2727] pub store line(77) hash(5b24681fbd540cf56b8594b9c1377d68): %249 = block_inline({
          %253 = param("self", {
            %250 = decl_val("Self") token_offset:84:36
            %251 = ptr_type_simple(%250, One)
            %252 = break_inline(%253, %251)
          }) token_offset:84:29
          %256 = param("value", {
            %254 = closure_get(%24) node_offset:84:49
            %255 = break_inline(%256, %254)
          }) token_offset:84:42
          %259 = param_comptime("ordering", {
            %257 = decl_val("Ordering") token_offset:84:71
            %258 = break_inline(%259, %257)
          }) token_offset:84:61
          %302 = func_extended(ret_ty={
            %260 = break_inline(%302, @Zir.Inst.Ref.void_type)
          }, cc=@Zir.Inst.Ref.calling_convention_inline, body={
            %261 = dbg_block_begin())
            %262 = dbg_stmt(2, 13)
            %263 = ret_ptr() node_offset:85:13
            %264 = switch_cond(%259) node_offset:85:28
            %265 = typeof(%264) node_offset:85:28
            %267 = enum_literal("AcqRel") token_offset:86:18
            %268 = as_node(%265, %267) node_offset:86:18
            %282 = enum_literal("Acquire") token_offset:87:18
            %283 = as_node(%265, %282) node_offset:87:18
            %266 = switch_block(%264,
              else => {
                %291 = dbg_block_begin())
                %292 = closure_get(%24) node_offset:88:38
                %293 = ref(%253) token_offset:88:42
                %294 = field_ptr(%293, "value") node_offset:88:46
                %295 = as_node(%292, %256) node_offset:88:54
                %296 = atomic_store(%294, %295, %259) node_offset:88:25
                %298 = dbg_block_end())
                %297 = store_node(%263, @Zir.Inst.Ref.void_value) node_offset:88:25
                %299 = break(%266, @Zir.Inst.Ref.void_value)
              },
              %268 => {
                %269 = dbg_block_begin())
                %270 = tag_name(%259) node_offset:86:42
                %271 = str(" implies ")
                %272 = array_cat(%270, %271) node_offset:86:61
                %273 = decl_val("Ordering") token_offset:86:88
                %274 = field_val(%273, "Acquire") node_offset:86:96
                %275 = tag_name(%274) node_offset:86:79
                %276 = array_cat(%272, %275) node_offset:86:76
                %277 = str(" which is only allowed on atomic loads")
                %278 = array_cat(%276, %277) node_offset:86:106
                %279 = as_node(@Zir.Inst.Ref.const_slice_u8_type, %278) node_offset:86:106
                %281 = dbg_block_end())
                %280 = compile_error(%279) node_offset:86:28
              },
              %283 => {
                %284 = dbg_block_begin())
                %285 = tag_name(%259) node_offset:87:43
                %286 = str(" is only allowed on atomic loads")
                %287 = array_cat(%285, %286) node_offset:87:62
                %288 = as_node(@Zir.Inst.Ref.const_slice_u8_type, %287) node_offset:87:62
                %290 = dbg_block_end())
                %289 = compile_error(%288) node_offset:87:29
              }) node_offset:85:20
            %301 = dbg_block_end())
            %300 = ret_load(%263) node_offset:85:13
          }) (lbrace=1:86,rbrace=7:9) node_offset:84:20
          %303 = break_inline(%249, %302)
        }) node_offset:84:20
        [2735] pub swap line(85) hash(2e796e185d111ea1f11aa8a1616d39d2): %304 = block_inline({
          %308 = param("self", {
            %305 = decl_val("Self") token_offset:92:35
            %306 = ptr_type_simple(%305, One)
            %307 = break_inline(%308, %306)
          }) token_offset:92:28
          %311 = param("value", {
            %309 = closure_get(%24) node_offset:92:48
            %310 = break_inline(%311, %309)
          }) token_offset:92:41
          %314 = param_comptime("ordering", {
            %312 = decl_val("Ordering") token_offset:92:70
            %313 = break_inline(%314, %312)
          }) token_offset:92:60
          %331 = func_extended(ret_ty={
            %315 = closure_get(%24) node_offset:92:80
            %316 = break_inline(%331, %315)
          }, cc=@Zir.Inst.Ref.calling_convention_inline, body={
            %317 = dbg_block_begin())
            %318 = dbg_stmt(2, 13)
            %319 = ret_ptr() node_offset:93:13
            %320 = ref(%308) token_offset:93:20
            %321 = field_call_bind(%320, "rmw") node_offset:93:24
            %322 = dbg_stmt(2, 28)
            %323 = param_type(%321, 0)
            %324 = enum_literal("Xchg") token_offset:93:30
            %325 = param_type(%321, 1)
            %326 = param_type(%321, 2)
            %327 = call(.auto, %321, [%324, %311, %314]) node_offset:93:28
            %328 = store_node(%319, %327) node_offset:93:28
            %330 = dbg_block_end())
            %329 = ret_load(%319) node_offset:93:13
          }) (lbrace=1:82,rbrace=3:9) node_offset:92:20
          %332 = break_inline(%304, %331)
        }) node_offset:92:20
        [2743] pub compareAndSwap line(89) hash(f9414f0e7a7e17175b5d30ba6d51ff73): %333 = block_inline({
          %337 = param("self", {
            %334 = decl_val("Self") token_offset:97:20
            %335 = ptr_type_simple(%334, One)
            %336 = break_inline(%337, %335)
          }) token_offset:97:13
          %340 = param("compare", {
            %338 = closure_get(%24) node_offset:98:22
            %339 = break_inline(%340, %338)
          }) token_offset:98:13
          %343 = param("exchange", {
            %341 = closure_get(%24) node_offset:99:23
            %342 = break_inline(%343, %341)
          }) token_offset:99:13
          %346 = param_comptime("success", {
            %344 = decl_val("Ordering") token_offset:100:31
            %345 = break_inline(%346, %344)
          }) token_offset:100:22
          %349 = param_comptime("failure", {
            %347 = decl_val("Ordering") token_offset:101:31
            %348 = break_inline(%349, %347)
          }) token_offset:101:22
          %368 = func_extended(ret_ty={
            %350 = closure_get(%24) node_offset:102:12
            %351 = optional_type(%350) node_offset:102:11
            %352 = break_inline(%368, %351)
          }, cc=@Zir.Inst.Ref.calling_convention_inline, body={
            %353 = dbg_block_begin())
            %354 = dbg_stmt(8, 13)
            %355 = ret_ptr() node_offset:103:13
            %356 = ref(%337) token_offset:103:20
            %357 = field_call_bind(%356, "cmpxchg") node_offset:103:24
            %358 = dbg_stmt(8, 32)
            %359 = param_type(%357, 0)
            %360 = param_type(%357, 1)
            %361 = param_type(%357, 2)
            %362 = param_type(%357, 3)
            %363 = param_type(%357, 4)
            %364 = call(.auto, %357, [@Zir.Inst.Ref.bool_true, %340, %343, %346, %349]) node_offset:103:32
            %365 = store_node(%355, %364) node_offset:103:32
            %367 = dbg_block_end())
            %366 = ret_load(%355) node_offset:103:13
          }) (lbrace=7:14,rbrace=9:9) node_offset:96:20
          %369 = break_inline(%333, %368)
        }) node_offset:96:20
        [2751] pub tryCompareAndSwap line(99) hash(069753dfd6567a2c7068eac447e4ab19): %370 = block_inline({
          %374 = param("self", {
            %371 = decl_val("Self") token_offset:107:20
            %372 = ptr_type_simple(%371, One)
            %373 = break_inline(%374, %372)
          }) token_offset:107:13
          %377 = param("compare", {
            %375 = closure_get(%24) node_offset:108:22
            %376 = break_inline(%377, %375)
          }) token_offset:108:13
          %380 = param("exchange", {
            %378 = closure_get(%24) node_offset:109:23
            %379 = break_inline(%380, %378)
          }) token_offset:109:13
          %383 = param_comptime("success", {
            %381 = decl_val("Ordering") token_offset:110:31
            %382 = break_inline(%383, %381)
          }) token_offset:110:22
          %386 = param_comptime("failure", {
            %384 = decl_val("Ordering") token_offset:111:31
            %385 = break_inline(%386, %384)
          }) token_offset:111:22
          %405 = func_extended(ret_ty={
            %387 = closure_get(%24) node_offset:112:12
            %388 = optional_type(%387) node_offset:112:11
            %389 = break_inline(%405, %388)
          }, cc=@Zir.Inst.Ref.calling_convention_inline, body={
            %390 = dbg_block_begin())
            %391 = dbg_stmt(8, 13)
            %392 = ret_ptr() node_offset:113:13
            %393 = ref(%374) token_offset:113:20
            %394 = field_call_bind(%393, "cmpxchg") node_offset:113:24
            %395 = dbg_stmt(8, 32)
            %396 = param_type(%394, 0)
            %397 = param_type(%394, 1)
            %398 = param_type(%394, 2)
            %399 = param_type(%394, 3)
            %400 = param_type(%394, 4)
            %401 = call(.auto, %394, [@Zir.Inst.Ref.bool_false, %377, %380, %383, %386]) node_offset:113:32
            %402 = store_node(%392, %401) node_offset:113:32
            %404 = dbg_block_end())
            %403 = ret_load(%392) node_offset:113:13
          }) (lbrace=7:14,rbrace=9:9) node_offset:106:20
          %406 = break_inline(%370, %405)
        }) node_offset:106:20
        [2759] cmpxchg line(109) hash(54935f6bba06876151c90599982c6a5f): %407 = block_inline({
          %411 = param("self", {
            %408 = decl_val("Self") token_offset:117:20
            %409 = ptr_type_simple(%408, One)
            %410 = break_inline(%411, %409)
          }) token_offset:117:13
          %413 = param_comptime("is_strong", {
            %412 = break_inline(%413, @Zir.Inst.Ref.bool_type)
          }) token_offset:118:22
          %416 = param("compare", {
            %414 = closure_get(%24) node_offset:119:22
            %415 = break_inline(%416, %414)
          }) token_offset:119:13
          %419 = param("exchange", {
            %417 = closure_get(%24) node_offset:120:23
            %418 = break_inline(%419, %417)
          }) token_offset:120:13
          %422 = param_comptime("success", {
            %420 = decl_val("Ordering") token_offset:121:31
            %421 = break_inline(%422, %420)
          }) token_offset:121:22
          %425 = param_comptime("failure", {
            %423 = decl_val("Ordering") token_offset:122:31
            %424 = break_inline(%425, %423)
          }) token_offset:122:22
          %565 = func_extended(ret_ty={
            %426 = closure_get(%24) node_offset:123:12
            %427 = optional_type(%426) node_offset:123:11
            %428 = break_inline(%565, %427)
          }, cc=@Zir.Inst.Ref.calling_convention_inline, body={
            %429 = dbg_block_begin())
            %430 = dbg_stmt(9, 13)
            %442 = block({
              %431 = dbg_stmt(9, 17)
              %432 = enum_literal("Unordered") token_offset:124:29
              %433 = cmp_eq(%422, %432) node_offset:124:25
              %434 = as_node(@Zir.Inst.Ref.bool_type, %433) node_offset:124:25
              %435 = bool_br_or(%434, {
                %436 = enum_literal("Unordered") token_offset:124:54
                %437 = cmp_eq(%425, %436) node_offset:124:50
                %438 = as_node(@Zir.Inst.Ref.bool_type, %437) node_offset:124:50
                %439 = break_inline(%435, %438)
              }
              %440 = as_node(@Zir.Inst.Ref.bool_type, %435) node_offset:124:39
              %441 = condbr(%440, {
                %443 = dbg_block_begin())
                %444 = dbg_block_begin())
                %445 = dbg_stmt(10, 17)
                %446 = decl_val("Ordering") token_offset:125:40
                %447 = field_val(%446, "Unordered") node_offset:125:48
                %448 = tag_name(%447) node_offset:125:31
                %449 = str(" is only allowed on atomic loads and stores")
                %450 = array_cat(%448, %449) node_offset:125:60
                %451 = as_node(@Zir.Inst.Ref.const_slice_u8_type, %450) node_offset:125:60
                %453 = dbg_block_end())
                %454 = dbg_block_end())
                %452 = compile_error(%451) node_offset:125:17
              }, {
                %455 = break(%442, @Zir.Inst.Ref.void_value)
              }) node_offset:124:13
            }) node_offset:124:13
            %456 = ensure_result_used(%442) node_offset:124:13
            %457 = dbg_stmt(13, 13)
            %458 = alloc_inferred_comptime_mut() node_offset:128:22
            %459 = switch_cond(%425) node_offset:128:56
            %460 = typeof(%459) node_offset:128:56
            %462 = enum_literal("SeqCst") token_offset:129:18
            %463 = as_node(%460, %462) node_offset:129:18
            %468 = enum_literal("AcqRel") token_offset:130:18
            %469 = as_node(%460, %468) node_offset:130:18
            %481 = enum_literal("Acquire") token_offset:131:18
            %482 = as_node(%460, %481) node_offset:131:18
            %499 = enum_literal("Release") token_offset:132:18
            %500 = as_node(%460, %499) node_offset:132:18
            %506 = enum_literal("Monotonic") token_offset:133:18
            %507 = as_node(%460, %506) node_offset:133:18
            %510 = enum_literal("Unordered") token_offset:134:18
            %511 = as_node(%460, %510) node_offset:134:18
            %461 = switch_block(%459,
              %463 => {
                %464 = enum_literal("SeqCst") token_offset:129:40
                %465 = cmp_eq(%422, %464) node_offset:129:36
                %467 = break(%461, %465)
              },
              %469 => {
                %470 = tag_name(%425) node_offset:130:42
                %471 = str(" implies ")
                %472 = array_cat(%470, %471) node_offset:130:60
                %473 = decl_val("Ordering") token_offset:130:87
                %474 = field_val(%473, "Release") node_offset:130:95
                %475 = tag_name(%474) node_offset:130:78
                %476 = array_cat(%472, %475) node_offset:130:75
                %477 = str(" which is only allowed on success")
                %478 = array_cat(%476, %477) node_offset:130:105
                %479 = as_node(@Zir.Inst.Ref.const_slice_u8_type, %478) node_offset:130:105
                %480 = compile_error(%479) node_offset:130:28
              },
              %482 => {
                %483 = enum_literal("SeqCst") token_offset:131:41
                %484 = cmp_eq(%422, %483) node_offset:131:37
                %485 = as_node(@Zir.Inst.Ref.bool_type, %484) node_offset:131:37
                %486 = bool_br_or(%485, {
                  %487 = enum_literal("AcqRel") token_offset:131:63
                  %488 = cmp_eq(%422, %487) node_offset:131:59
                  %489 = as_node(@Zir.Inst.Ref.bool_type, %488) node_offset:131:59
                  %490 = break_inline(%486, %489)
                }
                %491 = as_node(@Zir.Inst.Ref.bool_type, %486) node_offset:131:48
                %492 = bool_br_or(%491, {
                  %493 = enum_literal("Acquire") token_offset:131:85
                  %494 = cmp_eq(%422, %493) node_offset:131:81
                  %495 = as_node(@Zir.Inst.Ref.bool_type, %494) node_offset:131:81
                  %496 = break_inline(%492, %495)
                }
                %498 = break(%461, %492)
              },
              %500 => {
                %501 = tag_name(%425) node_offset:132:43
                %502 = str(" is only allowed on success")
                %503 = array_cat(%501, %502) node_offset:132:61
                %504 = as_node(@Zir.Inst.Ref.const_slice_u8_type, %503) node_offset:132:61
                %505 = compile_error(%504) node_offset:132:29
              },
              %507 => {
                %509 = break(%461, @Zir.Inst.Ref.bool_true)
              },
              %511 => {
                %512 = unreachable(node_offset:134:31
              }) node_offset:128:48
            %513 = store_to_inferred_ptr(%458, %461)
            %514 = resolve_inferred_alloc(%458) node_offset:128:22
            %515 = dbg_var_ptr(%458, "success_is_stronger")
            %516 = dbg_stmt(22, 13)
            %523 = block({
              %517 = dbg_stmt(22, 17)
              %518 = load(%458) node_offset:137:18
              %519 = as_node(@Zir.Inst.Ref.bool_type, %518) node_offset:137:18
              %520 = bool_not(%519) node_offset:137:17
              %521 = as_node(@Zir.Inst.Ref.bool_type, %520) node_offset:137:17
              %522 = condbr(%521, {
                %524 = dbg_block_begin())
                %525 = dbg_block_begin())
                %526 = dbg_stmt(23, 17)
                %527 = tag_name(%422) node_offset:138:31
                %528 = str(" must be stronger than ")
                %529 = array_cat(%527, %528) node_offset:138:49
                %530 = tag_name(%425) node_offset:138:81
                %531 = array_cat(%529, %530) node_offset:138:78
                %532 = as_node(@Zir.Inst.Ref.const_slice_u8_type, %531) node_offset:138:78
                %534 = dbg_block_end())
                %535 = dbg_block_end())
                %533 = compile_error(%532) node_offset:138:17
              }, {
                %536 = break(%523, @Zir.Inst.Ref.void_value)
              }) node_offset:137:13
            }) node_offset:137:13
            %537 = ensure_result_used(%523) node_offset:137:13
            %538 = dbg_stmt(26, 13)
            %539 = ret_ptr() node_offset:141:13
            %540 = switch_cond(%413) node_offset:141:28
            %541 = typeof(%540) node_offset:141:28
            %543 = as_node(%541, @Zir.Inst.Ref.bool_true) node_offset:142:17
            %553 = as_node(%541, @Zir.Inst.Ref.bool_false) node_offset:143:17
            %542 = switch_block(%540,
              %543 => {
                %544 = dbg_block_begin())
                %545 = closure_get(%24) node_offset:142:40
                %546 = ref(%411) token_offset:142:44
                %547 = field_ptr(%546, "value") node_offset:142:48
                %548 = as_node(%545, %416) node_offset:142:56
                %549 = cmpxchg_strong(%547, %548, %419, %422, %425) node_offset:142:25
                %551 = dbg_block_end())
                %550 = store_node(%539, %549) node_offset:142:25
                %552 = break(%542, @Zir.Inst.Ref.void_value)
              },
              %553 => {
                %554 = dbg_block_begin())
                %555 = closure_get(%24) node_offset:143:39
                %556 = ref(%411) token_offset:143:43
                %557 = field_ptr(%556, "value") node_offset:143:47
                %558 = as_node(%555, %416) node_offset:143:55
                %559 = cmpxchg_weak(%557, %558, %419, %422, %425) node_offset:143:26
                %561 = dbg_block_end())
                %560 = store_node(%539, %559) node_offset:143:26
                %562 = break(%542, @Zir.Inst.Ref.void_value)
              }) node_offset:141:20
            %564 = dbg_block_end())
            %563 = ret_load(%539) node_offset:141:13
          }) (lbrace=8:14,rbrace=30:9) node_offset:116:16
          %566 = break_inline(%407, %565)
        }) node_offset:116:16
        [2767] rmw line(140) hash(dd74327d1147b614ad8a42d09204c44f): %567 = block_inline({
          %571 = param("self", {
            %568 = decl_val("Self") token_offset:148:20
            %569 = ptr_type_simple(%568, One)
            %570 = break_inline(%571, %569)
          }) token_offset:148:13
          %576 = param_comptime("op", {
            %572 = decl_val("std") token_offset:149:26
            %573 = field_val(%572, "builtin") node_offset:149:29
            %574 = field_val(%573, "AtomicRmwOp") node_offset:149:37
            %575 = break_inline(%576, %574)
          }) token_offset:149:22
          %579 = param("value", {
            %577 = closure_get(%24) node_offset:150:20
            %578 = break_inline(%579, %577)
          }) token_offset:150:13
          %582 = param_comptime("ordering", {
            %580 = decl_val("Ordering") token_offset:151:32
            %581 = break_inline(%582, %580)
          }) token_offset:151:22
          %596 = func_extended(ret_ty={
            %583 = closure_get(%24) node_offset:152:11
            %584 = break_inline(%596, %583)
          }, cc=@Zir.Inst.Ref.calling_convention_inline, body={
            %585 = dbg_block_begin())
            %586 = dbg_stmt(7, 13)
            %587 = ret_type() node_offset:153:13
            %588 = closure_get(%24) node_offset:153:31
            %589 = ref(%571) token_offset:153:35
            %590 = field_ptr(%589, "value") node_offset:153:39
            %591 = as_node(%588, %579) node_offset:153:51
            %592 = atomic_rmw(%590, %576, %591, %582) node_offset:153:20
            %593 = as_node(%587, %592) node_offset:153:20
            %595 = dbg_block_end())
            %594 = ret_node(%593) node_offset:153:13
          }) (lbrace=6:13,rbrace=8:9) node_offset:147:16
          %597 = break_inline(%567, %596)
        }) node_offset:147:16
        [2775] exportWhen line(149) hash(535cb8d5fdc9822ed4e39975d26f5d18): %598 = block_inline({
          %600 = param_comptime("condition", {
            %599 = break_inline(%600, @Zir.Inst.Ref.bool_type)
          }) token_offset:156:32
          %602 = param_comptime("functions", {
            %601 = break_inline(%602, @Zir.Inst.Ref.type_type)
          }) token_offset:156:58
          %622 = func(ret_ty={
            %603 = break_inline(%622, @Zir.Inst.Ref.type_type)
          }, body={
            %604 = dbg_block_begin())
            %605 = dbg_stmt(2, 13)
            %606 = ret_ptr() node_offset:157:13
            %610 = block({
              %607 = dbg_stmt(2, 24)
              %608 = as_node(@Zir.Inst.Ref.bool_type, %600) node_offset:157:24
              %609 = condbr(%608, {
                %611 = dbg_block_begin())
                %613 = dbg_block_end())
                %612 = store_node(%606, %602) node_offset:157:35
                %618 = break(%610, @Zir.Inst.Ref.void_value)
              }, {
                %614 = dbg_block_begin())
                %615 = extended(struct_decl(anon, Auto, {}, {}, {}) node_offset:157:50
                %617 = dbg_block_end())
                %616 = store_node(%606, %615) node_offset:157:50
                %619 = break(%610, @Zir.Inst.Ref.void_value)
              }) node_offset:157:20
            }) node_offset:157:20
            %621 = dbg_block_end())
            %620 = ret_load(%606) node_offset:157:13
          }) (lbrace=1:80,rbrace=3:9) node_offset:156:9
          %623 = break_inline(%598, %622)
        }) node_offset:156:9
        pub usingnamespace line(153) hash(15ba316d44db6a1115f82ba84ccdd322): %624 = block_inline({
          %625 = decl_val("exportWhen") token_offset:160:28
          %626 = dbg_stmt(1, 38)
          %627 = param_type(%625, 0)
          %628 = decl_ref("std") token_offset:160:39
          %629 = field_ptr(%628, "meta") node_offset:160:42
          %630 = field_ptr(%629, "trait") node_offset:160:47
          %631 = field_call_bind(%630, "isNumber") node_offset:160:53
          %632 = dbg_stmt(1, 62)
          %633 = param_type(%631, 0)
          %634 = closure_get(%24) node_offset:160:63
          %635 = call(.compile_time, %631, [%634]) node_offset:160:62
          %636 = param_type(%625, 1)
          %637 = extended(struct_decl(anon, Auto, {
            [1434] pub fetchAdd line(1) hash(9e91c54f7f108acf3f314df9eb48e71d): %638 = block_inline({
              %642 = param("self", {
                %639 = decl_val("Self") token_offset:161:43
                %640 = ptr_type_simple(%639, One)
                %641 = break_inline(%642, %640)
              }) token_offset:161:36
              %645 = param("value", {
                %643 = closure_get(%24) node_offset:161:56
                %644 = break_inline(%645, %643)
              }) token_offset:161:49
              %648 = param_comptime("ordering", {
                %646 = decl_val("Ordering") token_offset:161:78
                %647 = break_inline(%648, %646)
              }) token_offset:161:68
              %665 = func_extended(ret_ty={
                %649 = closure_get(%24) node_offset:161:88
                %650 = break_inline(%665, %649)
              }, cc=@Zir.Inst.Ref.calling_convention_inline, body={
                %651 = dbg_block_begin())
                %652 = dbg_stmt(2, 17)
                %653 = ret_ptr() node_offset:162:17
                %654 = ref(%642) token_offset:162:24
                %655 = field_call_bind(%654, "rmw") node_offset:162:28
                %656 = dbg_stmt(2, 32)
                %657 = param_type(%655, 0)
                %658 = enum_literal("Add") token_offset:162:34
                %659 = param_type(%655, 1)
                %660 = param_type(%655, 2)
                %661 = call(.auto, %655, [%658, %645, %648]) node_offset:162:32
                %662 = store_node(%653, %661) node_offset:162:32
                %664 = dbg_block_end())
                %663 = ret_load(%653) node_offset:162:17
              }) (lbrace=1:90,rbrace=3:13) node_offset:161:24
              %666 = break_inline(%638, %665)
            }) node_offset:161:24
            [1442] pub fetchSub line(5) hash(829d16e4fc0d9a0ca2d054d02f50ed99): %667 = block_inline({
              %671 = param("self", {
                %668 = decl_val("Self") token_offset:165:43
                %669 = ptr_type_simple(%668, One)
                %670 = break_inline(%671, %669)
              }) token_offset:165:36
              %674 = param("value", {
                %672 = closure_get(%24) node_offset:165:56
                %673 = break_inline(%674, %672)
              }) token_offset:165:49
              %677 = param_comptime("ordering", {
                %675 = decl_val("Ordering") token_offset:165:78
                %676 = break_inline(%677, %675)
              }) token_offset:165:68
              %694 = func_extended(ret_ty={
                %678 = closure_get(%24) node_offset:165:88
                %679 = break_inline(%694, %678)
              }, cc=@Zir.Inst.Ref.calling_convention_inline, body={
                %680 = dbg_block_begin())
                %681 = dbg_stmt(2, 17)
                %682 = ret_ptr() node_offset:166:17
                %683 = ref(%671) token_offset:166:24
                %684 = field_call_bind(%683, "rmw") node_offset:166:28
                %685 = dbg_stmt(2, 32)
                %686 = param_type(%684, 0)
                %687 = enum_literal("Sub") token_offset:166:34
                %688 = param_type(%684, 1)
                %689 = param_type(%684, 2)
                %690 = call(.auto, %684, [%687, %674, %677]) node_offset:166:32
                %691 = store_node(%682, %690) node_offset:166:32
                %693 = dbg_block_end())
                %692 = ret_load(%682) node_offset:166:17
              }) (lbrace=1:90,rbrace=3:13) node_offset:165:24
              %695 = break_inline(%667, %694)
            }) node_offset:165:24
            [1450] pub fetchMin line(9) hash(9f143565bdf1a2d34b1e65da5eed9f71): %696 = block_inline({
              %700 = param("self", {
                %697 = decl_val("Self") token_offset:169:43
                %698 = ptr_type_simple(%697, One)
                %699 = break_inline(%700, %698)
              }) token_offset:169:36
              %703 = param("value", {
                %701 = closure_get(%24) node_offset:169:56
                %702 = break_inline(%703, %701)
              }) token_offset:169:49
              %706 = param_comptime("ordering", {
                %704 = decl_val("Ordering") token_offset:169:78
                %705 = break_inline(%706, %704)
              }) token_offset:169:68
              %723 = func_extended(ret_ty={
                %707 = closure_get(%24) node_offset:169:88
                %708 = break_inline(%723, %707)
              }, cc=@Zir.Inst.Ref.calling_convention_inline, body={
                %709 = dbg_block_begin())
                %710 = dbg_stmt(2, 17)
                %711 = ret_ptr() node_offset:170:17
                %712 = ref(%700) token_offset:170:24
                %713 = field_call_bind(%712, "rmw") node_offset:170:28
                %714 = dbg_stmt(2, 32)
                %715 = param_type(%713, 0)
                %716 = enum_literal("Min") token_offset:170:34
                %717 = param_type(%713, 1)
                %718 = param_type(%713, 2)
                %719 = call(.auto, %713, [%716, %703, %706]) node_offset:170:32
                %720 = store_node(%711, %719) node_offset:170:32
                %722 = dbg_block_end())
                %721 = ret_load(%711) node_offset:170:17
              }) (lbrace=1:90,rbrace=3:13) node_offset:169:24
              %724 = break_inline(%696, %723)
            }) node_offset:169:24
            [1458] pub fetchMax line(13) hash(6a82e694393f85bf94b9ef6c6eacac33): %725 = block_inline({
              %729 = param("self", {
                %726 = decl_val("Self") token_offset:173:43
                %727 = ptr_type_simple(%726, One)
                %728 = break_inline(%729, %727)
              }) token_offset:173:36
              %732 = param("value", {
                %730 = closure_get(%24) node_offset:173:56
                %731 = break_inline(%732, %730)
              }) token_offset:173:49
              %735 = param_comptime("ordering", {
                %733 = decl_val("Ordering") token_offset:173:78
                %734 = break_inline(%735, %733)
              }) token_offset:173:68
              %752 = func_extended(ret_ty={
                %736 = closure_get(%24) node_offset:173:88
                %737 = break_inline(%752, %736)
              }, cc=@Zir.Inst.Ref.calling_convention_inline, body={
                %738 = dbg_block_begin())
                %739 = dbg_stmt(2, 17)
                %740 = ret_ptr() node_offset:174:17
                %741 = ref(%729) token_offset:174:24
                %742 = field_call_bind(%741, "rmw") node_offset:174:28
                %743 = dbg_stmt(2, 32)
                %744 = param_type(%742, 0)
                %745 = enum_literal("Max") token_offset:174:34
                %746 = param_type(%742, 1)
                %747 = param_type(%742, 2)
                %748 = call(.auto, %742, [%745, %732, %735]) node_offset:174:32
                %749 = store_node(%740, %748) node_offset:174:32
                %751 = dbg_block_end())
                %750 = ret_load(%740) node_offset:174:17
              }) (lbrace=1:90,rbrace=3:13) node_offset:173:24
              %753 = break_inline(%725, %752)
            }) node_offset:173:24
          }, {}, {}) node_offset:160:67
          %754 = call(.compile_time, %625, [%635, %637]) node_offset:160:38
          %755 = break_inline(%624, %754)
        }) node_offset:160:13
        pub usingnamespace line(171) hash(0e71eca1a71a1e4e30519a9a8b256834): %756 = block_inline({
          %757 = decl_val("exportWhen") token_offset:178:28
          %758 = dbg_stmt(1, 38)
          %759 = param_type(%757, 0)
          %760 = decl_ref("std") token_offset:178:39
          %761 = field_ptr(%760, "meta") node_offset:178:42
          %762 = field_ptr(%761, "trait") node_offset:178:47
          %763 = field_call_bind(%762, "isIntegral") node_offset:178:53
          %764 = dbg_stmt(1, 64)
          %765 = param_type(%763, 0)
          %766 = closure_get(%24) node_offset:178:65
          %767 = call(.compile_time, %763, [%766]) node_offset:178:64
          %768 = param_type(%757, 1)
          %769 = extended(struct_decl(anon, Auto, {
            [2569] pub fetchAnd line(1) hash(090976752e296d19566c5778d02bacc8): %770 = block_inline({
              %774 = param("self", {
                %771 = decl_val("Self") token_offset:179:43
                %772 = ptr_type_simple(%771, One)
                %773 = break_inline(%774, %772)
              }) token_offset:179:36
              %777 = param("value", {
                %775 = closure_get(%24) node_offset:179:56
                %776 = break_inline(%777, %775)
              }) token_offset:179:49
              %780 = param_comptime("ordering", {
                %778 = decl_val("Ordering") token_offset:179:78
                %779 = break_inline(%780, %778)
              }) token_offset:179:68
              %797 = func_extended(ret_ty={
                %781 = closure_get(%24) node_offset:179:88
                %782 = break_inline(%797, %781)
              }, cc=@Zir.Inst.Ref.calling_convention_inline, body={
                %783 = dbg_block_begin())
                %784 = dbg_stmt(2, 17)
                %785 = ret_ptr() node_offset:180:17
                %786 = ref(%774) token_offset:180:24
                %787 = field_call_bind(%786, "rmw") node_offset:180:28
                %788 = dbg_stmt(2, 32)
                %789 = param_type(%787, 0)
                %790 = enum_literal("And") token_offset:180:34
                %791 = param_type(%787, 1)
                %792 = param_type(%787, 2)
                %793 = call(.auto, %787, [%790, %777, %780]) node_offset:180:32
                %794 = store_node(%785, %793) node_offset:180:32
                %796 = dbg_block_end())
                %795 = ret_load(%785) node_offset:180:17
              }) (lbrace=1:90,rbrace=3:13) node_offset:179:24
              %798 = break_inline(%770, %797)
            }) node_offset:179:24
            [2577] pub fetchNand line(5) hash(4e44fbc50784f60f65851abf0f76f1d7): %799 = block_inline({
              %803 = param("self", {
                %800 = decl_val("Self") token_offset:183:44
                %801 = ptr_type_simple(%800, One)
                %802 = break_inline(%803, %801)
              }) token_offset:183:37
              %806 = param("value", {
                %804 = closure_get(%24) node_offset:183:57
                %805 = break_inline(%806, %804)
              }) token_offset:183:50
              %809 = param_comptime("ordering", {
                %807 = decl_val("Ordering") token_offset:183:79
                %808 = break_inline(%809, %807)
              }) token_offset:183:69
              %826 = func_extended(ret_ty={
                %810 = closure_get(%24) node_offset:183:89
                %811 = break_inline(%826, %810)
              }, cc=@Zir.Inst.Ref.calling_convention_inline, body={
                %812 = dbg_block_begin())
                %813 = dbg_stmt(2, 17)
                %814 = ret_ptr() node_offset:184:17
                %815 = ref(%803) token_offset:184:24
                %816 = field_call_bind(%815, "rmw") node_offset:184:28
                %817 = dbg_stmt(2, 32)
                %818 = param_type(%816, 0)
                %819 = enum_literal("Nand") token_offset:184:34
                %820 = param_type(%816, 1)
                %821 = param_type(%816, 2)
                %822 = call(.auto, %816, [%819, %806, %809]) node_offset:184:32
                %823 = store_node(%814, %822) node_offset:184:32
                %825 = dbg_block_end())
                %824 = ret_load(%814) node_offset:184:17
              }) (lbrace=1:91,rbrace=3:13) node_offset:183:24
              %827 = break_inline(%799, %826)
            }) node_offset:183:24
            [2585] pub fetchOr line(9) hash(2fb780a5cea1898ddf61a9e940bc9eba): %828 = block_inline({
              %832 = param("self", {
                %829 = decl_val("Self") token_offset:187:42
                %830 = ptr_type_simple(%829, One)
                %831 = break_inline(%832, %830)
              }) token_offset:187:35
              %835 = param("value", {
                %833 = closure_get(%24) node_offset:187:55
                %834 = break_inline(%835, %833)
              }) token_offset:187:48
              %838 = param_comptime("ordering", {
                %836 = decl_val("Ordering") token_offset:187:77
                %837 = break_inline(%838, %836)
              }) token_offset:187:67
              %855 = func_extended(ret_ty={
                %839 = closure_get(%24) node_offset:187:87
                %840 = break_inline(%855, %839)
              }, cc=@Zir.Inst.Ref.calling_convention_inline, body={
                %841 = dbg_block_begin())
                %842 = dbg_stmt(2, 17)
                %843 = ret_ptr() node_offset:188:17
                %844 = ref(%832) token_offset:188:24
                %845 = field_call_bind(%844, "rmw") node_offset:188:28
                %846 = dbg_stmt(2, 32)
                %847 = param_type(%845, 0)
                %848 = enum_literal("Or") token_offset:188:34
                %849 = param_type(%845, 1)
                %850 = param_type(%845, 2)
                %851 = call(.auto, %845, [%848, %835, %838]) node_offset:188:32
                %852 = store_node(%843, %851) node_offset:188:32
                %854 = dbg_block_end())
                %853 = ret_load(%843) node_offset:188:17
              }) (lbrace=1:89,rbrace=3:13) node_offset:187:24
              %856 = break_inline(%828, %855)
            }) node_offset:187:24
            [2593] pub fetchXor line(13) hash(40d299380dbb0704c422d3bd824fc07d): %857 = block_inline({
              %861 = param("self", {
                %858 = decl_val("Self") token_offset:191:43
                %859 = ptr_type_simple(%858, One)
                %860 = break_inline(%861, %859)
              }) token_offset:191:36
              %864 = param("value", {
                %862 = closure_get(%24) node_offset:191:56
                %863 = break_inline(%864, %862)
              }) token_offset:191:49
              %867 = param_comptime("ordering", {
                %865 = decl_val("Ordering") token_offset:191:78
                %866 = break_inline(%867, %865)
              }) token_offset:191:68
              %884 = func_extended(ret_ty={
                %868 = closure_get(%24) node_offset:191:88
                %869 = break_inline(%884, %868)
              }, cc=@Zir.Inst.Ref.calling_convention_inline, body={
                %870 = dbg_block_begin())
                %871 = dbg_stmt(2, 17)
                %872 = ret_ptr() node_offset:192:17
                %873 = ref(%861) token_offset:192:24
                %874 = field_call_bind(%873, "rmw") node_offset:192:28
                %875 = dbg_stmt(2, 32)
                %876 = param_type(%874, 0)
                %877 = enum_literal("Xor") token_offset:192:34
                %878 = param_type(%874, 1)
                %879 = param_type(%874, 2)
                %880 = call(.auto, %874, [%877, %864, %867]) node_offset:192:32
                %881 = store_node(%872, %880) node_offset:192:32
                %883 = dbg_block_end())
                %882 = ret_load(%872) node_offset:192:17
              }) (lbrace=1:90,rbrace=3:13) node_offset:191:24
              %885 = break_inline(%857, %884)
            }) node_offset:191:24
            [2601] Bit line(17) hash(8582591bd95bea5020ed5ada888d45e0): %886 = block_inline({
              %887 = decl_ref("std") token_offset:195:25
              %888 = field_ptr(%887, "math") node_offset:195:28
              %889 = field_call_bind(%888, "Log2Int") node_offset:195:33
              %890 = dbg_stmt(1, 41)
              %891 = param_type(%889, 0)
              %892 = closure_get(%24) node_offset:195:42
              %893 = call(.compile_time, %889, [%892]) node_offset:195:41
              %894 = break_inline(%886, %893)
            }) node_offset:195:13
            [2609] BitRmwOp line(18) hash(9899e75bca4b25bcede03a878c10779b): %895 = block_inline({
              %896 = extended(enum_decl(parent, {}, {}, {
                Set,
                Reset,
                Toggle,
              }) node_offset:196:30
              %897 = break_inline(%895, %896)
            }) node_offset:196:13
            [2617] pub bitSet line(24) hash(3f26d91219fccb3df67f65e2b288c82d): %898 = block_inline({
              %902 = param("self", {
                %899 = decl_val("Self") token_offset:202:41
                %900 = ptr_type_simple(%899, One)
                %901 = break_inline(%902, %900)
              }) token_offset:202:34
              %905 = param("bit", {
                %903 = decl_val("Bit") token_offset:202:52
                %904 = break_inline(%905, %903)
              }) token_offset:202:47
              %908 = param_comptime("ordering", {
                %906 = decl_val("Ordering") token_offset:202:76
                %907 = break_inline(%908, %906)
              }) token_offset:202:66
              %924 = func_extended(ret_ty={
                %909 = break_inline(%924, @Zir.Inst.Ref.u1_type)
              }, cc=@Zir.Inst.Ref.calling_convention_inline, body={
                %910 = dbg_block_begin())
                %911 = dbg_stmt(2, 17)
                %912 = ret_ptr() node_offset:203:17
                %913 = decl_val("bitRmw") token_offset:203:24
                %914 = dbg_stmt(2, 30)
                %915 = param_type(%913, 0)
                %916 = param_type(%913, 1)
                %917 = enum_literal("Set") token_offset:203:38
                %918 = param_type(%913, 2)
                %919 = param_type(%913, 3)
                %920 = call(.auto, %913, [%902, %917, %905, %908]) node_offset:203:30
                %921 = store_node(%912, %920) node_offset:203:30
                %923 = dbg_block_end())
                %922 = ret_load(%912) node_offset:203:17
              }) (lbrace=1:89,rbrace=3:13) node_offset:202:24
              %925 = break_inline(%898, %924)
            }) node_offset:202:24
            [2625] pub bitReset line(28) hash(277f859253bea4c2b179b02a88f47f10): %926 = block_inline({
              %930 = param("self", {
                %927 = decl_val("Self") token_offset:206:43
                %928 = ptr_type_simple(%927, One)
                %929 = break_inline(%930, %928)
              }) token_offset:206:36
              %933 = param("bit", {
                %931 = decl_val("Bit") token_offset:206:54
                %932 = break_inline(%933, %931)
              }) token_offset:206:49
              %936 = param_comptime("ordering", {
                %934 = decl_val("Ordering") token_offset:206:78
                %935 = break_inline(%936, %934)
              }) token_offset:206:68
              %952 = func_extended(ret_ty={
                %937 = break_inline(%952, @Zir.Inst.Ref.u1_type)
              }, cc=@Zir.Inst.Ref.calling_convention_inline, body={
                %938 = dbg_block_begin())
                %939 = dbg_stmt(2, 17)
                %940 = ret_ptr() node_offset:207:17
                %941 = decl_val("bitRmw") token_offset:207:24
                %942 = dbg_stmt(2, 30)
                %943 = param_type(%941, 0)
                %944 = param_type(%941, 1)
                %945 = enum_literal("Reset") token_offset:207:38
                %946 = param_type(%941, 2)
                %947 = param_type(%941, 3)
                %948 = call(.auto, %941, [%930, %945, %933, %936]) node_offset:207:30
                %949 = store_node(%940, %948) node_offset:207:30
                %951 = dbg_block_end())
                %950 = ret_load(%940) node_offset:207:17
              }) (lbrace=1:91,rbrace=3:13) node_offset:206:24
              %953 = break_inline(%926, %952)
            }) node_offset:206:24
            [2633] pub bitToggle line(32) hash(71a03dac6ceaf2a8f8b1b4193ff6ff56): %954 = block_inline({
              %958 = param("self", {
                %955 = decl_val("Self") token_offset:210:44
                %956 = ptr_type_simple(%955, One)
                %957 = break_inline(%958, %956)
              }) token_offset:210:37
              %961 = param("bit", {
                %959 = decl_val("Bit") token_offset:210:55
                %960 = break_inline(%961, %959)
              }) token_offset:210:50
              %964 = param_comptime("ordering", {
                %962 = decl_val("Ordering") token_offset:210:79
                %963 = break_inline(%964, %962)
              }) token_offset:210:69
              %980 = func_extended(ret_ty={
                %965 = break_inline(%980, @Zir.Inst.Ref.u1_type)
              }, cc=@Zir.Inst.Ref.calling_convention_inline, body={
                %966 = dbg_block_begin())
                %967 = dbg_stmt(2, 17)
                %968 = ret_ptr() node_offset:211:17
                %969 = decl_val("bitRmw") token_offset:211:24
                %970 = dbg_stmt(2, 30)
                %971 = param_type(%969, 0)
                %972 = param_type(%969, 1)
                %973 = enum_literal("Toggle") token_offset:211:38
                %974 = param_type(%969, 2)
                %975 = param_type(%969, 3)
                %976 = call(.auto, %969, [%958, %973, %961, %964]) node_offset:211:30
                %977 = store_node(%968, %976) node_offset:211:30
                %979 = dbg_block_end())
                %978 = ret_load(%968) node_offset:211:17
              }) (lbrace=1:92,rbrace=3:13) node_offset:210:24
              %981 = break_inline(%954, %980)
            }) node_offset:210:24
            [2641] bitRmw line(36) hash(3ad66efd628621efefba43544c6243c9): %982 = block_inline({
              %986 = param("self", {
                %983 = decl_val("Self") token_offset:214:37
                %984 = ptr_type_simple(%983, One)
                %985 = break_inline(%986, %984)
              }) token_offset:214:30
              %989 = param_comptime("op", {
                %987 = decl_val("BitRmwOp") token_offset:214:56
                %988 = break_inline(%989, %987)
              }) token_offset:214:52
              %992 = param("bit", {
                %990 = decl_val("Bit") token_offset:214:71
                %991 = break_inline(%992, %990)
              }) token_offset:214:66
              %995 = param_comptime("ordering", {
                %993 = decl_val("Ordering") token_offset:214:95
                %994 = break_inline(%995, %993)
              }) token_offset:214:85
              %1119 = func_extended(ret_ty={
                %996 = break_inline(%1119, @Zir.Inst.Ref.u1_type)
              }, cc=@Zir.Inst.Ref.calling_convention_inline, body={
                %997 = dbg_block_begin())
                %998 = dbg_stmt(3, 17)
                %1025 = block({
                  %999 = dbg_stmt(3, 21)
                  %1000 = decl_ref("builtin") token_offset:216:30
                  %1001 = field_ptr(%1000, "target") node_offset:216:37
                  %1002 = field_ptr(%1001, "cpu") node_offset:216:44
                  %1003 = field_ptr(%1002, "arch") node_offset:216:48
                  %1004 = field_call_bind(%1003, "isX86") node_offset:216:53
                  %1005 = dbg_stmt(3, 59)
                  %1006 = call(.compile_time, %1004, []) node_offset:216:59
                  %1007 = as_node(@Zir.Inst.Ref.bool_type, %1006) node_offset:216:59
                  %1008 = bool_br_and(%1007, {
                    %1009 = closure_get(%24) node_offset:216:74
                    %1010 = size_of(%1009) node_offset:216:66
                    %1011 = int(2)
                    %1012 = cmp_gte(%1010, %1011) node_offset:216:77
                    %1013 = as_node(@Zir.Inst.Ref.bool_type, %1012) node_offset:216:77
                    %1014 = break_inline(%1008, %1013)
                  }
                  %1015 = as_node(@Zir.Inst.Ref.bool_type, %1008) node_offset:216:62
                  %1016 = bool_br_and(%1015, {
                    %1017 = closure_get(%24) node_offset:216:94
                    %1018 = size_of(%1017) node_offset:216:86
                    %1019 = int(8)
                    %1020 = cmp_lte(%1018, %1019) node_offset:216:97
                    %1021 = as_node(@Zir.Inst.Ref.bool_type, %1020) node_offset:216:97
                    %1022 = break_inline(%1016, %1021)
                  }
                  %1023 = as_node(@Zir.Inst.Ref.bool_type, %1016) node_offset:216:82
                  %1024 = condbr(%1023, {
                    %1026 = dbg_block_begin())
                    %1027 = dbg_block_begin())
                    %1028 = dbg_stmt(5, 21)
                    %1036 = block({
                      %1029 = dbg_stmt(5, 25)
                      %1030 = decl_val("builtin") token_offset:218:25
                      %1031 = field_val(%1030, "zig_backend") node_offset:218:32
                      %1032 = enum_literal("stage1") token_offset:218:49
                      %1033 = cmp_eq(%1031, %1032) node_offset:218:45
                      %1034 = as_node(@Zir.Inst.Ref.bool_type, %1033) node_offset:218:45
                      %1035 = condbr(%1034, {
                        %1037 = dbg_block_begin())
                        %1038 = dbg_block_begin())
                        %1039 = dbg_stmt(6, 25)
                        %1040 = ret_ptr() node_offset:219:25
                        %1041 = decl_val("x86BitRmw") token_offset:219:32
                        %1042 = dbg_stmt(6, 41)
                        %1043 = param_type(%1041, 0)
                        %1044 = param_type(%1041, 1)
                        %1045 = param_type(%1041, 2)
                        %1046 = param_type(%1041, 3)
                        %1047 = call(.auto, %1041, [%986, %989, %992, %995]) node_offset:219:41
                        %1048 = store_node(%1040, %1047) node_offset:219:41
                        %1050 = dbg_block_end())
                        %1051 = dbg_block_end())
                        %1049 = ret_load(%1040) node_offset:219:25
                      }, {
                        %1052 = break(%1036, @Zir.Inst.Ref.void_value)
                      }) node_offset:218:21
                    }) node_offset:218:21
                    %1054 = dbg_block_end())
                    %1055 = dbg_block_end())
                    %1053 = ensure_result_used(%1036) node_offset:218:21
                    %1056 = break(%1025, @Zir.Inst.Ref.void_value)
                  }, {
                    %1057 = break(%1025, @Zir.Inst.Ref.void_value)
                  }) node_offset:216:17
                }) node_offset:216:17
                %1058 = ensure_result_used(%1025) node_offset:216:17
                %1059 = dbg_stmt(10, 17)
                %1060 = closure_get(%24) node_offset:223:34
                %1061 = as_node(%1060, @Zir.Inst.Ref.one) node_offset:223:37
                %1062 = typeof_log2_int_type(%1061) node_offset:223:30
                %1063 = as_node(%1062, %992) node_offset:223:43
                %1064 = shl(%1061, %1063) node_offset:223:40
                %1065 = dbg_var_val(%1064, "mask")
                %1066 = dbg_stmt(11, 17)
                %1068 = switch_cond(%989) node_offset:224:39
                %1069 = typeof(%1068) node_offset:224:39
                %1071 = enum_literal("Set") token_offset:225:22
                %1072 = as_node(%1069, %1071) node_offset:225:22
                %1083 = enum_literal("Reset") token_offset:226:22
                %1084 = as_node(%1069, %1083) node_offset:226:22
                %1096 = enum_literal("Toggle") token_offset:227:22
                %1097 = as_node(%1069, %1096) node_offset:227:22
                %1070 = switch_block(%1068,
                  %1072 => {
                    %1073 = dbg_block_begin())
                    %1074 = ref(%986) token_offset:225:29
                    %1075 = field_call_bind(%1074, "fetchOr") node_offset:225:33
                    %1076 = dbg_stmt(12, 41)
                    %1077 = param_type(%1075, 0)
                    %1078 = param_type(%1075, 1)
                    %1079 = call(.auto, %1075, [%1064, %995]) node_offset:225:41
                    %1081 = dbg_block_end())
                    %1082 = break(%1070, %1079)
                  },
                  %1084 => {
                    %1085 = dbg_block_begin())
                    %1086 = ref(%986) token_offset:226:31
                    %1087 = field_call_bind(%1086, "fetchAnd") node_offset:226:35
                    %1088 = dbg_stmt(13, 44)
                    %1089 = param_type(%1087, 0)
                    %1090 = bit_not(%1064) node_offset:226:45
                    %1091 = param_type(%1087, 1)
                    %1092 = call(.auto, %1087, [%1090, %995]) node_offset:226:44
                    %1094 = dbg_block_end())
                    %1095 = break(%1070, %1092)
                  },
                  %1097 => {
                    %1098 = dbg_block_begin())
                    %1099 = ref(%986) token_offset:227:32
                    %1100 = field_call_bind(%1099, "fetchXor") node_offset:227:36
                    %1101 = dbg_stmt(14, 45)
                    %1102 = param_type(%1100, 0)
                    %1103 = param_type(%1100, 1)
                    %1104 = call(.auto, %1100, [%1064, %995]) node_offset:227:45
                    %1106 = dbg_block_end())
                    %1107 = break(%1070, %1104)
                  }) node_offset:224:31
                %1109 = dbg_var_val(%1070, "value")
                %1110 = dbg_stmt(17, 17)
                %1111 = ret_type() node_offset:230:17
                %1112 = bit_and(%1070, %1064) node_offset:230:41
                %1113 = cmp_neq(%1112, @Zir.Inst.Ref.zero) node_offset:230:48
                %1114 = as_node(@Zir.Inst.Ref.bool_type, %1113) node_offset:230:48
                %1115 = bool_to_int(%1114) node_offset:230:24
                %1116 = as_node(%1111, %1115) node_offset:230:24
                %1118 = dbg_block_end())
                %1117 = ret_node(%1116) node_offset:230:17
              }) (lbrace=1:108,rbrace=18:13) node_offset:214:20
              %1120 = break_inline(%982, %1119)
            }) node_offset:214:20
            [2649] x86BitRmw line(55) hash(a5292d70d1606164430a29b01959de48): %1121 = block_inline({
              %1125 = param("self", {
                %1122 = decl_val("Self") token_offset:233:40
                %1123 = ptr_type_simple(%1122, One)
                %1124 = break_inline(%1125, %1123)
              }) token_offset:233:33
              %1128 = param_comptime("op", {
                %1126 = decl_val("BitRmwOp") token_offset:233:59
                %1127 = break_inline(%1128, %1126)
              }) token_offset:233:55
              %1131 = param("bit", {
                %1129 = decl_val("Bit") token_offset:233:74
                %1130 = break_inline(%1131, %1129)
              }) token_offset:233:69
              %1134 = param_comptime("ordering", {
                %1132 = decl_val("Ordering") token_offset:233:98
                %1133 = break_inline(%1134, %1132)
              }) token_offset:233:88
              %1289 = func_extended(ret_ty={
                %1135 = break_inline(%1289, @Zir.Inst.Ref.u1_type)
              }, cc=@Zir.Inst.Ref.calling_convention_inline, body={
                %1136 = dbg_block_begin())
                %1137 = dbg_stmt(2, 17)
                %1139 = closure_get(%24) node_offset:234:53
                %1140 = size_of(%1139) node_offset:234:45
                %1141 = switch_cond(%1140) node_offset:234:45
                %1142 = typeof(%1141) node_offset:234:45
                %1144 = int(2)
                %1145 = as_node(%1142, %1144) node_offset:235:21
                %1186 = int(4)
                %1187 = as_node(%1142, %1186) node_offset:258:21
                %1228 = int(8)
                %1229 = as_node(%1142, %1228) node_offset:281:21
                %1143 = switch_block(%1141,
                  else => {
                    %1270 = dbg_block_begin())
                    %1271 = str("Invalid atomic type ")
                    %1272 = closure_get(%24) node_offset:304:79
                    %1273 = type_name(%1272) node_offset:304:69
                    %1274 = array_cat(%1271, %1273) node_offset:304:66
                    %1275 = as_node(@Zir.Inst.Ref.const_slice_u8_type, %1274) node_offset:304:66
                    %1277 = dbg_block_end())
                    %1276 = compile_error(%1275) node_offset:304:29
                  },
                  %1145 => {
                    %1146 = dbg_block_begin())
                    %1147 = switch_cond(%1128) node_offset:235:34
                    %1148 = typeof(%1147) node_offset:235:34
                    %1150 = enum_literal("Set") token_offset:236:26
                    %1151 = as_node(%1148, %1150) node_offset:236:26
                    %1161 = enum_literal("Reset") token_offset:243:26
                    %1162 = as_node(%1148, %1161) node_offset:243:26
                    %1172 = enum_literal("Toggle") token_offset:250:26
                    %1173 = as_node(%1148, %1172) node_offset:250:26
                    %1149 = switch_block(%1147,
                      %1151 => {
                        %1152 = dbg_block_begin())
                        %1153 = ref(%1125) token_offset:239:44
                        %1154 = field_ptr(%1153, "value") node_offset:239:48
                        %1155 = closure_get(%24) node_offset:240:46
                        %1156 = as_node(%1155, %1131) node_offset:240:49
                        %1157 = extended(asm(volatile, "lock btsw %[bit], %[ptr]", , output(result, "={@ccc}", ->@Zir.Inst.Ref.u8_type)input(ptr, "*m", %1154), input(bit, "X", %1156)cc, memory)) node_offset:236:33
                        %1159 = dbg_block_end())
                        %1158 = as(@Zir.Inst.Ref.u8_type, %1157)
                        %1160 = break(%1149, %1158)
                      },
                      %1162 => {
                        %1163 = dbg_block_begin())
                        %1164 = ref(%1125) token_offset:246:44
                        %1165 = field_ptr(%1164, "value") node_offset:246:48
                        %1166 = closure_get(%24) node_offset:247:46
                        %1167 = as_node(%1166, %1131) node_offset:247:49
                        %1168 = extended(asm(volatile, "lock btrw %[bit], %[ptr]", , output(result, "={@ccc}", ->@Zir.Inst.Ref.u8_type)input(ptr, "*m", %1165), input(bit, "X", %1167)cc, memory)) node_offset:243:35
                        %1170 = dbg_block_end())
                        %1169 = as(@Zir.Inst.Ref.u8_type, %1168)
                        %1171 = break(%1149, %1169)
                      },
                      %1173 => {
                        %1174 = dbg_block_begin())
                        %1175 = ref(%1125) token_offset:253:44
                        %1176 = field_ptr(%1175, "value") node_offset:253:48
                        %1177 = closure_get(%24) node_offset:254:46
                        %1178 = as_node(%1177, %1131) node_offset:254:49
                        %1179 = extended(asm(volatile, "lock btcw %[bit], %[ptr]", , output(result, "={@ccc}", ->@Zir.Inst.Ref.u8_type)input(ptr, "*m", %1176), input(bit, "X", %1178)cc, memory)) node_offset:250:36
                        %1181 = dbg_block_end())
                        %1180 = as(@Zir.Inst.Ref.u8_type, %1179)
                        %1182 = break(%1149, %1180)
                      }) node_offset:235:26
                    %1184 = dbg_block_end())
                    %1183 = as(@Zir.Inst.Ref.u8_type, %1149)
                    %1185 = break(%1143, %1183)
                  },
                  %1187 => {
                    %1188 = dbg_block_begin())
                    %1189 = switch_cond(%1128) node_offset:258:34
                    %1190 = typeof(%1189) node_offset:258:34
                    %1192 = enum_literal("Set") token_offset:259:26
                    %1193 = as_node(%1190, %1192) node_offset:259:26
                    %1203 = enum_literal("Reset") token_offset:266:26
                    %1204 = as_node(%1190, %1203) node_offset:266:26
                    %1214 = enum_literal("Toggle") token_offset:273:26
                    %1215 = as_node(%1190, %1214) node_offset:273:26
                    %1191 = switch_block(%1189,
                      %1193 => {
                        %1194 = dbg_block_begin())
                        %1195 = ref(%1125) token_offset:262:44
                        %1196 = field_ptr(%1195, "value") node_offset:262:48
                        %1197 = closure_get(%24) node_offset:263:46
                        %1198 = as_node(%1197, %1131) node_offset:263:49
                        %1199 = extended(asm(volatile, "lock btsl %[bit], %[ptr]", , output(result, "={@ccc}", ->@Zir.Inst.Ref.u8_type)input(ptr, "*m", %1196), input(bit, "X", %1198)cc, memory)) node_offset:259:33
                        %1201 = dbg_block_end())
                        %1200 = as(@Zir.Inst.Ref.u8_type, %1199)
                        %1202 = break(%1191, %1200)
                      },
                      %1204 => {
                        %1205 = dbg_block_begin())
                        %1206 = ref(%1125) token_offset:269:44
                        %1207 = field_ptr(%1206, "value") node_offset:269:48
                        %1208 = closure_get(%24) node_offset:270:46
                        %1209 = as_node(%1208, %1131) node_offset:270:49
                        %1210 = extended(asm(volatile, "lock btrl %[bit], %[ptr]", , output(result, "={@ccc}", ->@Zir.Inst.Ref.u8_type)input(ptr, "*m", %1207), input(bit, "X", %1209)cc, memory)) node_offset:266:35
                        %1212 = dbg_block_end())
                        %1211 = as(@Zir.Inst.Ref.u8_type, %1210)
                        %1213 = break(%1191, %1211)
                      },
                      %1215 => {
                        %1216 = dbg_block_begin())
                        %1217 = ref(%1125) token_offset:276:44
                        %1218 = field_ptr(%1217, "value") node_offset:276:48
                        %1219 = closure_get(%24) node_offset:277:46
                        %1220 = as_node(%1219, %1131) node_offset:277:49
                        %1221 = extended(asm(volatile, "lock btcl %[bit], %[ptr]", , output(result, "={@ccc}", ->@Zir.Inst.Ref.u8_type)input(ptr, "*m", %1218), input(bit, "X", %1220)cc, memory)) node_offset:273:36
                        %1223 = dbg_block_end())
                        %1222 = as(@Zir.Inst.Ref.u8_type, %1221)
                        %1224 = break(%1191, %1222)
                      }) node_offset:258:26
                    %1226 = dbg_block_end())
                    %1225 = as(@Zir.Inst.Ref.u8_type, %1191)
                    %1227 = break(%1143, %1225)
                  },
                  %1229 => {
                    %1230 = dbg_block_begin())
                    %1231 = switch_cond(%1128) node_offset:281:34
                    %1232 = typeof(%1231) node_offset:281:34
                    %1234 = enum_literal("Set") token_offset:282:26
                    %1235 = as_node(%1232, %1234) node_offset:282:26
                    %1245 = enum_literal("Reset") token_offset:289:26
                    %1246 = as_node(%1232, %1245) node_offset:289:26
                    %1256 = enum_literal("Toggle") token_offset:296:26
                    %1257 = as_node(%1232, %1256) node_offset:296:26
                    %1233 = switch_block(%1231,
                      %1235 => {
                        %1236 = dbg_block_begin())
                        %1237 = ref(%1125) token_offset:285:44
                        %1238 = field_ptr(%1237, "value") node_offset:285:48
                        %1239 = closure_get(%24) node_offset:286:46
                        %1240 = as_node(%1239, %1131) node_offset:286:49
                        %1241 = extended(asm(volatile, "lock btsq %[bit], %[ptr]", , output(result, "={@ccc}", ->@Zir.Inst.Ref.u8_type)input(ptr, "*m", %1238), input(bit, "X", %1240)cc, memory)) node_offset:282:33
                        %1243 = dbg_block_end())
                        %1242 = as(@Zir.Inst.Ref.u8_type, %1241)
                        %1244 = break(%1233, %1242)
                      },
                      %1246 => {
                        %1247 = dbg_block_begin())
                        %1248 = ref(%1125) token_offset:292:44
                        %1249 = field_ptr(%1248, "value") node_offset:292:48
                        %1250 = closure_get(%24) node_offset:293:46
                        %1251 = as_node(%1250, %1131) node_offset:293:49
                        %1252 = extended(asm(volatile, "lock btrq %[bit], %[ptr]", , output(result, "={@ccc}", ->@Zir.Inst.Ref.u8_type)input(ptr, "*m", %1249), input(bit, "X", %1251)cc, memory)) node_offset:289:35
                        %1254 = dbg_block_end())
                        %1253 = as(@Zir.Inst.Ref.u8_type, %1252)
                        %1255 = break(%1233, %1253)
                      },
                      %1257 => {
                        %1258 = dbg_block_begin())
                        %1259 = ref(%1125) token_offset:299:44
                        %1260 = field_ptr(%1259, "value") node_offset:299:48
                        %1261 = closure_get(%24) node_offset:300:46
                        %1262 = as_node(%1261, %1131) node_offset:300:49
                        %1263 = extended(asm(volatile, "lock btcq %[bit], %[ptr]", , output(result, "={@ccc}", ->@Zir.Inst.Ref.u8_type)input(ptr, "*m", %1260), input(bit, "X", %1262)cc, memory)) node_offset:296:36
                        %1265 = dbg_block_end())
                        %1264 = as(@Zir.Inst.Ref.u8_type, %1263)
                        %1266 = break(%1233, %1264)
                      }) node_offset:281:26
                    %1268 = dbg_block_end())
                    %1267 = as(@Zir.Inst.Ref.u8_type, %1233)
                    %1269 = break(%1143, %1267)
                  }) node_offset:234:37
                %1279 = as(@Zir.Inst.Ref.u8_type, %1143)
                %1280 = dbg_var_val(%1279, "old_bit")
                %1281 = dbg_stmt(76, 17)
                %1282 = ensure_result_non_error(%1134) node_offset:308:21
                %1283 = dbg_stmt(78, 17)
                %1284 = ret_type() node_offset:310:17
                %1285 = int_cast(@Zir.Inst.Ref.u1_type, %1279) node_offset:310:24
                %1286 = as_node(%1284, %1285) node_offset:310:24
                %1288 = dbg_block_end())
                %1287 = ret_node(%1286) node_offset:310:17
              }) (lbrace=1:111,rbrace=79:13) node_offset:233:20
              %1290 = break_inline(%1121, %1289)
            }) node_offset:233:20
          }, {}, {}) node_offset:178:69
          %1291 = call(.compile_time, %757, [%767, %769]) node_offset:178:38
          %1292 = break_inline(%756, %1291)
        }) node_offset:178:13
      }, {
        %25 = closure_get(%24) node_offset:9:16
        %1293 = break_inline(%23, @Zir.Inst.Ref.void_value)
      }, {
        value: %25,
      }) node_offset:8:19
      %24 = closure_capture(%18) token_offset:7:24
      %1294 = as_node(%22, %23) node_offset:8:19
      %1296 = dbg_block_end())
      %1295 = ret_node(%1294) node_offset:8:5
    }) (lbrace=1:38,rbrace=308:1) node_offset:7:5
    %1298 = break_inline(%16, %1297)
  }) node_offset:7:5
  [8423] test "@"Atomic.fence"" line(315) hash(4b5e4426146f378149b7f52c6cbd6fa9): %1299 = block_inline({
    %1350 = func_extended(test, ret_ty=void, inferror, body={
      %1300 = dbg_block_begin())
      %1301 = dbg_stmt(2, 5)
      %1302 = dbg_stmt(2, 17)
      %1303 = enum_literal("Acquire") token_offset:317:21
      %1304 = enum_literal("Release") token_offset:317:31
      %1305 = enum_literal("AcqRel") token_offset:317:41
      %1306 = enum_literal("SeqCst") token_offset:317:50
      %1307 = array_init_anon(.{%1303, %1304, %1305, %1306}) node_offset:317:18
      %1308 = indexable_ptr_len(%1307) node_offset:317:18
      %1309 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:317:12
      %1310 = store(%1309, @Zir.Inst.Ref.zero_usize)
      %1311 = block_inline({
        %1315 = block_inline({
          %1312 = load(%1309) node_offset:317:18
          %1313 = cmp_lt(%1312, %1308) node_offset:317:18
          %1314 = condbr_inline(%1313, {
            %1320 = dbg_block_begin())
            %1321 = elem_val(%1307, %1312)
            %1322 = dbg_var_val(%1321, "ordering")
            %1323 = dbg_block_begin())
            %1324 = dbg_stmt(3, 9)
            %1325 = alloc_inferred_mut() node_offset:318:9
            %1326 = decl_val("Atomic") token_offset:318:17
            %1327 = dbg_stmt(3, 23)
            %1328 = param_type(%1326, 0)
            %1329 = call(.auto, %1326, [@Zir.Inst.Ref.usize_type]) node_offset:318:23
            %1330 = ref(%1329) token_offset:318:17
            %1331 = field_call_bind(%1330, "init") node_offset:318:30
            %1332 = dbg_stmt(3, 35)
            %1333 = param_type(%1331, 0)
            %1334 = call(.auto, %1331, [@Zir.Inst.Ref.zero]) node_offset:318:35
            %1335 = store_to_inferred_ptr(%1325, %1334)
            %1336 = resolve_inferred_alloc(%1325) node_offset:318:9
            %1337 = dbg_var_ptr(%1325, "x")
            %1338 = dbg_stmt(4, 9)
            %1339 = field_call_bind(%1325, "fence") node_offset:319:10
            %1340 = dbg_stmt(4, 16)
            %1341 = param_type(%1339, 0)
            %1343 = dbg_block_end())
            %1344 = dbg_block_end())
            %1342 = call(nodiscard .auto, %1339, [%1321]) node_offset:319:16
            %1345 = break_inline(%1315, @Zir.Inst.Ref.void_value)
          }, {
            %1346 = break_inline(%1311, @Zir.Inst.Ref.void_value)
          }) node_offset:317:12
        }) node_offset:317:12
        %1316 = load(%1309) node_offset:317:18
        %1317 = add(%1316, @Zir.Inst.Ref.one_usize) node_offset:317:12
        %1318 = store(%1309, %1317)
        %1319 = repeat_inline() node_offset:317:12
      }) node_offset:317:12
      %1348 = dbg_block_end())
      %1347 = ensure_result_used(%1311) node_offset:317:12
      %1349 = ret_tok(@Zir.Inst.Ref.void_value) token_offset:321:1
    }) (lbrace=1:21,rbrace=6:1) node_offset:316:1
    %1351 = break_inline(%1299, %1350)
  }) node_offset:316:1
  [8431] atomicIntTypes line(322) hash(219e89da8051fad3401481d38cc5f9bf): %1352 = block_inline({
    %1419 = func(ret_ty={
      %1353 = ptr_type_simple(@Zir.Inst.Ref.type_type, const, Slice)
      %1354 = break_inline(%1419, %1353)
    }, body={
      %1355 = dbg_block_begin())
      %1356 = dbg_stmt(2, 5)
      %1357 = alloc_inferred_comptime_mut() node_offset:324:14
      %1358 = store_to_inferred_ptr(%1357, @Zir.Inst.Ref.one)
      %1359 = resolve_inferred_alloc(%1357) node_offset:324:14
      %1360 = dbg_var_ptr(%1357, "bytes")
      %1361 = dbg_stmt(3, 5)
      %1362 = ptr_type_simple(@Zir.Inst.Ref.type_type, const, Slice)
      %1363 = alloc_comptime_mut(%1362) node_offset:325:14
      %1364 = array_type(@Zir.Inst.Ref.zero_usize, @Zir.Inst.Ref.type_type)
      %1365 = struct_init_empty(%1364) node_offset:325:48
      %1366 = ref(%1365) token_offset:325:41
      %1367 = store_node(%1363, %1366) node_offset:325:40
      %1368 = dbg_var_ptr(%1363, "types")
      %1369 = dbg_stmt(4, 5)
      %1370 = block_inline({
        %1377 = block_inline({
          %1371 = dbg_stmt(4, 19)
          %1372 = load(%1357) node_offset:326:19
          %1373 = size_of(@Zir.Inst.Ref.usize_type) node_offset:326:28
          %1374 = cmp_lte(%1372, %1373) node_offset:326:25
          %1375 = as_node(@Zir.Inst.Ref.bool_type, %1374) node_offset:326:25
          %1376 = condbr_inline(%1375, {
            %1387 = dbg_block_begin())
            %1388 = dbg_block_begin())
            %1389 = dbg_stmt(5, 9)
            %1390 = load(%1363) node_offset:327:17
            %1391 = int(1)
            %1392 = array_type(%1391, @Zir.Inst.Ref.type_type)
            %1393 = decl_ref("std") token_offset:327:35
            %1394 = field_ptr(%1393, "meta") node_offset:327:38
            %1395 = field_call_bind(%1394, "Int") node_offset:327:43
            %1396 = dbg_stmt(5, 47)
            %1397 = param_type(%1395, 0)
            %1398 = enum_literal("unsigned") token_offset:327:49
            %1399 = param_type(%1395, 1)
            %1400 = load(%1357) node_offset:327:59
            %1401 = int(8)
            %1402 = mul(%1400, %1401) node_offset:327:65
            %1403 = call(.auto, %1395, [%1398, %1402]) node_offset:327:47
            %1404 = as_node(@Zir.Inst.Ref.type_type, %1403) node_offset:327:47
            %1405 = array_init_ref(.{%1404}) node_offset:327:34
            %1406 = array_cat(%1390, %1405) node_offset:327:23
            %1408 = dbg_block_end())
            %1409 = dbg_block_end())
            %1407 = store_node(%1363, %1406) node_offset:327:23
            %1410 = break_inline(%1377, @Zir.Inst.Ref.void_value)
          }, {
            %1411 = break_inline(%1370, @Zir.Inst.Ref.void_value)
          }) node_offset:326:12
        }) node_offset:326:12
        %1378 = dbg_block_begin())
        %1379 = dbg_stmt(4, 47)
        %1380 = load(%1357) node_offset:326:53
        %1381 = typeof(%1380) node_offset:326:53
        %1382 = int(2)
        %1383 = mul(%1380, %1382) node_offset:326:53
        %1385 = dbg_block_end())
        %1384 = store(%1357, %1383)
        %1386 = repeat_inline() node_offset:326:12
      }) node_offset:326:12
      %1412 = ensure_result_used(%1370) node_offset:326:12
      %1413 = dbg_stmt(7, 5)
      %1414 = ret_type() node_offset:329:5
      %1415 = load(%1363) node_offset:329:12
      %1416 = as_node(%1414, %1415) node_offset:329:12
      %1418 = dbg_block_end())
      %1417 = ret_node(%1416) node_offset:329:5
    }) (lbrace=1:34,rbrace=8:1) node_offset:323:1
    %1420 = break_inline(%1352, %1419)
  }) node_offset:323:1
  [8439] test "@"Atomic.loadUnchecked"" line(331) hash(7103682e79aad94420f1aef7d591d92f): %1421 = block_inline({
    %1485 = func_extended(test, ret_ty=void, inferror, body={
      %1422 = dbg_block_begin())
      %1423 = dbg_stmt(2, 5)
      %1424 = dbg_stmt(2, 17)
      %1425 = decl_val("atomicIntTypes") token_offset:333:17
      %1426 = dbg_stmt(2, 31)
      %1427 = call(.auto, %1425, []) node_offset:333:31
      %1428 = indexable_ptr_len(%1427) node_offset:333:31
      %1429 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:333:12
      %1430 = store(%1429, @Zir.Inst.Ref.zero_usize)
      %1431 = block_inline({
        %1435 = block_inline({
          %1432 = load(%1429) node_offset:333:31
          %1433 = cmp_lt(%1432, %1428) node_offset:333:31
          %1434 = condbr_inline(%1433, {
            %1440 = dbg_block_begin())
            %1441 = elem_val(%1427, %1432)
            %1442 = dbg_var_val(%1441, "Int")
            %1443 = dbg_block_begin())
            %1444 = dbg_stmt(3, 9)
            %1445 = alloc_inferred_mut() node_offset:334:9
            %1446 = decl_val("Atomic") token_offset:334:17
            %1447 = dbg_stmt(3, 23)
            %1448 = param_type(%1446, 0)
            %1449 = call(.auto, %1446, [%1441]) node_offset:334:23
            %1450 = ref(%1449) token_offset:334:17
            %1451 = field_call_bind(%1450, "init") node_offset:334:28
            %1452 = dbg_stmt(3, 33)
            %1453 = param_type(%1451, 0)
            %1454 = int(5)
            %1455 = call(.auto, %1451, [%1454]) node_offset:334:33
            %1456 = store_to_inferred_ptr(%1445, %1455)
            %1457 = resolve_inferred_alloc(%1445) node_offset:334:9
            %1458 = dbg_var_ptr(%1445, "x")
            %1459 = dbg_stmt(4, 9)
            %1472 = block({
              %1460 = decl_ref("testing") token_offset:335:13
              %1461 = field_call_bind(%1460, "expectEqual") node_offset:335:20
              %1462 = dbg_stmt(4, 32)
              %1463 = param_type(%1461, 0)
              %1464 = field_call_bind(%1445, "loadUnchecked") node_offset:335:34
              %1465 = dbg_stmt(4, 48)
              %1466 = call(.auto, %1464, []) node_offset:335:48
              %1467 = param_type(%1461, 1)
              %1468 = int(5)
              %1469 = call(.auto, %1461, [%1466, %1468]) node_offset:335:32
              %1470 = is_non_err(%1469) node_offset:335:9
              %1471 = condbr(%1470, {
                %1473 = err_union_payload_unsafe(%1469) node_offset:335:9
                %1476 = break(%1472, %1473)
              }, {
                %1474 = err_union_code(%1469) node_offset:335:9
                %1475 = ret_node(%1474) node_offset:335:9
              }) node_offset:335:9
            }) node_offset:335:9
            %1478 = dbg_block_end())
            %1479 = dbg_block_end())
            %1477 = ensure_result_used(%1472) node_offset:335:9
            %1480 = break_inline(%1435, @Zir.Inst.Ref.void_value)
          }, {
            %1481 = break_inline(%1431, @Zir.Inst.Ref.void_value)
          }) node_offset:333:12
        }) node_offset:333:12
        %1436 = load(%1429) node_offset:333:31
        %1437 = add(%1436, @Zir.Inst.Ref.one_usize) node_offset:333:12
        %1438 = store(%1429, %1437)
        %1439 = repeat_inline() node_offset:333:12
      }) node_offset:333:12
      %1483 = dbg_block_end())
      %1482 = ensure_result_used(%1431) node_offset:333:12
      %1484 = ret_tok(@Zir.Inst.Ref.void_value) token_offset:337:1
    }) (lbrace=1:29,rbrace=6:1) node_offset:332:1
    %1486 = break_inline(%1421, %1485)
  }) node_offset:332:1
  [8447] test "@"Atomic.storeUnchecked"" line(338) hash(6317f7491c5f0db22f29421f209069e8): %1487 = block_inline({
    %1559 = func_extended(test, ret_ty=void, inferror, body={
      %1488 = dbg_block_begin())
      %1489 = dbg_stmt(2, 5)
      %1490 = dbg_stmt(2, 17)
      %1491 = decl_val("atomicIntTypes") token_offset:340:17
      %1492 = dbg_stmt(2, 31)
      %1493 = call(.auto, %1491, []) node_offset:340:31
      %1494 = indexable_ptr_len(%1493) node_offset:340:31
      %1495 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:340:12
      %1496 = store(%1495, @Zir.Inst.Ref.zero_usize)
      %1497 = block_inline({
        %1501 = block_inline({
          %1498 = load(%1495) node_offset:340:31
          %1499 = cmp_lt(%1498, %1494) node_offset:340:31
          %1500 = condbr_inline(%1499, {
            %1506 = dbg_block_begin())
            %1507 = elem_val(%1493, %1498)
            %1508 = dbg_var_val(%1507, "Int")
            %1509 = dbg_block_begin())
            %1510 = dbg_stmt(3, 9)
            %1511 = ensure_result_non_error(%1507) node_offset:341:13
            %1512 = dbg_stmt(4, 9)
            %1513 = alloc_inferred_mut() node_offset:342:9
            %1514 = decl_val("Atomic") token_offset:342:17
            %1515 = dbg_stmt(4, 23)
            %1516 = param_type(%1514, 0)
            %1517 = call(.auto, %1514, [@Zir.Inst.Ref.usize_type]) node_offset:342:23
            %1518 = ref(%1517) token_offset:342:17
            %1519 = field_call_bind(%1518, "init") node_offset:342:30
            %1520 = dbg_stmt(4, 35)
            %1521 = param_type(%1519, 0)
            %1522 = int(5)
            %1523 = call(.auto, %1519, [%1522]) node_offset:342:35
            %1524 = store_to_inferred_ptr(%1513, %1523)
            %1525 = resolve_inferred_alloc(%1513) node_offset:342:9
            %1526 = dbg_var_ptr(%1513, "x")
            %1527 = dbg_stmt(5, 9)
            %1528 = field_call_bind(%1513, "storeUnchecked") node_offset:343:10
            %1529 = dbg_stmt(5, 25)
            %1530 = param_type(%1528, 0)
            %1531 = int(10)
            %1532 = call(nodiscard .auto, %1528, [%1531]) node_offset:343:25
            %1533 = dbg_stmt(6, 9)
            %1546 = block({
              %1534 = decl_ref("testing") token_offset:344:13
              %1535 = field_call_bind(%1534, "expectEqual") node_offset:344:20
              %1536 = dbg_stmt(6, 32)
              %1537 = param_type(%1535, 0)
              %1538 = field_call_bind(%1513, "loadUnchecked") node_offset:344:34
              %1539 = dbg_stmt(6, 48)
              %1540 = call(.auto, %1538, []) node_offset:344:48
              %1541 = param_type(%1535, 1)
              %1542 = int(10)
              %1543 = call(.auto, %1535, [%1540, %1542]) node_offset:344:32
              %1544 = is_non_err(%1543) node_offset:344:9
              %1545 = condbr(%1544, {
                %1547 = err_union_payload_unsafe(%1543) node_offset:344:9
                %1550 = break(%1546, %1547)
              }, {
                %1548 = err_union_code(%1543) node_offset:344:9
                %1549 = ret_node(%1548) node_offset:344:9
              }) node_offset:344:9
            }) node_offset:344:9
            %1552 = dbg_block_end())
            %1553 = dbg_block_end())
            %1551 = ensure_result_used(%1546) node_offset:344:9
            %1554 = break_inline(%1501, @Zir.Inst.Ref.void_value)
          }, {
            %1555 = break_inline(%1497, @Zir.Inst.Ref.void_value)
          }) node_offset:340:12
        }) node_offset:340:12
        %1502 = load(%1495) node_offset:340:31
        %1503 = add(%1502, @Zir.Inst.Ref.one_usize) node_offset:340:12
        %1504 = store(%1495, %1503)
        %1505 = repeat_inline() node_offset:340:12
      }) node_offset:340:12
      %1557 = dbg_block_end())
      %1556 = ensure_result_used(%1497) node_offset:340:12
      %1558 = ret_tok(@Zir.Inst.Ref.void_value) token_offset:346:1
    }) (lbrace=1:30,rbrace=8:1) node_offset:339:1
    %1560 = break_inline(%1487, %1559)
  }) node_offset:339:1
  [8455] test "@"Atomic.load"" line(347) hash(034ee24fe4da400f7f34c1101a6d22da): %1561 = block_inline({
    %1654 = func_extended(test, ret_ty=void, inferror, body={
      %1562 = dbg_block_begin())
      %1563 = dbg_stmt(2, 5)
      %1564 = dbg_stmt(2, 17)
      %1565 = decl_val("atomicIntTypes") token_offset:349:17
      %1566 = dbg_stmt(2, 31)
      %1567 = call(.auto, %1565, []) node_offset:349:31
      %1568 = indexable_ptr_len(%1567) node_offset:349:31
      %1569 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:349:12
      %1570 = store(%1569, @Zir.Inst.Ref.zero_usize)
      %1571 = block_inline({
        %1575 = block_inline({
          %1572 = load(%1569) node_offset:349:31
          %1573 = cmp_lt(%1572, %1568) node_offset:349:31
          %1574 = condbr_inline(%1573, {
            %1580 = dbg_block_begin())
            %1581 = elem_val(%1567, %1572)
            %1582 = dbg_var_val(%1581, "Int")
            %1583 = dbg_block_begin())
            %1584 = dbg_stmt(3, 9)
            %1585 = dbg_stmt(3, 21)
            %1586 = enum_literal("Unordered") token_offset:350:25
            %1587 = enum_literal("Monotonic") token_offset:350:37
            %1588 = enum_literal("Acquire") token_offset:350:49
            %1589 = enum_literal("SeqCst") token_offset:350:59
            %1590 = array_init_anon(.{%1586, %1587, %1588, %1589}) node_offset:350:22
            %1591 = indexable_ptr_len(%1590) node_offset:350:22
            %1592 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:350:16
            %1593 = store(%1592, @Zir.Inst.Ref.zero_usize)
            %1594 = block_inline({
              %1598 = block_inline({
                %1595 = load(%1592) node_offset:350:22
                %1596 = cmp_lt(%1595, %1591) node_offset:350:22
                %1597 = condbr_inline(%1596, {
                  %1603 = dbg_block_begin())
                  %1604 = elem_val(%1590, %1595)
                  %1605 = dbg_var_val(%1604, "ordering")
                  %1606 = dbg_block_begin())
                  %1607 = dbg_stmt(4, 13)
                  %1608 = alloc_inferred_mut() node_offset:351:13
                  %1609 = decl_val("Atomic") token_offset:351:21
                  %1610 = dbg_stmt(4, 27)
                  %1611 = param_type(%1609, 0)
                  %1612 = call(.auto, %1609, [%1581]) node_offset:351:27
                  %1613 = ref(%1612) token_offset:351:21
                  %1614 = field_call_bind(%1613, "init") node_offset:351:32
                  %1615 = dbg_stmt(4, 37)
                  %1616 = param_type(%1614, 0)
                  %1617 = int(5)
                  %1618 = call(.auto, %1614, [%1617]) node_offset:351:37
                  %1619 = store_to_inferred_ptr(%1608, %1618)
                  %1620 = resolve_inferred_alloc(%1608) node_offset:351:13
                  %1621 = dbg_var_ptr(%1608, "x")
                  %1622 = dbg_stmt(5, 13)
                  %1636 = block({
                    %1623 = decl_ref("testing") token_offset:352:17
                    %1624 = field_call_bind(%1623, "expectEqual") node_offset:352:24
                    %1625 = dbg_stmt(5, 36)
                    %1626 = param_type(%1624, 0)
                    %1627 = field_call_bind(%1608, "load") node_offset:352:38
                    %1628 = dbg_stmt(5, 43)
                    %1629 = param_type(%1627, 0)
                    %1630 = call(.auto, %1627, [%1604]) node_offset:352:43
                    %1631 = param_type(%1624, 1)
                    %1632 = int(5)
                    %1633 = call(.auto, %1624, [%1630, %1632]) node_offset:352:36
                    %1634 = is_non_err(%1633) node_offset:352:13
                    %1635 = condbr(%1634, {
                      %1637 = err_union_payload_unsafe(%1633) node_offset:352:13
                      %1640 = break(%1636, %1637)
                    }, {
                      %1638 = err_union_code(%1633) node_offset:352:13
                      %1639 = ret_node(%1638) node_offset:352:13
                    }) node_offset:352:13
                  }) node_offset:352:13
                  %1642 = dbg_block_end())
                  %1643 = dbg_block_end())
                  %1641 = ensure_result_used(%1636) node_offset:352:13
                  %1644 = break_inline(%1598, @Zir.Inst.Ref.void_value)
                }, {
                  %1645 = break_inline(%1594, @Zir.Inst.Ref.void_value)
                }) node_offset:350:16
              }) node_offset:350:16
              %1599 = load(%1592) node_offset:350:22
              %1600 = add(%1599, @Zir.Inst.Ref.one_usize) node_offset:350:16
              %1601 = store(%1592, %1600)
              %1602 = repeat_inline() node_offset:350:16
            }) node_offset:350:16
            %1647 = dbg_block_end())
            %1648 = dbg_block_end())
            %1646 = ensure_result_used(%1594) node_offset:350:16
            %1649 = break_inline(%1575, @Zir.Inst.Ref.void_value)
          }, {
            %1650 = break_inline(%1571, @Zir.Inst.Ref.void_value)
          }) node_offset:349:12
        }) node_offset:349:12
        %1576 = load(%1569) node_offset:349:31
        %1577 = add(%1576, @Zir.Inst.Ref.one_usize) node_offset:349:12
        %1578 = store(%1569, %1577)
        %1579 = repeat_inline() node_offset:349:12
      }) node_offset:349:12
      %1652 = dbg_block_end())
      %1651 = ensure_result_used(%1571) node_offset:349:12
      %1653 = ret_tok(@Zir.Inst.Ref.void_value) token_offset:355:1
    }) (lbrace=1:20,rbrace=8:1) node_offset:348:1
    %1655 = break_inline(%1561, %1654)
  }) node_offset:348:1
  [8463] test "@"Atomic.store"" line(356) hash(097fc2d53f71c5e82357e82a165aff99): %1656 = block_inline({
    %1759 = func_extended(test, ret_ty=void, inferror, body={
      %1657 = dbg_block_begin())
      %1658 = dbg_stmt(2, 5)
      %1659 = dbg_stmt(2, 17)
      %1660 = decl_val("atomicIntTypes") token_offset:358:17
      %1661 = dbg_stmt(2, 31)
      %1662 = call(.auto, %1660, []) node_offset:358:31
      %1663 = indexable_ptr_len(%1662) node_offset:358:31
      %1664 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:358:12
      %1665 = store(%1664, @Zir.Inst.Ref.zero_usize)
      %1666 = block_inline({
        %1670 = block_inline({
          %1667 = load(%1664) node_offset:358:31
          %1668 = cmp_lt(%1667, %1663) node_offset:358:31
          %1669 = condbr_inline(%1668, {
            %1675 = dbg_block_begin())
            %1676 = elem_val(%1662, %1667)
            %1677 = dbg_var_val(%1676, "Int")
            %1678 = dbg_block_begin())
            %1679 = dbg_stmt(3, 9)
            %1680 = dbg_stmt(3, 21)
            %1681 = enum_literal("Unordered") token_offset:359:25
            %1682 = enum_literal("Monotonic") token_offset:359:37
            %1683 = enum_literal("Release") token_offset:359:49
            %1684 = enum_literal("SeqCst") token_offset:359:59
            %1685 = array_init_anon(.{%1681, %1682, %1683, %1684}) node_offset:359:22
            %1686 = indexable_ptr_len(%1685) node_offset:359:22
            %1687 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:359:16
            %1688 = store(%1687, @Zir.Inst.Ref.zero_usize)
            %1689 = block_inline({
              %1693 = block_inline({
                %1690 = load(%1687) node_offset:359:22
                %1691 = cmp_lt(%1690, %1686) node_offset:359:22
                %1692 = condbr_inline(%1691, {
                  %1698 = dbg_block_begin())
                  %1699 = elem_val(%1685, %1690)
                  %1700 = dbg_var_val(%1699, "ordering")
                  %1701 = dbg_block_begin())
                  %1702 = dbg_stmt(4, 13)
                  %1703 = ensure_result_non_error(%1676) node_offset:360:17
                  %1704 = dbg_stmt(5, 13)
                  %1705 = alloc_inferred_mut() node_offset:361:13
                  %1706 = decl_val("Atomic") token_offset:361:21
                  %1707 = dbg_stmt(5, 27)
                  %1708 = param_type(%1706, 0)
                  %1709 = call(.auto, %1706, [@Zir.Inst.Ref.usize_type]) node_offset:361:27
                  %1710 = ref(%1709) token_offset:361:21
                  %1711 = field_call_bind(%1710, "init") node_offset:361:34
                  %1712 = dbg_stmt(5, 39)
                  %1713 = param_type(%1711, 0)
                  %1714 = int(5)
                  %1715 = call(.auto, %1711, [%1714]) node_offset:361:39
                  %1716 = store_to_inferred_ptr(%1705, %1715)
                  %1717 = resolve_inferred_alloc(%1705) node_offset:361:13
                  %1718 = dbg_var_ptr(%1705, "x")
                  %1719 = dbg_stmt(6, 13)
                  %1720 = field_call_bind(%1705, "store") node_offset:362:14
                  %1721 = dbg_stmt(6, 20)
                  %1722 = param_type(%1720, 0)
                  %1723 = int(10)
                  %1724 = param_type(%1720, 1)
                  %1725 = call(nodiscard .auto, %1720, [%1723, %1699]) node_offset:362:20
                  %1726 = dbg_stmt(7, 13)
                  %1741 = block({
                    %1727 = decl_ref("testing") token_offset:363:17
                    %1728 = field_call_bind(%1727, "expectEqual") node_offset:363:24
                    %1729 = dbg_stmt(7, 36)
                    %1730 = param_type(%1728, 0)
                    %1731 = field_call_bind(%1705, "load") node_offset:363:38
                    %1732 = dbg_stmt(7, 43)
                    %1733 = param_type(%1731, 0)
                    %1734 = enum_literal("SeqCst") token_offset:363:45
                    %1735 = call(.auto, %1731, [%1734]) node_offset:363:43
                    %1736 = param_type(%1728, 1)
                    %1737 = int(10)
                    %1738 = call(.auto, %1728, [%1735, %1737]) node_offset:363:36
                    %1739 = is_non_err(%1738) node_offset:363:13
                    %1740 = condbr(%1739, {
                      %1742 = err_union_payload_unsafe(%1738) node_offset:363:13
                      %1745 = break(%1741, %1742)
                    }, {
                      %1743 = err_union_code(%1738) node_offset:363:13
                      %1744 = ret_node(%1743) node_offset:363:13
                    }) node_offset:363:13
                  }) node_offset:363:13
                  %1747 = dbg_block_end())
                  %1748 = dbg_block_end())
                  %1746 = ensure_result_used(%1741) node_offset:363:13
                  %1749 = break_inline(%1693, @Zir.Inst.Ref.void_value)
                }, {
                  %1750 = break_inline(%1689, @Zir.Inst.Ref.void_value)
                }) node_offset:359:16
              }) node_offset:359:16
              %1694 = load(%1687) node_offset:359:22
              %1695 = add(%1694, @Zir.Inst.Ref.one_usize) node_offset:359:16
              %1696 = store(%1687, %1695)
              %1697 = repeat_inline() node_offset:359:16
            }) node_offset:359:16
            %1752 = dbg_block_end())
            %1753 = dbg_block_end())
            %1751 = ensure_result_used(%1689) node_offset:359:16
            %1754 = break_inline(%1670, @Zir.Inst.Ref.void_value)
          }, {
            %1755 = break_inline(%1666, @Zir.Inst.Ref.void_value)
          }) node_offset:358:12
        }) node_offset:358:12
        %1671 = load(%1664) node_offset:358:31
        %1672 = add(%1671, @Zir.Inst.Ref.one_usize) node_offset:358:12
        %1673 = store(%1664, %1672)
        %1674 = repeat_inline() node_offset:358:12
      }) node_offset:358:12
      %1757 = dbg_block_end())
      %1756 = ensure_result_used(%1666) node_offset:358:12
      %1758 = ret_tok(@Zir.Inst.Ref.void_value) token_offset:366:1
    }) (lbrace=1:21,rbrace=10:1) node_offset:357:1
    %1760 = break_inline(%1656, %1759)
  }) node_offset:357:1
  [8471] atomic_rmw_orderings line(367) hash(518ca0304aad2869ba5cff593a405660): %1761 = block_inline({
    %1762 = int(5)
    %1763 = decl_val("Ordering") token_offset:368:33
    %1764 = array_type(%1762, %1763)
    %1765 = enum_literal("Monotonic") token_offset:369:6
    %1766 = as_node(%1763, %1765) node_offset:369:6
    %1767 = enum_literal("Acquire") token_offset:370:6
    %1768 = as_node(%1763, %1767) node_offset:370:6
    %1769 = enum_literal("Release") token_offset:371:6
    %1770 = as_node(%1763, %1769) node_offset:371:6
    %1771 = enum_literal("AcqRel") token_offset:372:6
    %1772 = as_node(%1763, %1771) node_offset:372:6
    %1773 = enum_literal("SeqCst") token_offset:373:6
    %1774 = as_node(%1763, %1773) node_offset:373:6
    %1775 = array_init(.{%1766, %1768, %1770, %1772, %1774}) node_offset:368:41
    %1776 = break_inline(%1761, %1775)
  }) node_offset:368:1
  [8479] test "@"Atomic.swap"" line(375) hash(1bb35ab8aaf27ff4176b71204cbf1a75): %1777 = block_inline({
    %2098 = func_extended(test, ret_ty=void, inferror, body={
      %1778 = dbg_block_begin())
      %1779 = dbg_stmt(2, 5)
      %1780 = dbg_stmt(2, 17)
      %1781 = decl_val("atomic_rmw_orderings") token_offset:377:17
      %1782 = indexable_ptr_len(%1781) node_offset:377:17
      %1783 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:377:12
      %1784 = store(%1783, @Zir.Inst.Ref.zero_usize)
      %1785 = block_inline({
        %1789 = block_inline({
          %1786 = load(%1783) node_offset:377:17
          %1787 = cmp_lt(%1786, %1782) node_offset:377:17
          %1788 = condbr_inline(%1787, {
            %1794 = dbg_block_begin())
            %1795 = elem_val(%1781, %1786)
            %1796 = dbg_var_val(%1795, "ordering")
            %1797 = dbg_block_begin())
            %1798 = dbg_stmt(3, 9)
            %1799 = alloc_inferred_mut() node_offset:378:9
            %1800 = decl_val("Atomic") token_offset:378:17
            %1801 = dbg_stmt(3, 23)
            %1802 = param_type(%1800, 0)
            %1803 = call(.auto, %1800, [@Zir.Inst.Ref.usize_type]) node_offset:378:23
            %1804 = ref(%1803) token_offset:378:17
            %1805 = field_call_bind(%1804, "init") node_offset:378:30
            %1806 = dbg_stmt(3, 35)
            %1807 = param_type(%1805, 0)
            %1808 = int(5)
            %1809 = call(.auto, %1805, [%1808]) node_offset:378:35
            %1810 = store_to_inferred_ptr(%1799, %1809)
            %1811 = resolve_inferred_alloc(%1799) node_offset:378:9
            %1812 = dbg_var_ptr(%1799, "x")
            %1813 = dbg_stmt(4, 9)
            %1829 = block({
              %1814 = decl_ref("testing") token_offset:379:13
              %1815 = field_call_bind(%1814, "expectEqual") node_offset:379:20
              %1816 = dbg_stmt(4, 32)
              %1817 = param_type(%1815, 0)
              %1818 = field_call_bind(%1799, "swap") node_offset:379:34
              %1819 = dbg_stmt(4, 39)
              %1820 = param_type(%1818, 0)
              %1821 = int(10)
              %1822 = param_type(%1818, 1)
              %1823 = call(.auto, %1818, [%1821, %1795]) node_offset:379:39
              %1824 = param_type(%1815, 1)
              %1825 = int(5)
              %1826 = call(.auto, %1815, [%1823, %1825]) node_offset:379:32
              %1827 = is_non_err(%1826) node_offset:379:9
              %1828 = condbr(%1827, {
                %1830 = err_union_payload_unsafe(%1826) node_offset:379:9
                %1833 = break(%1829, %1830)
              }, {
                %1831 = err_union_code(%1826) node_offset:379:9
                %1832 = ret_node(%1831) node_offset:379:9
              }) node_offset:379:9
            }) node_offset:379:9
            %1834 = ensure_result_used(%1829) node_offset:379:9
            %1835 = dbg_stmt(5, 9)
            %1850 = block({
              %1836 = decl_ref("testing") token_offset:380:13
              %1837 = field_call_bind(%1836, "expectEqual") node_offset:380:20
              %1838 = dbg_stmt(5, 32)
              %1839 = param_type(%1837, 0)
              %1840 = field_call_bind(%1799, "load") node_offset:380:34
              %1841 = dbg_stmt(5, 39)
              %1842 = param_type(%1840, 0)
              %1843 = enum_literal("SeqCst") token_offset:380:41
              %1844 = call(.auto, %1840, [%1843]) node_offset:380:39
              %1845 = param_type(%1837, 1)
              %1846 = int(10)
              %1847 = call(.auto, %1837, [%1844, %1846]) node_offset:380:32
              %1848 = is_non_err(%1847) node_offset:380:9
              %1849 = condbr(%1848, {
                %1851 = err_union_payload_unsafe(%1847) node_offset:380:9
                %1854 = break(%1850, %1851)
              }, {
                %1852 = err_union_code(%1847) node_offset:380:9
                %1853 = ret_node(%1852) node_offset:380:9
              }) node_offset:380:9
            }) node_offset:380:9
            %1855 = ensure_result_used(%1850) node_offset:380:9
            %1856 = dbg_stmt(7, 9)
            %1857 = alloc_inferred_mut() node_offset:382:9
            %1858 = decl_val("Atomic") token_offset:382:17
            %1859 = dbg_stmt(7, 23)
            %1860 = param_type(%1858, 0)
            %1861 = extended(enum_decl(anon, {}, @Zir.Inst.Ref.usize_type, {}, {
              a,
              b,
              c,
            }) node_offset:382:24
            %1862 = call(.auto, %1858, [%1861]) node_offset:382:23
            %1863 = ref(%1862) token_offset:382:17
            %1864 = field_call_bind(%1863, "init") node_offset:382:48
            %1865 = dbg_stmt(7, 53)
            %1866 = param_type(%1864, 0)
            %1867 = enum_literal("c") token_offset:382:55
            %1868 = call(.auto, %1864, [%1867]) node_offset:382:53
            %1869 = store_to_inferred_ptr(%1857, %1868)
            %1870 = resolve_inferred_alloc(%1857) node_offset:382:9
            %1871 = dbg_var_ptr(%1857, "y")
            %1872 = dbg_stmt(8, 9)
            %1888 = block({
              %1873 = decl_ref("testing") token_offset:383:13
              %1874 = field_call_bind(%1873, "expectEqual") node_offset:383:20
              %1875 = dbg_stmt(8, 32)
              %1876 = param_type(%1874, 0)
              %1877 = field_call_bind(%1857, "swap") node_offset:383:34
              %1878 = dbg_stmt(8, 39)
              %1879 = param_type(%1877, 0)
              %1880 = enum_literal("a") token_offset:383:41
              %1881 = param_type(%1877, 1)
              %1882 = call(.auto, %1877, [%1880, %1795]) node_offset:383:39
              %1883 = param_type(%1874, 1)
              %1884 = enum_literal("c") token_offset:383:56
              %1885 = call(.auto, %1874, [%1882, %1884]) node_offset:383:32
              %1886 = is_non_err(%1885) node_offset:383:9
              %1887 = condbr(%1886, {
                %1889 = err_union_payload_unsafe(%1885) node_offset:383:9
                %1892 = break(%1888, %1889)
              }, {
                %1890 = err_union_code(%1885) node_offset:383:9
                %1891 = ret_node(%1890) node_offset:383:9
              }) node_offset:383:9
            }) node_offset:383:9
            %1893 = ensure_result_used(%1888) node_offset:383:9
            %1894 = dbg_stmt(9, 9)
            %1909 = block({
              %1895 = decl_ref("testing") token_offset:384:13
              %1896 = field_call_bind(%1895, "expectEqual") node_offset:384:20
              %1897 = dbg_stmt(9, 32)
              %1898 = param_type(%1896, 0)
              %1899 = field_call_bind(%1857, "load") node_offset:384:34
              %1900 = dbg_stmt(9, 39)
              %1901 = param_type(%1899, 0)
              %1902 = enum_literal("SeqCst") token_offset:384:41
              %1903 = call(.auto, %1899, [%1902]) node_offset:384:39
              %1904 = param_type(%1896, 1)
              %1905 = enum_literal("a") token_offset:384:51
              %1906 = call(.auto, %1896, [%1903, %1905]) node_offset:384:32
              %1907 = is_non_err(%1906) node_offset:384:9
              %1908 = condbr(%1907, {
                %1910 = err_union_payload_unsafe(%1906) node_offset:384:9
                %1913 = break(%1909, %1910)
              }, {
                %1911 = err_union_code(%1906) node_offset:384:9
                %1912 = ret_node(%1911) node_offset:384:9
              }) node_offset:384:9
            }) node_offset:384:9
            %1914 = ensure_result_used(%1909) node_offset:384:9
            %1915 = dbg_stmt(11, 9)
            %1916 = alloc_inferred_mut() node_offset:386:9
            %1917 = decl_val("Atomic") token_offset:386:17
            %1918 = dbg_stmt(11, 23)
            %1919 = param_type(%1917, 0)
            %1920 = call(.auto, %1917, [@Zir.Inst.Ref.f32_type]) node_offset:386:23
            %1921 = ref(%1920) token_offset:386:17
            %1922 = field_call_bind(%1921, "init") node_offset:386:28
            %1923 = dbg_stmt(11, 33)
            %1924 = param_type(%1922, 0)
            %1925 = float(5)
            %1926 = call(.auto, %1922, [%1925]) node_offset:386:33
            %1927 = store_to_inferred_ptr(%1916, %1926)
            %1928 = resolve_inferred_alloc(%1916) node_offset:386:9
            %1929 = dbg_var_ptr(%1916, "z")
            %1930 = dbg_stmt(12, 9)
            %1946 = block({
              %1931 = decl_ref("testing") token_offset:387:13
              %1932 = field_call_bind(%1931, "expectEqual") node_offset:387:20
              %1933 = dbg_stmt(12, 32)
              %1934 = param_type(%1932, 0)
              %1935 = field_call_bind(%1916, "swap") node_offset:387:34
              %1936 = dbg_stmt(12, 39)
              %1937 = param_type(%1935, 0)
              %1938 = float(10)
              %1939 = param_type(%1935, 1)
              %1940 = call(.auto, %1935, [%1938, %1795]) node_offset:387:39
              %1941 = param_type(%1932, 1)
              %1942 = float(5)
              %1943 = call(.auto, %1932, [%1940, %1942]) node_offset:387:32
              %1944 = is_non_err(%1943) node_offset:387:9
              %1945 = condbr(%1944, {
                %1947 = err_union_payload_unsafe(%1943) node_offset:387:9
                %1950 = break(%1946, %1947)
              }, {
                %1948 = err_union_code(%1943) node_offset:387:9
                %1949 = ret_node(%1948) node_offset:387:9
              }) node_offset:387:9
            }) node_offset:387:9
            %1951 = ensure_result_used(%1946) node_offset:387:9
            %1952 = dbg_stmt(13, 9)
            %1967 = block({
              %1953 = decl_ref("testing") token_offset:388:13
              %1954 = field_call_bind(%1953, "expectEqual") node_offset:388:20
              %1955 = dbg_stmt(13, 32)
              %1956 = param_type(%1954, 0)
              %1957 = field_call_bind(%1916, "load") node_offset:388:34
              %1958 = dbg_stmt(13, 39)
              %1959 = param_type(%1957, 0)
              %1960 = enum_literal("SeqCst") token_offset:388:41
              %1961 = call(.auto, %1957, [%1960]) node_offset:388:39
              %1962 = param_type(%1954, 1)
              %1963 = float(10)
              %1964 = call(.auto, %1954, [%1961, %1963]) node_offset:388:32
              %1965 = is_non_err(%1964) node_offset:388:9
              %1966 = condbr(%1965, {
                %1968 = err_union_payload_unsafe(%1964) node_offset:388:9
                %1971 = break(%1967, %1968)
              }, {
                %1969 = err_union_code(%1964) node_offset:388:9
                %1970 = ret_node(%1969) node_offset:388:9
              }) node_offset:388:9
            }) node_offset:388:9
            %1972 = ensure_result_used(%1967) node_offset:388:9
            %1973 = dbg_stmt(15, 9)
            %1974 = alloc_inferred_mut() node_offset:390:9
            %1975 = decl_val("Atomic") token_offset:390:17
            %1976 = dbg_stmt(15, 23)
            %1977 = param_type(%1975, 0)
            %1978 = call(.auto, %1975, [@Zir.Inst.Ref.bool_type]) node_offset:390:23
            %1979 = ref(%1978) token_offset:390:17
            %1980 = field_call_bind(%1979, "init") node_offset:390:29
            %1981 = dbg_stmt(15, 34)
            %1982 = param_type(%1980, 0)
            %1983 = call(.auto, %1980, [@Zir.Inst.Ref.bool_false]) node_offset:390:34
            %1984 = store_to_inferred_ptr(%1974, %1983)
            %1985 = resolve_inferred_alloc(%1974) node_offset:390:9
            %1986 = dbg_var_ptr(%1974, "a")
            %1987 = dbg_stmt(16, 9)
            %2001 = block({
              %1988 = decl_ref("testing") token_offset:391:13
              %1989 = field_call_bind(%1988, "expectEqual") node_offset:391:20
              %1990 = dbg_stmt(16, 32)
              %1991 = param_type(%1989, 0)
              %1992 = field_call_bind(%1974, "swap") node_offset:391:34
              %1993 = dbg_stmt(16, 39)
              %1994 = param_type(%1992, 0)
              %1995 = param_type(%1992, 1)
              %1996 = call(.auto, %1992, [@Zir.Inst.Ref.bool_true, %1795]) node_offset:391:39
              %1997 = param_type(%1989, 1)
              %1998 = call(.auto, %1989, [%1996, @Zir.Inst.Ref.bool_false]) node_offset:391:32
              %1999 = is_non_err(%1998) node_offset:391:9
              %2000 = condbr(%1999, {
                %2002 = err_union_payload_unsafe(%1998) node_offset:391:9
                %2005 = break(%2001, %2002)
              }, {
                %2003 = err_union_code(%1998) node_offset:391:9
                %2004 = ret_node(%2003) node_offset:391:9
              }) node_offset:391:9
            }) node_offset:391:9
            %2006 = ensure_result_used(%2001) node_offset:391:9
            %2007 = dbg_stmt(17, 9)
            %2021 = block({
              %2008 = decl_ref("testing") token_offset:392:13
              %2009 = field_call_bind(%2008, "expectEqual") node_offset:392:20
              %2010 = dbg_stmt(17, 32)
              %2011 = param_type(%2009, 0)
              %2012 = field_call_bind(%1974, "load") node_offset:392:34
              %2013 = dbg_stmt(17, 39)
              %2014 = param_type(%2012, 0)
              %2015 = enum_literal("SeqCst") token_offset:392:41
              %2016 = call(.auto, %2012, [%2015]) node_offset:392:39
              %2017 = param_type(%2009, 1)
              %2018 = call(.auto, %2009, [%2016, @Zir.Inst.Ref.bool_true]) node_offset:392:32
              %2019 = is_non_err(%2018) node_offset:392:9
              %2020 = condbr(%2019, {
                %2022 = err_union_payload_unsafe(%2018) node_offset:392:9
                %2025 = break(%2021, %2022)
              }, {
                %2023 = err_union_code(%2018) node_offset:392:9
                %2024 = ret_node(%2023) node_offset:392:9
              }) node_offset:392:9
            }) node_offset:392:9
            %2026 = ensure_result_used(%2021) node_offset:392:9
            %2027 = dbg_stmt(19, 9)
            %2028 = alloc_inferred_mut() node_offset:394:9
            %2029 = decl_val("Atomic") token_offset:394:17
            %2030 = dbg_stmt(19, 23)
            %2031 = param_type(%2029, 0)
            %2032 = ptr_type_simple(@Zir.Inst.Ref.u8_type, One)
            %2033 = optional_type(%2032) node_offset:394:24
            %2034 = call(.auto, %2029, [%2033]) node_offset:394:23
            %2035 = ref(%2034) token_offset:394:17
            %2036 = field_call_bind(%2035, "init") node_offset:394:29
            %2037 = dbg_stmt(19, 34)
            %2038 = param_type(%2036, 0)
            %2039 = call(.auto, %2036, [@Zir.Inst.Ref.null_value]) node_offset:394:34
            %2040 = store_to_inferred_ptr(%2028, %2039)
            %2041 = resolve_inferred_alloc(%2028) node_offset:394:9
            %2042 = dbg_var_ptr(%2028, "b")
            %2043 = dbg_stmt(20, 9)
            %2061 = block({
              %2044 = decl_ref("testing") token_offset:395:13
              %2045 = field_call_bind(%2044, "expectEqual") node_offset:395:20
              %2046 = dbg_stmt(20, 32)
              %2047 = param_type(%2045, 0)
              %2048 = field_call_bind(%2028, "swap") node_offset:395:34
              %2049 = dbg_stmt(20, 39)
              %2050 = param_type(%2048, 0)
              %2051 = ptr_type_simple(@Zir.Inst.Ref.u8_type, One)
              %2052 = optional_type(%2051) node_offset:395:50
              %2053 = align_of(@Zir.Inst.Ref.u8_type) node_offset:395:56
              %2054 = int_to_ptr(%2052, %2053) node_offset:395:40
              %2055 = param_type(%2048, 1)
              %2056 = call(.auto, %2048, [%2054, %1795]) node_offset:395:39
              %2057 = param_type(%2045, 1)
              %2058 = call(.auto, %2045, [%2056, @Zir.Inst.Ref.null_value]) node_offset:395:32
              %2059 = is_non_err(%2058) node_offset:395:9
              %2060 = condbr(%2059, {
                %2062 = err_union_payload_unsafe(%2058) node_offset:395:9
                %2065 = break(%2061, %2062)
              }, {
                %2063 = err_union_code(%2058) node_offset:395:9
                %2064 = ret_node(%2063) node_offset:395:9
              }) node_offset:395:9
            }) node_offset:395:9
            %2066 = ensure_result_used(%2061) node_offset:395:9
            %2067 = dbg_stmt(21, 9)
            %2085 = block({
              %2068 = decl_ref("testing") token_offset:396:13
              %2069 = field_call_bind(%2068, "expectEqual") node_offset:396:20
              %2070 = dbg_stmt(21, 32)
              %2071 = param_type(%2069, 0)
              %2072 = field_call_bind(%2028, "load") node_offset:396:34
              %2073 = dbg_stmt(21, 39)
              %2074 = param_type(%2072, 0)
              %2075 = enum_literal("SeqCst") token_offset:396:41
              %2076 = call(.auto, %2072, [%2075]) node_offset:396:39
              %2077 = param_type(%2069, 1)
              %2078 = ptr_type_simple(@Zir.Inst.Ref.u8_type, One)
              %2079 = optional_type(%2078) node_offset:396:60
              %2080 = align_of(@Zir.Inst.Ref.u8_type) node_offset:396:66
              %2081 = int_to_ptr(%2079, %2080) node_offset:396:50
              %2082 = call(.auto, %2069, [%2076, %2081]) node_offset:396:32
              %2083 = is_non_err(%2082) node_offset:396:9
              %2084 = condbr(%2083, {
                %2086 = err_union_payload_unsafe(%2082) node_offset:396:9
                %2089 = break(%2085, %2086)
              }, {
                %2087 = err_union_code(%2082) node_offset:396:9
                %2088 = ret_node(%2087) node_offset:396:9
              }) node_offset:396:9
            }) node_offset:396:9
            %2091 = dbg_block_end())
            %2092 = dbg_block_end())
            %2090 = ensure_result_used(%2085) node_offset:396:9
            %2093 = break_inline(%1789, @Zir.Inst.Ref.void_value)
          }, {
            %2094 = break_inline(%1785, @Zir.Inst.Ref.void_value)
          }) node_offset:377:12
        }) node_offset:377:12
        %1790 = load(%1783) node_offset:377:17
        %1791 = add(%1790, @Zir.Inst.Ref.one_usize) node_offset:377:12
        %1792 = store(%1783, %1791)
        %1793 = repeat_inline() node_offset:377:12
      }) node_offset:377:12
      %2096 = dbg_block_end())
      %2095 = ensure_result_used(%1785) node_offset:377:12
      %2097 = ret_tok(@Zir.Inst.Ref.void_value) token_offset:398:1
    }) (lbrace=1:20,rbrace=23:1) node_offset:376:1
    %2099 = break_inline(%1777, %2098)
  }) node_offset:376:1
  [8487] atomic_cmpxchg_orderings line(399) hash(1673692b7e7c8e02b459e7a100f170ea): %2100 = block_inline({
    %2101 = int(9)
    %2102 = int(2)
    %2103 = decl_val("Ordering") token_offset:400:40
    %2104 = array_type(%2102, %2103)
    %2105 = array_type(%2101, %2104)
    %2106 = enum_literal("Monotonic") token_offset:401:9
    %2107 = enum_literal("Monotonic") token_offset:401:21
    %2108 = array_init_anon(.{%2106, %2107}) node_offset:401:6
    %2109 = as_node(%2104, %2108) node_offset:401:6
    %2110 = enum_literal("Acquire") token_offset:402:9
    %2111 = enum_literal("Monotonic") token_offset:402:19
    %2112 = array_init_anon(.{%2110, %2111}) node_offset:402:6
    %2113 = as_node(%2104, %2112) node_offset:402:6
    %2114 = enum_literal("Acquire") token_offset:403:9
    %2115 = enum_literal("Acquire") token_offset:403:19
    %2116 = array_init_anon(.{%2114, %2115}) node_offset:403:6
    %2117 = as_node(%2104, %2116) node_offset:403:6
    %2118 = enum_literal("Release") token_offset:404:9
    %2119 = enum_literal("Monotonic") token_offset:404:19
    %2120 = array_init_anon(.{%2118, %2119}) node_offset:404:6
    %2121 = as_node(%2104, %2120) node_offset:404:6
    %2122 = enum_literal("AcqRel") token_offset:407:9
    %2123 = enum_literal("Monotonic") token_offset:407:18
    %2124 = array_init_anon(.{%2122, %2123}) node_offset:407:6
    %2125 = as_node(%2104, %2124) node_offset:407:6
    %2126 = enum_literal("AcqRel") token_offset:408:9
    %2127 = enum_literal("Acquire") token_offset:408:18
    %2128 = array_init_anon(.{%2126, %2127}) node_offset:408:6
    %2129 = as_node(%2104, %2128) node_offset:408:6
    %2130 = enum_literal("SeqCst") token_offset:409:9
    %2131 = enum_literal("Monotonic") token_offset:409:18
    %2132 = array_init_anon(.{%2130, %2131}) node_offset:409:6
    %2133 = as_node(%2104, %2132) node_offset:409:6
    %2134 = enum_literal("SeqCst") token_offset:410:9
    %2135 = enum_literal("Acquire") token_offset:410:18
    %2136 = array_init_anon(.{%2134, %2135}) node_offset:410:6
    %2137 = as_node(%2104, %2136) node_offset:410:6
    %2138 = enum_literal("SeqCst") token_offset:411:9
    %2139 = enum_literal("SeqCst") token_offset:411:18
    %2140 = array_init_anon(.{%2138, %2139}) node_offset:411:6
    %2141 = as_node(%2104, %2140) node_offset:411:6
    %2142 = array_init(.{%2109, %2113, %2117, %2121, %2125, %2129, %2133, %2137, %2141}) node_offset:400:48
    %2143 = break_inline(%2100, %2142)
  }) node_offset:400:1
  [8495] test "@"Atomic.compareAndSwap"" line(413) hash(c701c3c367ec19267ebb471bd5e82d9c): %2144 = block_inline({
    %2344 = func_extended(test, ret_ty=void, inferror, body={
      %2145 = dbg_block_begin())
      %2146 = dbg_stmt(2, 5)
      %2147 = dbg_stmt(2, 17)
      %2148 = decl_val("atomicIntTypes") token_offset:415:17
      %2149 = dbg_stmt(2, 31)
      %2150 = call(.auto, %2148, []) node_offset:415:31
      %2151 = indexable_ptr_len(%2150) node_offset:415:31
      %2152 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:415:12
      %2153 = store(%2152, @Zir.Inst.Ref.zero_usize)
      %2154 = block_inline({
        %2158 = block_inline({
          %2155 = load(%2152) node_offset:415:31
          %2156 = cmp_lt(%2155, %2151) node_offset:415:31
          %2157 = condbr_inline(%2156, {
            %2163 = dbg_block_begin())
            %2164 = elem_val(%2150, %2155)
            %2165 = dbg_var_val(%2164, "Int")
            %2166 = dbg_block_begin())
            %2167 = dbg_stmt(3, 9)
            %2168 = dbg_stmt(3, 21)
            %2169 = decl_val("atomic_cmpxchg_orderings") token_offset:416:21
            %2170 = indexable_ptr_len(%2169) node_offset:416:21
            %2171 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:416:16
            %2172 = store(%2171, @Zir.Inst.Ref.zero_usize)
            %2173 = block_inline({
              %2177 = block_inline({
                %2174 = load(%2171) node_offset:416:21
                %2175 = cmp_lt(%2174, %2170) node_offset:416:21
                %2176 = condbr_inline(%2175, {
                  %2182 = dbg_block_begin())
                  %2183 = elem_val(%2169, %2174)
                  %2184 = dbg_var_val(%2183, "ordering")
                  %2185 = dbg_block_begin())
                  %2186 = dbg_stmt(4, 13)
                  %2187 = alloc_inferred_mut() node_offset:417:13
                  %2188 = decl_val("Atomic") token_offset:417:21
                  %2189 = dbg_stmt(4, 27)
                  %2190 = param_type(%2188, 0)
                  %2191 = call(.auto, %2188, [%2164]) node_offset:417:27
                  %2192 = ref(%2191) token_offset:417:21
                  %2193 = field_call_bind(%2192, "init") node_offset:417:32
                  %2194 = dbg_stmt(4, 37)
                  %2195 = param_type(%2193, 0)
                  %2196 = call(.auto, %2193, [@Zir.Inst.Ref.zero]) node_offset:417:37
                  %2197 = store_to_inferred_ptr(%2187, %2196)
                  %2198 = resolve_inferred_alloc(%2187) node_offset:417:13
                  %2199 = dbg_var_ptr(%2187, "x")
                  %2200 = dbg_stmt(5, 13)
                  %2218 = block({
                    %2201 = decl_ref("testing") token_offset:418:17
                    %2202 = field_call_bind(%2201, "expectEqual") node_offset:418:24
                    %2203 = dbg_stmt(5, 36)
                    %2204 = param_type(%2202, 0)
                    %2205 = field_call_bind(%2187, "compareAndSwap") node_offset:418:38
                    %2206 = dbg_stmt(5, 53)
                    %2207 = param_type(%2205, 0)
                    %2208 = param_type(%2205, 1)
                    %2209 = param_type(%2205, 2)
                    %2210 = elem_val(%2183, @Zir.Inst.Ref.zero)
                    %2211 = param_type(%2205, 3)
                    %2212 = elem_val(%2183, @Zir.Inst.Ref.one)
                    %2213 = call(.auto, %2205, [@Zir.Inst.Ref.one, @Zir.Inst.Ref.zero, %2210, %2212]) node_offset:418:53
                    %2214 = param_type(%2202, 1)
                    %2215 = call(.auto, %2202, [%2213, @Zir.Inst.Ref.zero]) node_offset:418:36
                    %2216 = is_non_err(%2215) node_offset:418:13
                    %2217 = condbr(%2216, {
                      %2219 = err_union_payload_unsafe(%2215) node_offset:418:13
                      %2222 = break(%2218, %2219)
                    }, {
                      %2220 = err_union_code(%2215) node_offset:418:13
                      %2221 = ret_node(%2220) node_offset:418:13
                    }) node_offset:418:13
                  }) node_offset:418:13
                  %2223 = ensure_result_used(%2218) node_offset:418:13
                  %2224 = dbg_stmt(6, 13)
                  %2238 = block({
                    %2225 = decl_ref("testing") token_offset:419:17
                    %2226 = field_call_bind(%2225, "expectEqual") node_offset:419:24
                    %2227 = dbg_stmt(6, 36)
                    %2228 = param_type(%2226, 0)
                    %2229 = field_call_bind(%2187, "load") node_offset:419:38
                    %2230 = dbg_stmt(6, 43)
                    %2231 = param_type(%2229, 0)
                    %2232 = enum_literal("SeqCst") token_offset:419:45
                    %2233 = call(.auto, %2229, [%2232]) node_offset:419:43
                    %2234 = param_type(%2226, 1)
                    %2235 = call(.auto, %2226, [%2233, @Zir.Inst.Ref.zero]) node_offset:419:36
                    %2236 = is_non_err(%2235) node_offset:419:13
                    %2237 = condbr(%2236, {
                      %2239 = err_union_payload_unsafe(%2235) node_offset:419:13
                      %2242 = break(%2238, %2239)
                    }, {
                      %2240 = err_union_code(%2235) node_offset:419:13
                      %2241 = ret_node(%2240) node_offset:419:13
                    }) node_offset:419:13
                  }) node_offset:419:13
                  %2243 = ensure_result_used(%2238) node_offset:419:13
                  %2244 = dbg_stmt(7, 13)
                  %2262 = block({
                    %2245 = decl_ref("testing") token_offset:420:17
                    %2246 = field_call_bind(%2245, "expectEqual") node_offset:420:24
                    %2247 = dbg_stmt(7, 36)
                    %2248 = param_type(%2246, 0)
                    %2249 = field_call_bind(%2187, "compareAndSwap") node_offset:420:38
                    %2250 = dbg_stmt(7, 53)
                    %2251 = param_type(%2249, 0)
                    %2252 = param_type(%2249, 1)
                    %2253 = param_type(%2249, 2)
                    %2254 = elem_val(%2183, @Zir.Inst.Ref.zero)
                    %2255 = param_type(%2249, 3)
                    %2256 = elem_val(%2183, @Zir.Inst.Ref.one)
                    %2257 = call(.auto, %2249, [@Zir.Inst.Ref.zero, @Zir.Inst.Ref.one, %2254, %2256]) node_offset:420:53
                    %2258 = param_type(%2246, 1)
                    %2259 = call(.auto, %2246, [%2257, @Zir.Inst.Ref.null_value]) node_offset:420:36
                    %2260 = is_non_err(%2259) node_offset:420:13
                    %2261 = condbr(%2260, {
                      %2263 = err_union_payload_unsafe(%2259) node_offset:420:13
                      %2266 = break(%2262, %2263)
                    }, {
                      %2264 = err_union_code(%2259) node_offset:420:13
                      %2265 = ret_node(%2264) node_offset:420:13
                    }) node_offset:420:13
                  }) node_offset:420:13
                  %2267 = ensure_result_used(%2262) node_offset:420:13
                  %2268 = dbg_stmt(8, 13)
                  %2282 = block({
                    %2269 = decl_ref("testing") token_offset:421:17
                    %2270 = field_call_bind(%2269, "expectEqual") node_offset:421:24
                    %2271 = dbg_stmt(8, 36)
                    %2272 = param_type(%2270, 0)
                    %2273 = field_call_bind(%2187, "load") node_offset:421:38
                    %2274 = dbg_stmt(8, 43)
                    %2275 = param_type(%2273, 0)
                    %2276 = enum_literal("SeqCst") token_offset:421:45
                    %2277 = call(.auto, %2273, [%2276]) node_offset:421:43
                    %2278 = param_type(%2270, 1)
                    %2279 = call(.auto, %2270, [%2277, @Zir.Inst.Ref.one]) node_offset:421:36
                    %2280 = is_non_err(%2279) node_offset:421:13
                    %2281 = condbr(%2280, {
                      %2283 = err_union_payload_unsafe(%2279) node_offset:421:13
                      %2286 = break(%2282, %2283)
                    }, {
                      %2284 = err_union_code(%2279) node_offset:421:13
                      %2285 = ret_node(%2284) node_offset:421:13
                    }) node_offset:421:13
                  }) node_offset:421:13
                  %2287 = ensure_result_used(%2282) node_offset:421:13
                  %2288 = dbg_stmt(9, 13)
                  %2306 = block({
                    %2289 = decl_ref("testing") token_offset:422:17
                    %2290 = field_call_bind(%2289, "expectEqual") node_offset:422:24
                    %2291 = dbg_stmt(9, 36)
                    %2292 = param_type(%2290, 0)
                    %2293 = field_call_bind(%2187, "compareAndSwap") node_offset:422:38
                    %2294 = dbg_stmt(9, 53)
                    %2295 = param_type(%2293, 0)
                    %2296 = param_type(%2293, 1)
                    %2297 = param_type(%2293, 2)
                    %2298 = elem_val(%2183, @Zir.Inst.Ref.zero)
                    %2299 = param_type(%2293, 3)
                    %2300 = elem_val(%2183, @Zir.Inst.Ref.one)
                    %2301 = call(.auto, %2293, [@Zir.Inst.Ref.one, @Zir.Inst.Ref.zero, %2298, %2300]) node_offset:422:53
                    %2302 = param_type(%2290, 1)
                    %2303 = call(.auto, %2290, [%2301, @Zir.Inst.Ref.null_value]) node_offset:422:36
                    %2304 = is_non_err(%2303) node_offset:422:13
                    %2305 = condbr(%2304, {
                      %2307 = err_union_payload_unsafe(%2303) node_offset:422:13
                      %2310 = break(%2306, %2307)
                    }, {
                      %2308 = err_union_code(%2303) node_offset:422:13
                      %2309 = ret_node(%2308) node_offset:422:13
                    }) node_offset:422:13
                  }) node_offset:422:13
                  %2311 = ensure_result_used(%2306) node_offset:422:13
                  %2312 = dbg_stmt(10, 13)
                  %2326 = block({
                    %2313 = decl_ref("testing") token_offset:423:17
                    %2314 = field_call_bind(%2313, "expectEqual") node_offset:423:24
                    %2315 = dbg_stmt(10, 36)
                    %2316 = param_type(%2314, 0)
                    %2317 = field_call_bind(%2187, "load") node_offset:423:38
                    %2318 = dbg_stmt(10, 43)
                    %2319 = param_type(%2317, 0)
                    %2320 = enum_literal("SeqCst") token_offset:423:45
                    %2321 = call(.auto, %2317, [%2320]) node_offset:423:43
                    %2322 = param_type(%2314, 1)
                    %2323 = call(.auto, %2314, [%2321, @Zir.Inst.Ref.zero]) node_offset:423:36
                    %2324 = is_non_err(%2323) node_offset:423:13
                    %2325 = condbr(%2324, {
                      %2327 = err_union_payload_unsafe(%2323) node_offset:423:13
                      %2330 = break(%2326, %2327)
                    }, {
                      %2328 = err_union_code(%2323) node_offset:423:13
                      %2329 = ret_node(%2328) node_offset:423:13
                    }) node_offset:423:13
                  }) node_offset:423:13
                  %2332 = dbg_block_end())
                  %2333 = dbg_block_end())
                  %2331 = ensure_result_used(%2326) node_offset:423:13
                  %2334 = break_inline(%2177, @Zir.Inst.Ref.void_value)
                }, {
                  %2335 = break_inline(%2173, @Zir.Inst.Ref.void_value)
                }) node_offset:416:16
              }) node_offset:416:16
              %2178 = load(%2171) node_offset:416:21
              %2179 = add(%2178, @Zir.Inst.Ref.one_usize) node_offset:416:16
              %2180 = store(%2171, %2179)
              %2181 = repeat_inline() node_offset:416:16
            }) node_offset:416:16
            %2337 = dbg_block_end())
            %2338 = dbg_block_end())
            %2336 = ensure_result_used(%2173) node_offset:416:16
            %2339 = break_inline(%2158, @Zir.Inst.Ref.void_value)
          }, {
            %2340 = break_inline(%2154, @Zir.Inst.Ref.void_value)
          }) node_offset:415:12
        }) node_offset:415:12
        %2159 = load(%2152) node_offset:415:31
        %2160 = add(%2159, @Zir.Inst.Ref.one_usize) node_offset:415:12
        %2161 = store(%2152, %2160)
        %2162 = repeat_inline() node_offset:415:12
      }) node_offset:415:12
      %2342 = dbg_block_end())
      %2341 = ensure_result_used(%2154) node_offset:415:12
      %2343 = ret_tok(@Zir.Inst.Ref.void_value) token_offset:426:1
    }) (lbrace=1:30,rbrace=13:1) node_offset:414:1
    %2345 = break_inline(%2144, %2344)
  }) node_offset:414:1
  [8503] test "@"Atomic.tryCompareAndSwap"" line(427) hash(b80ce6a577072418d50bbd3f19412153): %2346 = block_inline({
    %2542 = func_extended(test, ret_ty=void, inferror, body={
      %2347 = dbg_block_begin())
      %2348 = dbg_stmt(2, 5)
      %2349 = dbg_stmt(2, 17)
      %2350 = decl_val("atomicIntTypes") token_offset:429:17
      %2351 = dbg_stmt(2, 31)
      %2352 = call(.auto, %2350, []) node_offset:429:31
      %2353 = indexable_ptr_len(%2352) node_offset:429:31
      %2354 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:429:12
      %2355 = store(%2354, @Zir.Inst.Ref.zero_usize)
      %2356 = block_inline({
        %2360 = block_inline({
          %2357 = load(%2354) node_offset:429:31
          %2358 = cmp_lt(%2357, %2353) node_offset:429:31
          %2359 = condbr_inline(%2358, {
            %2365 = dbg_block_begin())
            %2366 = elem_val(%2352, %2357)
            %2367 = dbg_var_val(%2366, "Int")
            %2368 = dbg_block_begin())
            %2369 = dbg_stmt(3, 9)
            %2370 = dbg_stmt(3, 21)
            %2371 = decl_val("atomic_cmpxchg_orderings") token_offset:430:21
            %2372 = indexable_ptr_len(%2371) node_offset:430:21
            %2373 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:430:16
            %2374 = store(%2373, @Zir.Inst.Ref.zero_usize)
            %2375 = block_inline({
              %2379 = block_inline({
                %2376 = load(%2373) node_offset:430:21
                %2377 = cmp_lt(%2376, %2372) node_offset:430:21
                %2378 = condbr_inline(%2377, {
                  %2384 = dbg_block_begin())
                  %2385 = elem_val(%2371, %2376)
                  %2386 = dbg_var_val(%2385, "ordering")
                  %2387 = dbg_block_begin())
                  %2388 = dbg_stmt(4, 13)
                  %2389 = alloc_inferred_mut() node_offset:431:13
                  %2390 = decl_val("Atomic") token_offset:431:21
                  %2391 = dbg_stmt(4, 27)
                  %2392 = param_type(%2390, 0)
                  %2393 = call(.auto, %2390, [%2366]) node_offset:431:27
                  %2394 = ref(%2393) token_offset:431:21
                  %2395 = field_call_bind(%2394, "init") node_offset:431:32
                  %2396 = dbg_stmt(4, 37)
                  %2397 = param_type(%2395, 0)
                  %2398 = call(.auto, %2395, [@Zir.Inst.Ref.zero]) node_offset:431:37
                  %2399 = store_to_inferred_ptr(%2389, %2398)
                  %2400 = resolve_inferred_alloc(%2389) node_offset:431:13
                  %2401 = dbg_var_ptr(%2389, "x")
                  %2402 = dbg_stmt(6, 13)
                  %2420 = block({
                    %2403 = decl_ref("testing") token_offset:433:17
                    %2404 = field_call_bind(%2403, "expectEqual") node_offset:433:24
                    %2405 = dbg_stmt(6, 36)
                    %2406 = param_type(%2404, 0)
                    %2407 = field_call_bind(%2389, "tryCompareAndSwap") node_offset:433:38
                    %2408 = dbg_stmt(6, 56)
                    %2409 = param_type(%2407, 0)
                    %2410 = param_type(%2407, 1)
                    %2411 = param_type(%2407, 2)
                    %2412 = elem_val(%2385, @Zir.Inst.Ref.zero)
                    %2413 = param_type(%2407, 3)
                    %2414 = elem_val(%2385, @Zir.Inst.Ref.one)
                    %2415 = call(.auto, %2407, [@Zir.Inst.Ref.one, @Zir.Inst.Ref.zero, %2412, %2414]) node_offset:433:56
                    %2416 = param_type(%2404, 1)
                    %2417 = call(.auto, %2404, [%2415, @Zir.Inst.Ref.zero]) node_offset:433:36
                    %2418 = is_non_err(%2417) node_offset:433:13
                    %2419 = condbr(%2418, {
                      %2421 = err_union_payload_unsafe(%2417) node_offset:433:13
                      %2424 = break(%2420, %2421)
                    }, {
                      %2422 = err_union_code(%2417) node_offset:433:13
                      %2423 = ret_node(%2422) node_offset:433:13
                    }) node_offset:433:13
                  }) node_offset:433:13
                  %2425 = ensure_result_used(%2420) node_offset:433:13
                  %2426 = dbg_stmt(7, 13)
                  %2440 = block({
                    %2427 = decl_ref("testing") token_offset:434:17
                    %2428 = field_call_bind(%2427, "expectEqual") node_offset:434:24
                    %2429 = dbg_stmt(7, 36)
                    %2430 = param_type(%2428, 0)
                    %2431 = field_call_bind(%2389, "load") node_offset:434:38
                    %2432 = dbg_stmt(7, 43)
                    %2433 = param_type(%2431, 0)
                    %2434 = enum_literal("SeqCst") token_offset:434:45
                    %2435 = call(.auto, %2431, [%2434]) node_offset:434:43
                    %2436 = param_type(%2428, 1)
                    %2437 = call(.auto, %2428, [%2435, @Zir.Inst.Ref.zero]) node_offset:434:36
                    %2438 = is_non_err(%2437) node_offset:434:13
                    %2439 = condbr(%2438, {
                      %2441 = err_union_payload_unsafe(%2437) node_offset:434:13
                      %2444 = break(%2440, %2441)
                    }, {
                      %2442 = err_union_code(%2437) node_offset:434:13
                      %2443 = ret_node(%2442) node_offset:434:13
                    }) node_offset:434:13
                  }) node_offset:434:13
                  %2445 = ensure_result_used(%2440) node_offset:434:13
                  %2446 = dbg_stmt(9, 13)
                  %2447 = loop({
                    %2460 = block({
                      %2448 = dbg_stmt(9, 20)
                      %2449 = field_call_bind(%2389, "tryCompareAndSwap") node_offset:436:21
                      %2450 = dbg_stmt(9, 39)
                      %2451 = param_type(%2449, 0)
                      %2452 = param_type(%2449, 1)
                      %2453 = param_type(%2449, 2)
                      %2454 = elem_val(%2385, @Zir.Inst.Ref.zero)
                      %2455 = param_type(%2449, 3)
                      %2456 = elem_val(%2385, @Zir.Inst.Ref.one)
                      %2457 = call(.auto, %2449, [@Zir.Inst.Ref.zero, @Zir.Inst.Ref.one, %2454, %2456]) node_offset:436:39
                      %2458 = is_non_null(%2457) node_offset:436:13
                      %2459 = condbr(%2458, {
                        %2461 = optional_payload_unsafe(%2457) node_offset:436:13
                        %2465 = break(%2460, @Zir.Inst.Ref.void_value)
                      }, {
                        %2466 = break(%2447, @Zir.Inst.Ref.void_value)
                      }) node_offset:436:13
                    }) node_offset:436:13
                    %2463 = repeat() node_offset:436:13
                  }) node_offset:436:13
                  %2467 = ensure_result_used(%2447) node_offset:436:13
                  %2468 = dbg_stmt(10, 13)
                  %2482 = block({
                    %2469 = decl_ref("testing") token_offset:437:17
                    %2470 = field_call_bind(%2469, "expectEqual") node_offset:437:24
                    %2471 = dbg_stmt(10, 36)
                    %2472 = param_type(%2470, 0)
                    %2473 = field_call_bind(%2389, "load") node_offset:437:38
                    %2474 = dbg_stmt(10, 43)
                    %2475 = param_type(%2473, 0)
                    %2476 = enum_literal("SeqCst") token_offset:437:45
                    %2477 = call(.auto, %2473, [%2476]) node_offset:437:43
                    %2478 = param_type(%2470, 1)
                    %2479 = call(.auto, %2470, [%2477, @Zir.Inst.Ref.one]) node_offset:437:36
                    %2480 = is_non_err(%2479) node_offset:437:13
                    %2481 = condbr(%2480, {
                      %2483 = err_union_payload_unsafe(%2479) node_offset:437:13
                      %2486 = break(%2482, %2483)
                    }, {
                      %2484 = err_union_code(%2479) node_offset:437:13
                      %2485 = ret_node(%2484) node_offset:437:13
                    }) node_offset:437:13
                  }) node_offset:437:13
                  %2487 = ensure_result_used(%2482) node_offset:437:13
                  %2488 = dbg_stmt(12, 13)
                  %2489 = loop({
                    %2502 = block({
                      %2490 = dbg_stmt(12, 20)
                      %2491 = field_call_bind(%2389, "tryCompareAndSwap") node_offset:439:21
                      %2492 = dbg_stmt(12, 39)
                      %2493 = param_type(%2491, 0)
                      %2494 = param_type(%2491, 1)
                      %2495 = param_type(%2491, 2)
                      %2496 = elem_val(%2385, @Zir.Inst.Ref.zero)
                      %2497 = param_type(%2491, 3)
                      %2498 = elem_val(%2385, @Zir.Inst.Ref.one)
                      %2499 = call(.auto, %2491, [@Zir.Inst.Ref.one, @Zir.Inst.Ref.zero, %2496, %2498]) node_offset:439:39
                      %2500 = is_non_null(%2499) node_offset:439:13
                      %2501 = condbr(%2500, {
                        %2503 = optional_payload_unsafe(%2499) node_offset:439:13
                        %2507 = break(%2502, @Zir.Inst.Ref.void_value)
                      }, {
                        %2508 = break(%2489, @Zir.Inst.Ref.void_value)
                      }) node_offset:439:13
                    }) node_offset:439:13
                    %2505 = repeat() node_offset:439:13
                  }) node_offset:439:13
                  %2509 = ensure_result_used(%2489) node_offset:439:13
                  %2510 = dbg_stmt(13, 13)
                  %2524 = block({
                    %2511 = decl_ref("testing") token_offset:440:17
                    %2512 = field_call_bind(%2511, "expectEqual") node_offset:440:24
                    %2513 = dbg_stmt(13, 36)
                    %2514 = param_type(%2512, 0)
                    %2515 = field_call_bind(%2389, "load") node_offset:440:38
                    %2516 = dbg_stmt(13, 43)
                    %2517 = param_type(%2515, 0)
                    %2518 = enum_literal("SeqCst") token_offset:440:45
                    %2519 = call(.auto, %2515, [%2518]) node_offset:440:43
                    %2520 = param_type(%2512, 1)
                    %2521 = call(.auto, %2512, [%2519, @Zir.Inst.Ref.zero]) node_offset:440:36
                    %2522 = is_non_err(%2521) node_offset:440:13
                    %2523 = condbr(%2522, {
                      %2525 = err_union_payload_unsafe(%2521) node_offset:440:13
                      %2528 = break(%2524, %2525)
                    }, {
                      %2526 = err_union_code(%2521) node_offset:440:13
                      %2527 = ret_node(%2526) node_offset:440:13
                    }) node_offset:440:13
                  }) node_offset:440:13
                  %2530 = dbg_block_end())
                  %2531 = dbg_block_end())
                  %2529 = ensure_result_used(%2524) node_offset:440:13
                  %2532 = break_inline(%2379, @Zir.Inst.Ref.void_value)
                }, {
                  %2533 = break_inline(%2375, @Zir.Inst.Ref.void_value)
                }) node_offset:430:16
              }) node_offset:430:16
              %2380 = load(%2373) node_offset:430:21
              %2381 = add(%2380, @Zir.Inst.Ref.one_usize) node_offset:430:16
              %2382 = store(%2373, %2381)
              %2383 = repeat_inline() node_offset:430:16
            }) node_offset:430:16
            %2535 = dbg_block_end())
            %2536 = dbg_block_end())
            %2534 = ensure_result_used(%2375) node_offset:430:16
            %2537 = break_inline(%2360, @Zir.Inst.Ref.void_value)
          }, {
            %2538 = break_inline(%2356, @Zir.Inst.Ref.void_value)
          }) node_offset:429:12
        }) node_offset:429:12
        %2361 = load(%2354) node_offset:429:31
        %2362 = add(%2361, @Zir.Inst.Ref.one_usize) node_offset:429:12
        %2363 = store(%2354, %2362)
        %2364 = repeat_inline() node_offset:429:12
      }) node_offset:429:12
      %2540 = dbg_block_end())
      %2539 = ensure_result_used(%2356) node_offset:429:12
      %2541 = ret_tok(@Zir.Inst.Ref.void_value) token_offset:443:1
    }) (lbrace=1:33,rbrace=16:1) node_offset:428:1
    %2543 = break_inline(%2346, %2542)
  }) node_offset:428:1
  [8511] test "@"Atomic.fetchAdd"" line(444) hash(178debc953526abd1e7126f228be1c23): %2544 = block_inline({
    %2704 = func_extended(test, ret_ty=void, inferror, body={
      %2545 = dbg_block_begin())
      %2546 = dbg_stmt(2, 5)
      %2547 = dbg_stmt(2, 17)
      %2548 = decl_val("atomicIntTypes") token_offset:446:17
      %2549 = dbg_stmt(2, 31)
      %2550 = call(.auto, %2548, []) node_offset:446:31
      %2551 = indexable_ptr_len(%2550) node_offset:446:31
      %2552 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:446:12
      %2553 = store(%2552, @Zir.Inst.Ref.zero_usize)
      %2554 = block_inline({
        %2558 = block_inline({
          %2555 = load(%2552) node_offset:446:31
          %2556 = cmp_lt(%2555, %2551) node_offset:446:31
          %2557 = condbr_inline(%2556, {
            %2563 = dbg_block_begin())
            %2564 = elem_val(%2550, %2555)
            %2565 = dbg_var_val(%2564, "Int")
            %2566 = dbg_block_begin())
            %2567 = dbg_stmt(3, 9)
            %2568 = dbg_stmt(3, 21)
            %2569 = decl_val("atomic_rmw_orderings") token_offset:447:21
            %2570 = indexable_ptr_len(%2569) node_offset:447:21
            %2571 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:447:16
            %2572 = store(%2571, @Zir.Inst.Ref.zero_usize)
            %2573 = block_inline({
              %2577 = block_inline({
                %2574 = load(%2571) node_offset:447:21
                %2575 = cmp_lt(%2574, %2570) node_offset:447:21
                %2576 = condbr_inline(%2575, {
                  %2582 = dbg_block_begin())
                  %2583 = elem_val(%2569, %2574)
                  %2584 = dbg_var_val(%2583, "ordering")
                  %2585 = dbg_block_begin())
                  %2586 = dbg_stmt(4, 13)
                  %2587 = alloc_inferred_mut() node_offset:448:13
                  %2588 = decl_val("Atomic") token_offset:448:21
                  %2589 = dbg_stmt(4, 27)
                  %2590 = param_type(%2588, 0)
                  %2591 = call(.auto, %2588, [%2564]) node_offset:448:27
                  %2592 = ref(%2591) token_offset:448:21
                  %2593 = field_call_bind(%2592, "init") node_offset:448:32
                  %2594 = dbg_stmt(4, 37)
                  %2595 = param_type(%2593, 0)
                  %2596 = int(5)
                  %2597 = call(.auto, %2593, [%2596]) node_offset:448:37
                  %2598 = store_to_inferred_ptr(%2587, %2597)
                  %2599 = resolve_inferred_alloc(%2587) node_offset:448:13
                  %2600 = dbg_var_ptr(%2587, "x")
                  %2601 = dbg_stmt(5, 13)
                  %2617 = block({
                    %2602 = decl_ref("testing") token_offset:449:17
                    %2603 = field_call_bind(%2602, "expectEqual") node_offset:449:24
                    %2604 = dbg_stmt(5, 36)
                    %2605 = param_type(%2603, 0)
                    %2606 = field_call_bind(%2587, "fetchAdd") node_offset:449:38
                    %2607 = dbg_stmt(5, 47)
                    %2608 = param_type(%2606, 0)
                    %2609 = int(5)
                    %2610 = param_type(%2606, 1)
                    %2611 = call(.auto, %2606, [%2609, %2583]) node_offset:449:47
                    %2612 = param_type(%2603, 1)
                    %2613 = int(5)
                    %2614 = call(.auto, %2603, [%2611, %2613]) node_offset:449:36
                    %2615 = is_non_err(%2614) node_offset:449:13
                    %2616 = condbr(%2615, {
                      %2618 = err_union_payload_unsafe(%2614) node_offset:449:13
                      %2621 = break(%2617, %2618)
                    }, {
                      %2619 = err_union_code(%2614) node_offset:449:13
                      %2620 = ret_node(%2619) node_offset:449:13
                    }) node_offset:449:13
                  }) node_offset:449:13
                  %2622 = ensure_result_used(%2617) node_offset:449:13
                  %2623 = dbg_stmt(6, 13)
                  %2638 = block({
                    %2624 = decl_ref("testing") token_offset:450:17
                    %2625 = field_call_bind(%2624, "expectEqual") node_offset:450:24
                    %2626 = dbg_stmt(6, 36)
                    %2627 = param_type(%2625, 0)
                    %2628 = field_call_bind(%2587, "load") node_offset:450:38
                    %2629 = dbg_stmt(6, 43)
                    %2630 = param_type(%2628, 0)
                    %2631 = enum_literal("SeqCst") token_offset:450:45
                    %2632 = call(.auto, %2628, [%2631]) node_offset:450:43
                    %2633 = param_type(%2625, 1)
                    %2634 = int(10)
                    %2635 = call(.auto, %2625, [%2632, %2634]) node_offset:450:36
                    %2636 = is_non_err(%2635) node_offset:450:13
                    %2637 = condbr(%2636, {
                      %2639 = err_union_payload_unsafe(%2635) node_offset:450:13
                      %2642 = break(%2638, %2639)
                    }, {
                      %2640 = err_union_code(%2635) node_offset:450:13
                      %2641 = ret_node(%2640) node_offset:450:13
                    }) node_offset:450:13
                  }) node_offset:450:13
                  %2643 = ensure_result_used(%2638) node_offset:450:13
                  %2644 = dbg_stmt(7, 13)
                  %2665 = block({
                    %2645 = decl_ref("testing") token_offset:451:17
                    %2646 = field_call_bind(%2645, "expectEqual") node_offset:451:24
                    %2647 = dbg_stmt(7, 36)
                    %2648 = param_type(%2646, 0)
                    %2649 = field_call_bind(%2587, "fetchAdd") node_offset:451:38
                    %2650 = dbg_stmt(7, 47)
                    %2651 = param_type(%2649, 0)
                    %2652 = decl_ref("std") token_offset:451:48
                    %2653 = field_ptr(%2652, "math") node_offset:451:51
                    %2654 = field_call_bind(%2653, "maxInt") node_offset:451:56
                    %2655 = dbg_stmt(7, 63)
                    %2656 = param_type(%2654, 0)
                    %2657 = call(.auto, %2654, [%2564]) node_offset:451:63
                    %2658 = param_type(%2649, 1)
                    %2659 = call(.auto, %2649, [%2657, %2583]) node_offset:451:47
                    %2660 = param_type(%2646, 1)
                    %2661 = int(10)
                    %2662 = call(.auto, %2646, [%2659, %2661]) node_offset:451:36
                    %2663 = is_non_err(%2662) node_offset:451:13
                    %2664 = condbr(%2663, {
                      %2666 = err_union_payload_unsafe(%2662) node_offset:451:13
                      %2669 = break(%2665, %2666)
                    }, {
                      %2667 = err_union_code(%2662) node_offset:451:13
                      %2668 = ret_node(%2667) node_offset:451:13
                    }) node_offset:451:13
                  }) node_offset:451:13
                  %2670 = ensure_result_used(%2665) node_offset:451:13
                  %2671 = dbg_stmt(8, 13)
                  %2686 = block({
                    %2672 = decl_ref("testing") token_offset:452:17
                    %2673 = field_call_bind(%2672, "expectEqual") node_offset:452:24
                    %2674 = dbg_stmt(8, 36)
                    %2675 = param_type(%2673, 0)
                    %2676 = field_call_bind(%2587, "load") node_offset:452:38
                    %2677 = dbg_stmt(8, 43)
                    %2678 = param_type(%2676, 0)
                    %2679 = enum_literal("SeqCst") token_offset:452:45
                    %2680 = call(.auto, %2676, [%2679]) node_offset:452:43
                    %2681 = param_type(%2673, 1)
                    %2682 = int(9)
                    %2683 = call(.auto, %2673, [%2680, %2682]) node_offset:452:36
                    %2684 = is_non_err(%2683) node_offset:452:13
                    %2685 = condbr(%2684, {
                      %2687 = err_union_payload_unsafe(%2683) node_offset:452:13
                      %2690 = break(%2686, %2687)
                    }, {
                      %2688 = err_union_code(%2683) node_offset:452:13
                      %2689 = ret_node(%2688) node_offset:452:13
                    }) node_offset:452:13
                  }) node_offset:452:13
                  %2692 = dbg_block_end())
                  %2693 = dbg_block_end())
                  %2691 = ensure_result_used(%2686) node_offset:452:13
                  %2694 = break_inline(%2577, @Zir.Inst.Ref.void_value)
                }, {
                  %2695 = break_inline(%2573, @Zir.Inst.Ref.void_value)
                }) node_offset:447:16
              }) node_offset:447:16
              %2578 = load(%2571) node_offset:447:21
              %2579 = add(%2578, @Zir.Inst.Ref.one_usize) node_offset:447:16
              %2580 = store(%2571, %2579)
              %2581 = repeat_inline() node_offset:447:16
            }) node_offset:447:16
            %2697 = dbg_block_end())
            %2698 = dbg_block_end())
            %2696 = ensure_result_used(%2573) node_offset:447:16
            %2699 = break_inline(%2558, @Zir.Inst.Ref.void_value)
          }, {
            %2700 = break_inline(%2554, @Zir.Inst.Ref.void_value)
          }) node_offset:446:12
        }) node_offset:446:12
        %2559 = load(%2552) node_offset:446:31
        %2560 = add(%2559, @Zir.Inst.Ref.one_usize) node_offset:446:12
        %2561 = store(%2552, %2560)
        %2562 = repeat_inline() node_offset:446:12
      }) node_offset:446:12
      %2702 = dbg_block_end())
      %2701 = ensure_result_used(%2554) node_offset:446:12
      %2703 = ret_tok(@Zir.Inst.Ref.void_value) token_offset:455:1
    }) (lbrace=1:24,rbrace=11:1) node_offset:445:1
    %2705 = break_inline(%2544, %2704)
  }) node_offset:445:1
  [8519] test "@"Atomic.fetchSub"" line(456) hash(135199226adcea000ff1184bc60432e0): %2706 = block_inline({
    %2863 = func_extended(test, ret_ty=void, inferror, body={
      %2707 = dbg_block_begin())
      %2708 = dbg_stmt(2, 5)
      %2709 = dbg_stmt(2, 17)
      %2710 = decl_val("atomicIntTypes") token_offset:458:17
      %2711 = dbg_stmt(2, 31)
      %2712 = call(.auto, %2710, []) node_offset:458:31
      %2713 = indexable_ptr_len(%2712) node_offset:458:31
      %2714 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:458:12
      %2715 = store(%2714, @Zir.Inst.Ref.zero_usize)
      %2716 = block_inline({
        %2720 = block_inline({
          %2717 = load(%2714) node_offset:458:31
          %2718 = cmp_lt(%2717, %2713) node_offset:458:31
          %2719 = condbr_inline(%2718, {
            %2725 = dbg_block_begin())
            %2726 = elem_val(%2712, %2717)
            %2727 = dbg_var_val(%2726, "Int")
            %2728 = dbg_block_begin())
            %2729 = dbg_stmt(3, 9)
            %2730 = dbg_stmt(3, 21)
            %2731 = decl_val("atomic_rmw_orderings") token_offset:459:21
            %2732 = indexable_ptr_len(%2731) node_offset:459:21
            %2733 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:459:16
            %2734 = store(%2733, @Zir.Inst.Ref.zero_usize)
            %2735 = block_inline({
              %2739 = block_inline({
                %2736 = load(%2733) node_offset:459:21
                %2737 = cmp_lt(%2736, %2732) node_offset:459:21
                %2738 = condbr_inline(%2737, {
                  %2744 = dbg_block_begin())
                  %2745 = elem_val(%2731, %2736)
                  %2746 = dbg_var_val(%2745, "ordering")
                  %2747 = dbg_block_begin())
                  %2748 = dbg_stmt(4, 13)
                  %2749 = alloc_inferred_mut() node_offset:460:13
                  %2750 = decl_val("Atomic") token_offset:460:21
                  %2751 = dbg_stmt(4, 27)
                  %2752 = param_type(%2750, 0)
                  %2753 = call(.auto, %2750, [%2726]) node_offset:460:27
                  %2754 = ref(%2753) token_offset:460:21
                  %2755 = field_call_bind(%2754, "init") node_offset:460:32
                  %2756 = dbg_stmt(4, 37)
                  %2757 = param_type(%2755, 0)
                  %2758 = int(5)
                  %2759 = call(.auto, %2755, [%2758]) node_offset:460:37
                  %2760 = store_to_inferred_ptr(%2749, %2759)
                  %2761 = resolve_inferred_alloc(%2749) node_offset:460:13
                  %2762 = dbg_var_ptr(%2749, "x")
                  %2763 = dbg_stmt(5, 13)
                  %2779 = block({
                    %2764 = decl_ref("testing") token_offset:461:17
                    %2765 = field_call_bind(%2764, "expectEqual") node_offset:461:24
                    %2766 = dbg_stmt(5, 36)
                    %2767 = param_type(%2765, 0)
                    %2768 = field_call_bind(%2749, "fetchSub") node_offset:461:38
                    %2769 = dbg_stmt(5, 47)
                    %2770 = param_type(%2768, 0)
                    %2771 = int(5)
                    %2772 = param_type(%2768, 1)
                    %2773 = call(.auto, %2768, [%2771, %2745]) node_offset:461:47
                    %2774 = param_type(%2765, 1)
                    %2775 = int(5)
                    %2776 = call(.auto, %2765, [%2773, %2775]) node_offset:461:36
                    %2777 = is_non_err(%2776) node_offset:461:13
                    %2778 = condbr(%2777, {
                      %2780 = err_union_payload_unsafe(%2776) node_offset:461:13
                      %2783 = break(%2779, %2780)
                    }, {
                      %2781 = err_union_code(%2776) node_offset:461:13
                      %2782 = ret_node(%2781) node_offset:461:13
                    }) node_offset:461:13
                  }) node_offset:461:13
                  %2784 = ensure_result_used(%2779) node_offset:461:13
                  %2785 = dbg_stmt(6, 13)
                  %2799 = block({
                    %2786 = decl_ref("testing") token_offset:462:17
                    %2787 = field_call_bind(%2786, "expectEqual") node_offset:462:24
                    %2788 = dbg_stmt(6, 36)
                    %2789 = param_type(%2787, 0)
                    %2790 = field_call_bind(%2749, "load") node_offset:462:38
                    %2791 = dbg_stmt(6, 43)
                    %2792 = param_type(%2790, 0)
                    %2793 = enum_literal("SeqCst") token_offset:462:45
                    %2794 = call(.auto, %2790, [%2793]) node_offset:462:43
                    %2795 = param_type(%2787, 1)
                    %2796 = call(.auto, %2787, [%2794, @Zir.Inst.Ref.zero]) node_offset:462:36
                    %2797 = is_non_err(%2796) node_offset:462:13
                    %2798 = condbr(%2797, {
                      %2800 = err_union_payload_unsafe(%2796) node_offset:462:13
                      %2803 = break(%2799, %2800)
                    }, {
                      %2801 = err_union_code(%2796) node_offset:462:13
                      %2802 = ret_node(%2801) node_offset:462:13
                    }) node_offset:462:13
                  }) node_offset:462:13
                  %2804 = ensure_result_used(%2799) node_offset:462:13
                  %2805 = dbg_stmt(7, 13)
                  %2819 = block({
                    %2806 = decl_ref("testing") token_offset:463:17
                    %2807 = field_call_bind(%2806, "expectEqual") node_offset:463:24
                    %2808 = dbg_stmt(7, 36)
                    %2809 = param_type(%2807, 0)
                    %2810 = field_call_bind(%2749, "fetchSub") node_offset:463:38
                    %2811 = dbg_stmt(7, 47)
                    %2812 = param_type(%2810, 0)
                    %2813 = param_type(%2810, 1)
                    %2814 = call(.auto, %2810, [@Zir.Inst.Ref.one, %2745]) node_offset:463:47
                    %2815 = param_type(%2807, 1)
                    %2816 = call(.auto, %2807, [%2814, @Zir.Inst.Ref.zero]) node_offset:463:36
                    %2817 = is_non_err(%2816) node_offset:463:13
                    %2818 = condbr(%2817, {
                      %2820 = err_union_payload_unsafe(%2816) node_offset:463:13
                      %2823 = break(%2819, %2820)
                    }, {
                      %2821 = err_union_code(%2816) node_offset:463:13
                      %2822 = ret_node(%2821) node_offset:463:13
                    }) node_offset:463:13
                  }) node_offset:463:13
                  %2824 = ensure_result_used(%2819) node_offset:463:13
                  %2825 = dbg_stmt(8, 13)
                  %2845 = block({
                    %2826 = decl_ref("testing") token_offset:464:17
                    %2827 = field_call_bind(%2826, "expectEqual") node_offset:464:24
                    %2828 = dbg_stmt(8, 36)
                    %2829 = param_type(%2827, 0)
                    %2830 = field_call_bind(%2749, "load") node_offset:464:38
                    %2831 = dbg_stmt(8, 43)
                    %2832 = param_type(%2830, 0)
                    %2833 = enum_literal("SeqCst") token_offset:464:45
                    %2834 = call(.auto, %2830, [%2833]) node_offset:464:43
                    %2835 = param_type(%2827, 1)
                    %2836 = decl_ref("std") token_offset:464:54
                    %2837 = field_ptr(%2836, "math") node_offset:464:57
                    %2838 = field_call_bind(%2837, "maxInt") node_offset:464:62
                    %2839 = dbg_stmt(8, 69)
                    %2840 = param_type(%2838, 0)
                    %2841 = call(.auto, %2838, [%2726]) node_offset:464:69
                    %2842 = call(.auto, %2827, [%2834, %2841]) node_offset:464:36
                    %2843 = is_non_err(%2842) node_offset:464:13
                    %2844 = condbr(%2843, {
                      %2846 = err_union_payload_unsafe(%2842) node_offset:464:13
                      %2849 = break(%2845, %2846)
                    }, {
                      %2847 = err_union_code(%2842) node_offset:464:13
                      %2848 = ret_node(%2847) node_offset:464:13
                    }) node_offset:464:13
                  }) node_offset:464:13
                  %2851 = dbg_block_end())
                  %2852 = dbg_block_end())
                  %2850 = ensure_result_used(%2845) node_offset:464:13
                  %2853 = break_inline(%2739, @Zir.Inst.Ref.void_value)
                }, {
                  %2854 = break_inline(%2735, @Zir.Inst.Ref.void_value)
                }) node_offset:459:16
              }) node_offset:459:16
              %2740 = load(%2733) node_offset:459:21
              %2741 = add(%2740, @Zir.Inst.Ref.one_usize) node_offset:459:16
              %2742 = store(%2733, %2741)
              %2743 = repeat_inline() node_offset:459:16
            }) node_offset:459:16
            %2856 = dbg_block_end())
            %2857 = dbg_block_end())
            %2855 = ensure_result_used(%2735) node_offset:459:16
            %2858 = break_inline(%2720, @Zir.Inst.Ref.void_value)
          }, {
            %2859 = break_inline(%2716, @Zir.Inst.Ref.void_value)
          }) node_offset:458:12
        }) node_offset:458:12
        %2721 = load(%2714) node_offset:458:31
        %2722 = add(%2721, @Zir.Inst.Ref.one_usize) node_offset:458:12
        %2723 = store(%2714, %2722)
        %2724 = repeat_inline() node_offset:458:12
      }) node_offset:458:12
      %2861 = dbg_block_end())
      %2860 = ensure_result_used(%2716) node_offset:458:12
      %2862 = ret_tok(@Zir.Inst.Ref.void_value) token_offset:467:1
    }) (lbrace=1:24,rbrace=11:1) node_offset:457:1
    %2864 = break_inline(%2706, %2863)
  }) node_offset:457:1
  [8527] test "@"Atomic.fetchMin"" line(468) hash(7fca2a430aeb646664f6160e18d7fe62): %2865 = block_inline({
    %3016 = func_extended(test, ret_ty=void, inferror, body={
      %2866 = dbg_block_begin())
      %2867 = dbg_stmt(2, 5)
      %2868 = dbg_stmt(2, 17)
      %2869 = decl_val("atomicIntTypes") token_offset:470:17
      %2870 = dbg_stmt(2, 31)
      %2871 = call(.auto, %2869, []) node_offset:470:31
      %2872 = indexable_ptr_len(%2871) node_offset:470:31
      %2873 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:470:12
      %2874 = store(%2873, @Zir.Inst.Ref.zero_usize)
      %2875 = block_inline({
        %2879 = block_inline({
          %2876 = load(%2873) node_offset:470:31
          %2877 = cmp_lt(%2876, %2872) node_offset:470:31
          %2878 = condbr_inline(%2877, {
            %2884 = dbg_block_begin())
            %2885 = elem_val(%2871, %2876)
            %2886 = dbg_var_val(%2885, "Int")
            %2887 = dbg_block_begin())
            %2888 = dbg_stmt(3, 9)
            %2889 = dbg_stmt(3, 21)
            %2890 = decl_val("atomic_rmw_orderings") token_offset:471:21
            %2891 = indexable_ptr_len(%2890) node_offset:471:21
            %2892 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:471:16
            %2893 = store(%2892, @Zir.Inst.Ref.zero_usize)
            %2894 = block_inline({
              %2898 = block_inline({
                %2895 = load(%2892) node_offset:471:21
                %2896 = cmp_lt(%2895, %2891) node_offset:471:21
                %2897 = condbr_inline(%2896, {
                  %2903 = dbg_block_begin())
                  %2904 = elem_val(%2890, %2895)
                  %2905 = dbg_var_val(%2904, "ordering")
                  %2906 = dbg_block_begin())
                  %2907 = dbg_stmt(4, 13)
                  %2908 = alloc_inferred_mut() node_offset:472:13
                  %2909 = decl_val("Atomic") token_offset:472:21
                  %2910 = dbg_stmt(4, 27)
                  %2911 = param_type(%2909, 0)
                  %2912 = call(.auto, %2909, [%2885]) node_offset:472:27
                  %2913 = ref(%2912) token_offset:472:21
                  %2914 = field_call_bind(%2913, "init") node_offset:472:32
                  %2915 = dbg_stmt(4, 37)
                  %2916 = param_type(%2914, 0)
                  %2917 = int(5)
                  %2918 = call(.auto, %2914, [%2917]) node_offset:472:37
                  %2919 = store_to_inferred_ptr(%2908, %2918)
                  %2920 = resolve_inferred_alloc(%2908) node_offset:472:13
                  %2921 = dbg_var_ptr(%2908, "x")
                  %2922 = dbg_stmt(5, 13)
                  %2937 = block({
                    %2923 = decl_ref("testing") token_offset:473:17
                    %2924 = field_call_bind(%2923, "expectEqual") node_offset:473:24
                    %2925 = dbg_stmt(5, 36)
                    %2926 = param_type(%2924, 0)
                    %2927 = field_call_bind(%2908, "fetchMin") node_offset:473:38
                    %2928 = dbg_stmt(5, 47)
                    %2929 = param_type(%2927, 0)
                    %2930 = param_type(%2927, 1)
                    %2931 = call(.auto, %2927, [@Zir.Inst.Ref.zero, %2904]) node_offset:473:47
                    %2932 = param_type(%2924, 1)
                    %2933 = int(5)
                    %2934 = call(.auto, %2924, [%2931, %2933]) node_offset:473:36
                    %2935 = is_non_err(%2934) node_offset:473:13
                    %2936 = condbr(%2935, {
                      %2938 = err_union_payload_unsafe(%2934) node_offset:473:13
                      %2941 = break(%2937, %2938)
                    }, {
                      %2939 = err_union_code(%2934) node_offset:473:13
                      %2940 = ret_node(%2939) node_offset:473:13
                    }) node_offset:473:13
                  }) node_offset:473:13
                  %2942 = ensure_result_used(%2937) node_offset:473:13
                  %2943 = dbg_stmt(6, 13)
                  %2957 = block({
                    %2944 = decl_ref("testing") token_offset:474:17
                    %2945 = field_call_bind(%2944, "expectEqual") node_offset:474:24
                    %2946 = dbg_stmt(6, 36)
                    %2947 = param_type(%2945, 0)
                    %2948 = field_call_bind(%2908, "load") node_offset:474:38
                    %2949 = dbg_stmt(6, 43)
                    %2950 = param_type(%2948, 0)
                    %2951 = enum_literal("SeqCst") token_offset:474:45
                    %2952 = call(.auto, %2948, [%2951]) node_offset:474:43
                    %2953 = param_type(%2945, 1)
                    %2954 = call(.auto, %2945, [%2952, @Zir.Inst.Ref.zero]) node_offset:474:36
                    %2955 = is_non_err(%2954) node_offset:474:13
                    %2956 = condbr(%2955, {
                      %2958 = err_union_payload_unsafe(%2954) node_offset:474:13
                      %2961 = break(%2957, %2958)
                    }, {
                      %2959 = err_union_code(%2954) node_offset:474:13
                      %2960 = ret_node(%2959) node_offset:474:13
                    }) node_offset:474:13
                  }) node_offset:474:13
                  %2962 = ensure_result_used(%2957) node_offset:474:13
                  %2963 = dbg_stmt(7, 13)
                  %2978 = block({
                    %2964 = decl_ref("testing") token_offset:475:17
                    %2965 = field_call_bind(%2964, "expectEqual") node_offset:475:24
                    %2966 = dbg_stmt(7, 36)
                    %2967 = param_type(%2965, 0)
                    %2968 = field_call_bind(%2908, "fetchMin") node_offset:475:38
                    %2969 = dbg_stmt(7, 47)
                    %2970 = param_type(%2968, 0)
                    %2971 = int(10)
                    %2972 = param_type(%2968, 1)
                    %2973 = call(.auto, %2968, [%2971, %2904]) node_offset:475:47
                    %2974 = param_type(%2965, 1)
                    %2975 = call(.auto, %2965, [%2973, @Zir.Inst.Ref.zero]) node_offset:475:36
                    %2976 = is_non_err(%2975) node_offset:475:13
                    %2977 = condbr(%2976, {
                      %2979 = err_union_payload_unsafe(%2975) node_offset:475:13
                      %2982 = break(%2978, %2979)
                    }, {
                      %2980 = err_union_code(%2975) node_offset:475:13
                      %2981 = ret_node(%2980) node_offset:475:13
                    }) node_offset:475:13
                  }) node_offset:475:13
                  %2983 = ensure_result_used(%2978) node_offset:475:13
                  %2984 = dbg_stmt(8, 13)
                  %2998 = block({
                    %2985 = decl_ref("testing") token_offset:476:17
                    %2986 = field_call_bind(%2985, "expectEqual") node_offset:476:24
                    %2987 = dbg_stmt(8, 36)
                    %2988 = param_type(%2986, 0)
                    %2989 = field_call_bind(%2908, "load") node_offset:476:38
                    %2990 = dbg_stmt(8, 43)
                    %2991 = param_type(%2989, 0)
                    %2992 = enum_literal("SeqCst") token_offset:476:45
                    %2993 = call(.auto, %2989, [%2992]) node_offset:476:43
                    %2994 = param_type(%2986, 1)
                    %2995 = call(.auto, %2986, [%2993, @Zir.Inst.Ref.zero]) node_offset:476:36
                    %2996 = is_non_err(%2995) node_offset:476:13
                    %2997 = condbr(%2996, {
                      %2999 = err_union_payload_unsafe(%2995) node_offset:476:13
                      %3002 = break(%2998, %2999)
                    }, {
                      %3000 = err_union_code(%2995) node_offset:476:13
                      %3001 = ret_node(%3000) node_offset:476:13
                    }) node_offset:476:13
                  }) node_offset:476:13
                  %3004 = dbg_block_end())
                  %3005 = dbg_block_end())
                  %3003 = ensure_result_used(%2998) node_offset:476:13
                  %3006 = break_inline(%2898, @Zir.Inst.Ref.void_value)
                }, {
                  %3007 = break_inline(%2894, @Zir.Inst.Ref.void_value)
                }) node_offset:471:16
              }) node_offset:471:16
              %2899 = load(%2892) node_offset:471:21
              %2900 = add(%2899, @Zir.Inst.Ref.one_usize) node_offset:471:16
              %2901 = store(%2892, %2900)
              %2902 = repeat_inline() node_offset:471:16
            }) node_offset:471:16
            %3009 = dbg_block_end())
            %3010 = dbg_block_end())
            %3008 = ensure_result_used(%2894) node_offset:471:16
            %3011 = break_inline(%2879, @Zir.Inst.Ref.void_value)
          }, {
            %3012 = break_inline(%2875, @Zir.Inst.Ref.void_value)
          }) node_offset:470:12
        }) node_offset:470:12
        %2880 = load(%2873) node_offset:470:31
        %2881 = add(%2880, @Zir.Inst.Ref.one_usize) node_offset:470:12
        %2882 = store(%2873, %2881)
        %2883 = repeat_inline() node_offset:470:12
      }) node_offset:470:12
      %3014 = dbg_block_end())
      %3013 = ensure_result_used(%2875) node_offset:470:12
      %3015 = ret_tok(@Zir.Inst.Ref.void_value) token_offset:479:1
    }) (lbrace=1:24,rbrace=11:1) node_offset:469:1
    %3017 = break_inline(%2865, %3016)
  }) node_offset:469:1
  [8535] test "@"Atomic.fetchMax"" line(480) hash(6b68b613157ba8376e7ee4fcf2f4d58a): %3018 = block_inline({
    %3173 = func_extended(test, ret_ty=void, inferror, body={
      %3019 = dbg_block_begin())
      %3020 = dbg_stmt(2, 5)
      %3021 = dbg_stmt(2, 17)
      %3022 = decl_val("atomicIntTypes") token_offset:482:17
      %3023 = dbg_stmt(2, 31)
      %3024 = call(.auto, %3022, []) node_offset:482:31
      %3025 = indexable_ptr_len(%3024) node_offset:482:31
      %3026 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:482:12
      %3027 = store(%3026, @Zir.Inst.Ref.zero_usize)
      %3028 = block_inline({
        %3032 = block_inline({
          %3029 = load(%3026) node_offset:482:31
          %3030 = cmp_lt(%3029, %3025) node_offset:482:31
          %3031 = condbr_inline(%3030, {
            %3037 = dbg_block_begin())
            %3038 = elem_val(%3024, %3029)
            %3039 = dbg_var_val(%3038, "Int")
            %3040 = dbg_block_begin())
            %3041 = dbg_stmt(3, 9)
            %3042 = dbg_stmt(3, 21)
            %3043 = decl_val("atomic_rmw_orderings") token_offset:483:21
            %3044 = indexable_ptr_len(%3043) node_offset:483:21
            %3045 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:483:16
            %3046 = store(%3045, @Zir.Inst.Ref.zero_usize)
            %3047 = block_inline({
              %3051 = block_inline({
                %3048 = load(%3045) node_offset:483:21
                %3049 = cmp_lt(%3048, %3044) node_offset:483:21
                %3050 = condbr_inline(%3049, {
                  %3056 = dbg_block_begin())
                  %3057 = elem_val(%3043, %3048)
                  %3058 = dbg_var_val(%3057, "ordering")
                  %3059 = dbg_block_begin())
                  %3060 = dbg_stmt(4, 13)
                  %3061 = alloc_inferred_mut() node_offset:484:13
                  %3062 = decl_val("Atomic") token_offset:484:21
                  %3063 = dbg_stmt(4, 27)
                  %3064 = param_type(%3062, 0)
                  %3065 = call(.auto, %3062, [%3038]) node_offset:484:27
                  %3066 = ref(%3065) token_offset:484:21
                  %3067 = field_call_bind(%3066, "init") node_offset:484:32
                  %3068 = dbg_stmt(4, 37)
                  %3069 = param_type(%3067, 0)
                  %3070 = int(5)
                  %3071 = call(.auto, %3067, [%3070]) node_offset:484:37
                  %3072 = store_to_inferred_ptr(%3061, %3071)
                  %3073 = resolve_inferred_alloc(%3061) node_offset:484:13
                  %3074 = dbg_var_ptr(%3061, "x")
                  %3075 = dbg_stmt(5, 13)
                  %3091 = block({
                    %3076 = decl_ref("testing") token_offset:485:17
                    %3077 = field_call_bind(%3076, "expectEqual") node_offset:485:24
                    %3078 = dbg_stmt(5, 36)
                    %3079 = param_type(%3077, 0)
                    %3080 = field_call_bind(%3061, "fetchMax") node_offset:485:38
                    %3081 = dbg_stmt(5, 47)
                    %3082 = param_type(%3080, 0)
                    %3083 = int(10)
                    %3084 = param_type(%3080, 1)
                    %3085 = call(.auto, %3080, [%3083, %3057]) node_offset:485:47
                    %3086 = param_type(%3077, 1)
                    %3087 = int(5)
                    %3088 = call(.auto, %3077, [%3085, %3087]) node_offset:485:36
                    %3089 = is_non_err(%3088) node_offset:485:13
                    %3090 = condbr(%3089, {
                      %3092 = err_union_payload_unsafe(%3088) node_offset:485:13
                      %3095 = break(%3091, %3092)
                    }, {
                      %3093 = err_union_code(%3088) node_offset:485:13
                      %3094 = ret_node(%3093) node_offset:485:13
                    }) node_offset:485:13
                  }) node_offset:485:13
                  %3096 = ensure_result_used(%3091) node_offset:485:13
                  %3097 = dbg_stmt(6, 13)
                  %3112 = block({
                    %3098 = decl_ref("testing") token_offset:486:17
                    %3099 = field_call_bind(%3098, "expectEqual") node_offset:486:24
                    %3100 = dbg_stmt(6, 36)
                    %3101 = param_type(%3099, 0)
                    %3102 = field_call_bind(%3061, "load") node_offset:486:38
                    %3103 = dbg_stmt(6, 43)
                    %3104 = param_type(%3102, 0)
                    %3105 = enum_literal("SeqCst") token_offset:486:45
                    %3106 = call(.auto, %3102, [%3105]) node_offset:486:43
                    %3107 = param_type(%3099, 1)
                    %3108 = int(10)
                    %3109 = call(.auto, %3099, [%3106, %3108]) node_offset:486:36
                    %3110 = is_non_err(%3109) node_offset:486:13
                    %3111 = condbr(%3110, {
                      %3113 = err_union_payload_unsafe(%3109) node_offset:486:13
                      %3116 = break(%3112, %3113)
                    }, {
                      %3114 = err_union_code(%3109) node_offset:486:13
                      %3115 = ret_node(%3114) node_offset:486:13
                    }) node_offset:486:13
                  }) node_offset:486:13
                  %3117 = ensure_result_used(%3112) node_offset:486:13
                  %3118 = dbg_stmt(7, 13)
                  %3134 = block({
                    %3119 = decl_ref("testing") token_offset:487:17
                    %3120 = field_call_bind(%3119, "expectEqual") node_offset:487:24
                    %3121 = dbg_stmt(7, 36)
                    %3122 = param_type(%3120, 0)
                    %3123 = field_call_bind(%3061, "fetchMax") node_offset:487:38
                    %3124 = dbg_stmt(7, 47)
                    %3125 = param_type(%3123, 0)
                    %3126 = int(5)
                    %3127 = param_type(%3123, 1)
                    %3128 = call(.auto, %3123, [%3126, %3057]) node_offset:487:47
                    %3129 = param_type(%3120, 1)
                    %3130 = int(10)
                    %3131 = call(.auto, %3120, [%3128, %3130]) node_offset:487:36
                    %3132 = is_non_err(%3131) node_offset:487:13
                    %3133 = condbr(%3132, {
                      %3135 = err_union_payload_unsafe(%3131) node_offset:487:13
                      %3138 = break(%3134, %3135)
                    }, {
                      %3136 = err_union_code(%3131) node_offset:487:13
                      %3137 = ret_node(%3136) node_offset:487:13
                    }) node_offset:487:13
                  }) node_offset:487:13
                  %3139 = ensure_result_used(%3134) node_offset:487:13
                  %3140 = dbg_stmt(8, 13)
                  %3155 = block({
                    %3141 = decl_ref("testing") token_offset:488:17
                    %3142 = field_call_bind(%3141, "expectEqual") node_offset:488:24
                    %3143 = dbg_stmt(8, 36)
                    %3144 = param_type(%3142, 0)
                    %3145 = field_call_bind(%3061, "load") node_offset:488:38
                    %3146 = dbg_stmt(8, 43)
                    %3147 = param_type(%3145, 0)
                    %3148 = enum_literal("SeqCst") token_offset:488:45
                    %3149 = call(.auto, %3145, [%3148]) node_offset:488:43
                    %3150 = param_type(%3142, 1)
                    %3151 = int(10)
                    %3152 = call(.auto, %3142, [%3149, %3151]) node_offset:488:36
                    %3153 = is_non_err(%3152) node_offset:488:13
                    %3154 = condbr(%3153, {
                      %3156 = err_union_payload_unsafe(%3152) node_offset:488:13
                      %3159 = break(%3155, %3156)
                    }, {
                      %3157 = err_union_code(%3152) node_offset:488:13
                      %3158 = ret_node(%3157) node_offset:488:13
                    }) node_offset:488:13
                  }) node_offset:488:13
                  %3161 = dbg_block_end())
                  %3162 = dbg_block_end())
                  %3160 = ensure_result_used(%3155) node_offset:488:13
                  %3163 = break_inline(%3051, @Zir.Inst.Ref.void_value)
                }, {
                  %3164 = break_inline(%3047, @Zir.Inst.Ref.void_value)
                }) node_offset:483:16
              }) node_offset:483:16
              %3052 = load(%3045) node_offset:483:21
              %3053 = add(%3052, @Zir.Inst.Ref.one_usize) node_offset:483:16
              %3054 = store(%3045, %3053)
              %3055 = repeat_inline() node_offset:483:16
            }) node_offset:483:16
            %3166 = dbg_block_end())
            %3167 = dbg_block_end())
            %3165 = ensure_result_used(%3047) node_offset:483:16
            %3168 = break_inline(%3032, @Zir.Inst.Ref.void_value)
          }, {
            %3169 = break_inline(%3028, @Zir.Inst.Ref.void_value)
          }) node_offset:482:12
        }) node_offset:482:12
        %3033 = load(%3026) node_offset:482:31
        %3034 = add(%3033, @Zir.Inst.Ref.one_usize) node_offset:482:12
        %3035 = store(%3026, %3034)
        %3036 = repeat_inline() node_offset:482:12
      }) node_offset:482:12
      %3171 = dbg_block_end())
      %3170 = ensure_result_used(%3028) node_offset:482:12
      %3172 = ret_tok(@Zir.Inst.Ref.void_value) token_offset:491:1
    }) (lbrace=1:24,rbrace=11:1) node_offset:481:1
    %3174 = break_inline(%3018, %3173)
  }) node_offset:481:1
  [8543] test "@"Atomic.fetchAnd"" line(492) hash(285b141f726a491e42447f8de330d626): %3175 = block_inline({
    %3328 = func_extended(test, ret_ty=void, inferror, body={
      %3176 = dbg_block_begin())
      %3177 = dbg_stmt(2, 5)
      %3178 = dbg_stmt(2, 17)
      %3179 = decl_val("atomicIntTypes") token_offset:494:17
      %3180 = dbg_stmt(2, 31)
      %3181 = call(.auto, %3179, []) node_offset:494:31
      %3182 = indexable_ptr_len(%3181) node_offset:494:31
      %3183 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:494:12
      %3184 = store(%3183, @Zir.Inst.Ref.zero_usize)
      %3185 = block_inline({
        %3189 = block_inline({
          %3186 = load(%3183) node_offset:494:31
          %3187 = cmp_lt(%3186, %3182) node_offset:494:31
          %3188 = condbr_inline(%3187, {
            %3194 = dbg_block_begin())
            %3195 = elem_val(%3181, %3186)
            %3196 = dbg_var_val(%3195, "Int")
            %3197 = dbg_block_begin())
            %3198 = dbg_stmt(3, 9)
            %3199 = dbg_stmt(3, 21)
            %3200 = decl_val("atomic_rmw_orderings") token_offset:495:21
            %3201 = indexable_ptr_len(%3200) node_offset:495:21
            %3202 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:495:16
            %3203 = store(%3202, @Zir.Inst.Ref.zero_usize)
            %3204 = block_inline({
              %3208 = block_inline({
                %3205 = load(%3202) node_offset:495:21
                %3206 = cmp_lt(%3205, %3201) node_offset:495:21
                %3207 = condbr_inline(%3206, {
                  %3213 = dbg_block_begin())
                  %3214 = elem_val(%3200, %3205)
                  %3215 = dbg_var_val(%3214, "ordering")
                  %3216 = dbg_block_begin())
                  %3217 = dbg_stmt(4, 13)
                  %3218 = alloc_inferred_mut() node_offset:496:13
                  %3219 = decl_val("Atomic") token_offset:496:21
                  %3220 = dbg_stmt(4, 27)
                  %3221 = param_type(%3219, 0)
                  %3222 = call(.auto, %3219, [%3195]) node_offset:496:27
                  %3223 = ref(%3222) token_offset:496:21
                  %3224 = field_call_bind(%3223, "init") node_offset:496:32
                  %3225 = dbg_stmt(4, 37)
                  %3226 = param_type(%3224, 0)
                  %3227 = int(3)
                  %3228 = call(.auto, %3224, [%3227]) node_offset:496:37
                  %3229 = store_to_inferred_ptr(%3218, %3228)
                  %3230 = resolve_inferred_alloc(%3218) node_offset:496:13
                  %3231 = dbg_var_ptr(%3218, "x")
                  %3232 = dbg_stmt(5, 13)
                  %3248 = block({
                    %3233 = decl_ref("testing") token_offset:497:17
                    %3234 = field_call_bind(%3233, "expectEqual") node_offset:497:24
                    %3235 = dbg_stmt(5, 36)
                    %3236 = param_type(%3234, 0)
                    %3237 = field_call_bind(%3218, "fetchAnd") node_offset:497:38
                    %3238 = dbg_stmt(5, 47)
                    %3239 = param_type(%3237, 0)
                    %3240 = int(2)
                    %3241 = param_type(%3237, 1)
                    %3242 = call(.auto, %3237, [%3240, %3214]) node_offset:497:47
                    %3243 = param_type(%3234, 1)
                    %3244 = int(3)
                    %3245 = call(.auto, %3234, [%3242, %3244]) node_offset:497:36
                    %3246 = is_non_err(%3245) node_offset:497:13
                    %3247 = condbr(%3246, {
                      %3249 = err_union_payload_unsafe(%3245) node_offset:497:13
                      %3252 = break(%3248, %3249)
                    }, {
                      %3250 = err_union_code(%3245) node_offset:497:13
                      %3251 = ret_node(%3250) node_offset:497:13
                    }) node_offset:497:13
                  }) node_offset:497:13
                  %3253 = ensure_result_used(%3248) node_offset:497:13
                  %3254 = dbg_stmt(6, 13)
                  %3269 = block({
                    %3255 = decl_ref("testing") token_offset:498:17
                    %3256 = field_call_bind(%3255, "expectEqual") node_offset:498:24
                    %3257 = dbg_stmt(6, 36)
                    %3258 = param_type(%3256, 0)
                    %3259 = field_call_bind(%3218, "load") node_offset:498:38
                    %3260 = dbg_stmt(6, 43)
                    %3261 = param_type(%3259, 0)
                    %3262 = enum_literal("SeqCst") token_offset:498:45
                    %3263 = call(.auto, %3259, [%3262]) node_offset:498:43
                    %3264 = param_type(%3256, 1)
                    %3265 = int(2)
                    %3266 = call(.auto, %3256, [%3263, %3265]) node_offset:498:36
                    %3267 = is_non_err(%3266) node_offset:498:13
                    %3268 = condbr(%3267, {
                      %3270 = err_union_payload_unsafe(%3266) node_offset:498:13
                      %3273 = break(%3269, %3270)
                    }, {
                      %3271 = err_union_code(%3266) node_offset:498:13
                      %3272 = ret_node(%3271) node_offset:498:13
                    }) node_offset:498:13
                  }) node_offset:498:13
                  %3274 = ensure_result_used(%3269) node_offset:498:13
                  %3275 = dbg_stmt(7, 13)
                  %3290 = block({
                    %3276 = decl_ref("testing") token_offset:499:17
                    %3277 = field_call_bind(%3276, "expectEqual") node_offset:499:24
                    %3278 = dbg_stmt(7, 36)
                    %3279 = param_type(%3277, 0)
                    %3280 = field_call_bind(%3218, "fetchAnd") node_offset:499:38
                    %3281 = dbg_stmt(7, 47)
                    %3282 = param_type(%3280, 0)
                    %3283 = param_type(%3280, 1)
                    %3284 = call(.auto, %3280, [@Zir.Inst.Ref.zero, %3214]) node_offset:499:47
                    %3285 = param_type(%3277, 1)
                    %3286 = int(2)
                    %3287 = call(.auto, %3277, [%3284, %3286]) node_offset:499:36
                    %3288 = is_non_err(%3287) node_offset:499:13
                    %3289 = condbr(%3288, {
                      %3291 = err_union_payload_unsafe(%3287) node_offset:499:13
                      %3294 = break(%3290, %3291)
                    }, {
                      %3292 = err_union_code(%3287) node_offset:499:13
                      %3293 = ret_node(%3292) node_offset:499:13
                    }) node_offset:499:13
                  }) node_offset:499:13
                  %3295 = ensure_result_used(%3290) node_offset:499:13
                  %3296 = dbg_stmt(8, 13)
                  %3310 = block({
                    %3297 = decl_ref("testing") token_offset:500:17
                    %3298 = field_call_bind(%3297, "expectEqual") node_offset:500:24
                    %3299 = dbg_stmt(8, 36)
                    %3300 = param_type(%3298, 0)
                    %3301 = field_call_bind(%3218, "load") node_offset:500:38
                    %3302 = dbg_stmt(8, 43)
                    %3303 = param_type(%3301, 0)
                    %3304 = enum_literal("SeqCst") token_offset:500:45
                    %3305 = call(.auto, %3301, [%3304]) node_offset:500:43
                    %3306 = param_type(%3298, 1)
                    %3307 = call(.auto, %3298, [%3305, @Zir.Inst.Ref.zero]) node_offset:500:36
                    %3308 = is_non_err(%3307) node_offset:500:13
                    %3309 = condbr(%3308, {
                      %3311 = err_union_payload_unsafe(%3307) node_offset:500:13
                      %3314 = break(%3310, %3311)
                    }, {
                      %3312 = err_union_code(%3307) node_offset:500:13
                      %3313 = ret_node(%3312) node_offset:500:13
                    }) node_offset:500:13
                  }) node_offset:500:13
                  %3316 = dbg_block_end())
                  %3317 = dbg_block_end())
                  %3315 = ensure_result_used(%3310) node_offset:500:13
                  %3318 = break_inline(%3208, @Zir.Inst.Ref.void_value)
                }, {
                  %3319 = break_inline(%3204, @Zir.Inst.Ref.void_value)
                }) node_offset:495:16
              }) node_offset:495:16
              %3209 = load(%3202) node_offset:495:21
              %3210 = add(%3209, @Zir.Inst.Ref.one_usize) node_offset:495:16
              %3211 = store(%3202, %3210)
              %3212 = repeat_inline() node_offset:495:16
            }) node_offset:495:16
            %3321 = dbg_block_end())
            %3322 = dbg_block_end())
            %3320 = ensure_result_used(%3204) node_offset:495:16
            %3323 = break_inline(%3189, @Zir.Inst.Ref.void_value)
          }, {
            %3324 = break_inline(%3185, @Zir.Inst.Ref.void_value)
          }) node_offset:494:12
        }) node_offset:494:12
        %3190 = load(%3183) node_offset:494:31
        %3191 = add(%3190, @Zir.Inst.Ref.one_usize) node_offset:494:12
        %3192 = store(%3183, %3191)
        %3193 = repeat_inline() node_offset:494:12
      }) node_offset:494:12
      %3326 = dbg_block_end())
      %3325 = ensure_result_used(%3185) node_offset:494:12
      %3327 = ret_tok(@Zir.Inst.Ref.void_value) token_offset:503:1
    }) (lbrace=1:24,rbrace=11:1) node_offset:493:1
    %3329 = break_inline(%3175, %3328)
  }) node_offset:493:1
  [8551] test "@"Atomic.fetchNand"" line(504) hash(c009b8858a245ba436955f2561754cc4): %3330 = block_inline({
    %3489 = func_extended(test, ret_ty=void, inferror, body={
      %3331 = dbg_block_begin())
      %3332 = dbg_stmt(2, 5)
      %3333 = dbg_stmt(2, 17)
      %3334 = decl_val("atomicIntTypes") token_offset:506:17
      %3335 = dbg_stmt(2, 31)
      %3336 = call(.auto, %3334, []) node_offset:506:31
      %3337 = indexable_ptr_len(%3336) node_offset:506:31
      %3338 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:506:12
      %3339 = store(%3338, @Zir.Inst.Ref.zero_usize)
      %3340 = block_inline({
        %3344 = block_inline({
          %3341 = load(%3338) node_offset:506:31
          %3342 = cmp_lt(%3341, %3337) node_offset:506:31
          %3343 = condbr_inline(%3342, {
            %3349 = dbg_block_begin())
            %3350 = elem_val(%3336, %3341)
            %3351 = dbg_var_val(%3350, "Int")
            %3352 = dbg_block_begin())
            %3353 = dbg_stmt(3, 9)
            %3354 = dbg_stmt(3, 21)
            %3355 = decl_val("atomic_rmw_orderings") token_offset:507:21
            %3356 = indexable_ptr_len(%3355) node_offset:507:21
            %3357 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:507:16
            %3358 = store(%3357, @Zir.Inst.Ref.zero_usize)
            %3359 = block_inline({
              %3363 = block_inline({
                %3360 = load(%3357) node_offset:507:21
                %3361 = cmp_lt(%3360, %3356) node_offset:507:21
                %3362 = condbr_inline(%3361, {
                  %3368 = dbg_block_begin())
                  %3369 = elem_val(%3355, %3360)
                  %3370 = dbg_var_val(%3369, "ordering")
                  %3371 = dbg_block_begin())
                  %3372 = dbg_stmt(4, 13)
                  %3373 = alloc_inferred_mut() node_offset:508:13
                  %3374 = decl_val("Atomic") token_offset:508:21
                  %3375 = dbg_stmt(4, 27)
                  %3376 = param_type(%3374, 0)
                  %3377 = call(.auto, %3374, [%3350]) node_offset:508:27
                  %3378 = ref(%3377) token_offset:508:21
                  %3379 = field_call_bind(%3378, "init") node_offset:508:32
                  %3380 = dbg_stmt(4, 37)
                  %3381 = param_type(%3379, 0)
                  %3382 = int(3)
                  %3383 = call(.auto, %3379, [%3382]) node_offset:508:37
                  %3384 = store_to_inferred_ptr(%3373, %3383)
                  %3385 = resolve_inferred_alloc(%3373) node_offset:508:13
                  %3386 = dbg_var_ptr(%3373, "x")
                  %3387 = dbg_stmt(5, 13)
                  %3403 = block({
                    %3388 = decl_ref("testing") token_offset:509:17
                    %3389 = field_call_bind(%3388, "expectEqual") node_offset:509:24
                    %3390 = dbg_stmt(5, 36)
                    %3391 = param_type(%3389, 0)
                    %3392 = field_call_bind(%3373, "fetchNand") node_offset:509:38
                    %3393 = dbg_stmt(5, 48)
                    %3394 = param_type(%3392, 0)
                    %3395 = int(2)
                    %3396 = param_type(%3392, 1)
                    %3397 = call(.auto, %3392, [%3395, %3369]) node_offset:509:48
                    %3398 = param_type(%3389, 1)
                    %3399 = int(3)
                    %3400 = call(.auto, %3389, [%3397, %3399]) node_offset:509:36
                    %3401 = is_non_err(%3400) node_offset:509:13
                    %3402 = condbr(%3401, {
                      %3404 = err_union_payload_unsafe(%3400) node_offset:509:13
                      %3407 = break(%3403, %3404)
                    }, {
                      %3405 = err_union_code(%3400) node_offset:509:13
                      %3406 = ret_node(%3405) node_offset:509:13
                    }) node_offset:509:13
                  }) node_offset:509:13
                  %3408 = ensure_result_used(%3403) node_offset:509:13
                  %3409 = dbg_stmt(6, 13)
                  %3426 = block({
                    %3410 = decl_ref("testing") token_offset:510:17
                    %3411 = field_call_bind(%3410, "expectEqual") node_offset:510:24
                    %3412 = dbg_stmt(6, 36)
                    %3413 = param_type(%3411, 0)
                    %3414 = field_call_bind(%3373, "load") node_offset:510:38
                    %3415 = dbg_stmt(6, 43)
                    %3416 = param_type(%3414, 0)
                    %3417 = enum_literal("SeqCst") token_offset:510:45
                    %3418 = call(.auto, %3414, [%3417]) node_offset:510:43
                    %3419 = param_type(%3411, 1)
                    %3420 = int(2)
                    %3421 = as_node(%3350, %3420) node_offset:510:64
                    %3422 = bit_not(%3421) node_offset:510:54
                    %3423 = call(.auto, %3411, [%3418, %3422]) node_offset:510:36
                    %3424 = is_non_err(%3423) node_offset:510:13
                    %3425 = condbr(%3424, {
                      %3427 = err_union_payload_unsafe(%3423) node_offset:510:13
                      %3430 = break(%3426, %3427)
                    }, {
                      %3428 = err_union_code(%3423) node_offset:510:13
                      %3429 = ret_node(%3428) node_offset:510:13
                    }) node_offset:510:13
                  }) node_offset:510:13
                  %3431 = ensure_result_used(%3426) node_offset:510:13
                  %3432 = dbg_stmt(7, 13)
                  %3449 = block({
                    %3433 = decl_ref("testing") token_offset:511:17
                    %3434 = field_call_bind(%3433, "expectEqual") node_offset:511:24
                    %3435 = dbg_stmt(7, 36)
                    %3436 = param_type(%3434, 0)
                    %3437 = field_call_bind(%3373, "fetchNand") node_offset:511:38
                    %3438 = dbg_stmt(7, 48)
                    %3439 = param_type(%3437, 0)
                    %3440 = param_type(%3437, 1)
                    %3441 = call(.auto, %3437, [@Zir.Inst.Ref.zero, %3369]) node_offset:511:48
                    %3442 = param_type(%3434, 1)
                    %3443 = int(2)
                    %3444 = as_node(%3350, %3443) node_offset:511:76
                    %3445 = bit_not(%3444) node_offset:511:66
                    %3446 = call(.auto, %3434, [%3441, %3445]) node_offset:511:36
                    %3447 = is_non_err(%3446) node_offset:511:13
                    %3448 = condbr(%3447, {
                      %3450 = err_union_payload_unsafe(%3446) node_offset:511:13
                      %3453 = break(%3449, %3450)
                    }, {
                      %3451 = err_union_code(%3446) node_offset:511:13
                      %3452 = ret_node(%3451) node_offset:511:13
                    }) node_offset:511:13
                  }) node_offset:511:13
                  %3454 = ensure_result_used(%3449) node_offset:511:13
                  %3455 = dbg_stmt(8, 13)
                  %3471 = block({
                    %3456 = decl_ref("testing") token_offset:512:17
                    %3457 = field_call_bind(%3456, "expectEqual") node_offset:512:24
                    %3458 = dbg_stmt(8, 36)
                    %3459 = param_type(%3457, 0)
                    %3460 = field_call_bind(%3373, "load") node_offset:512:38
                    %3461 = dbg_stmt(8, 43)
                    %3462 = param_type(%3460, 0)
                    %3463 = enum_literal("SeqCst") token_offset:512:45
                    %3464 = call(.auto, %3460, [%3463]) node_offset:512:43
                    %3465 = param_type(%3457, 1)
                    %3466 = as_node(%3350, @Zir.Inst.Ref.zero) node_offset:512:64
                    %3467 = bit_not(%3466) node_offset:512:54
                    %3468 = call(.auto, %3457, [%3464, %3467]) node_offset:512:36
                    %3469 = is_non_err(%3468) node_offset:512:13
                    %3470 = condbr(%3469, {
                      %3472 = err_union_payload_unsafe(%3468) node_offset:512:13
                      %3475 = break(%3471, %3472)
                    }, {
                      %3473 = err_union_code(%3468) node_offset:512:13
                      %3474 = ret_node(%3473) node_offset:512:13
                    }) node_offset:512:13
                  }) node_offset:512:13
                  %3477 = dbg_block_end())
                  %3478 = dbg_block_end())
                  %3476 = ensure_result_used(%3471) node_offset:512:13
                  %3479 = break_inline(%3363, @Zir.Inst.Ref.void_value)
                }, {
                  %3480 = break_inline(%3359, @Zir.Inst.Ref.void_value)
                }) node_offset:507:16
              }) node_offset:507:16
              %3364 = load(%3357) node_offset:507:21
              %3365 = add(%3364, @Zir.Inst.Ref.one_usize) node_offset:507:16
              %3366 = store(%3357, %3365)
              %3367 = repeat_inline() node_offset:507:16
            }) node_offset:507:16
            %3482 = dbg_block_end())
            %3483 = dbg_block_end())
            %3481 = ensure_result_used(%3359) node_offset:507:16
            %3484 = break_inline(%3344, @Zir.Inst.Ref.void_value)
          }, {
            %3485 = break_inline(%3340, @Zir.Inst.Ref.void_value)
          }) node_offset:506:12
        }) node_offset:506:12
        %3345 = load(%3338) node_offset:506:31
        %3346 = add(%3345, @Zir.Inst.Ref.one_usize) node_offset:506:12
        %3347 = store(%3338, %3346)
        %3348 = repeat_inline() node_offset:506:12
      }) node_offset:506:12
      %3487 = dbg_block_end())
      %3486 = ensure_result_used(%3340) node_offset:506:12
      %3488 = ret_tok(@Zir.Inst.Ref.void_value) token_offset:515:1
    }) (lbrace=1:25,rbrace=11:1) node_offset:505:1
    %3490 = break_inline(%3330, %3489)
  }) node_offset:505:1
  [8559] test "@"Atomic.fetchOr"" line(516) hash(8eb621e7efd7c4f29c9bf6525e15b64b): %3491 = block_inline({
    %3646 = func_extended(test, ret_ty=void, inferror, body={
      %3492 = dbg_block_begin())
      %3493 = dbg_stmt(2, 5)
      %3494 = dbg_stmt(2, 17)
      %3495 = decl_val("atomicIntTypes") token_offset:518:17
      %3496 = dbg_stmt(2, 31)
      %3497 = call(.auto, %3495, []) node_offset:518:31
      %3498 = indexable_ptr_len(%3497) node_offset:518:31
      %3499 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:518:12
      %3500 = store(%3499, @Zir.Inst.Ref.zero_usize)
      %3501 = block_inline({
        %3505 = block_inline({
          %3502 = load(%3499) node_offset:518:31
          %3503 = cmp_lt(%3502, %3498) node_offset:518:31
          %3504 = condbr_inline(%3503, {
            %3510 = dbg_block_begin())
            %3511 = elem_val(%3497, %3502)
            %3512 = dbg_var_val(%3511, "Int")
            %3513 = dbg_block_begin())
            %3514 = dbg_stmt(3, 9)
            %3515 = dbg_stmt(3, 21)
            %3516 = decl_val("atomic_rmw_orderings") token_offset:519:21
            %3517 = indexable_ptr_len(%3516) node_offset:519:21
            %3518 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:519:16
            %3519 = store(%3518, @Zir.Inst.Ref.zero_usize)
            %3520 = block_inline({
              %3524 = block_inline({
                %3521 = load(%3518) node_offset:519:21
                %3522 = cmp_lt(%3521, %3517) node_offset:519:21
                %3523 = condbr_inline(%3522, {
                  %3529 = dbg_block_begin())
                  %3530 = elem_val(%3516, %3521)
                  %3531 = dbg_var_val(%3530, "ordering")
                  %3532 = dbg_block_begin())
                  %3533 = dbg_stmt(4, 13)
                  %3534 = alloc_inferred_mut() node_offset:520:13
                  %3535 = decl_val("Atomic") token_offset:520:21
                  %3536 = dbg_stmt(4, 27)
                  %3537 = param_type(%3535, 0)
                  %3538 = call(.auto, %3535, [%3511]) node_offset:520:27
                  %3539 = ref(%3538) token_offset:520:21
                  %3540 = field_call_bind(%3539, "init") node_offset:520:32
                  %3541 = dbg_stmt(4, 37)
                  %3542 = param_type(%3540, 0)
                  %3543 = int(3)
                  %3544 = call(.auto, %3540, [%3543]) node_offset:520:37
                  %3545 = store_to_inferred_ptr(%3534, %3544)
                  %3546 = resolve_inferred_alloc(%3534) node_offset:520:13
                  %3547 = dbg_var_ptr(%3534, "x")
                  %3548 = dbg_stmt(5, 13)
                  %3564 = block({
                    %3549 = decl_ref("testing") token_offset:521:17
                    %3550 = field_call_bind(%3549, "expectEqual") node_offset:521:24
                    %3551 = dbg_stmt(5, 36)
                    %3552 = param_type(%3550, 0)
                    %3553 = field_call_bind(%3534, "fetchOr") node_offset:521:38
                    %3554 = dbg_stmt(5, 46)
                    %3555 = param_type(%3553, 0)
                    %3556 = int(4)
                    %3557 = param_type(%3553, 1)
                    %3558 = call(.auto, %3553, [%3556, %3530]) node_offset:521:46
                    %3559 = param_type(%3550, 1)
                    %3560 = int(3)
                    %3561 = call(.auto, %3550, [%3558, %3560]) node_offset:521:36
                    %3562 = is_non_err(%3561) node_offset:521:13
                    %3563 = condbr(%3562, {
                      %3565 = err_union_payload_unsafe(%3561) node_offset:521:13
                      %3568 = break(%3564, %3565)
                    }, {
                      %3566 = err_union_code(%3561) node_offset:521:13
                      %3567 = ret_node(%3566) node_offset:521:13
                    }) node_offset:521:13
                  }) node_offset:521:13
                  %3569 = ensure_result_used(%3564) node_offset:521:13
                  %3570 = dbg_stmt(6, 13)
                  %3585 = block({
                    %3571 = decl_ref("testing") token_offset:522:17
                    %3572 = field_call_bind(%3571, "expectEqual") node_offset:522:24
                    %3573 = dbg_stmt(6, 36)
                    %3574 = param_type(%3572, 0)
                    %3575 = field_call_bind(%3534, "load") node_offset:522:38
                    %3576 = dbg_stmt(6, 43)
                    %3577 = param_type(%3575, 0)
                    %3578 = enum_literal("SeqCst") token_offset:522:45
                    %3579 = call(.auto, %3575, [%3578]) node_offset:522:43
                    %3580 = param_type(%3572, 1)
                    %3581 = int(7)
                    %3582 = call(.auto, %3572, [%3579, %3581]) node_offset:522:36
                    %3583 = is_non_err(%3582) node_offset:522:13
                    %3584 = condbr(%3583, {
                      %3586 = err_union_payload_unsafe(%3582) node_offset:522:13
                      %3589 = break(%3585, %3586)
                    }, {
                      %3587 = err_union_code(%3582) node_offset:522:13
                      %3588 = ret_node(%3587) node_offset:522:13
                    }) node_offset:522:13
                  }) node_offset:522:13
                  %3590 = ensure_result_used(%3585) node_offset:522:13
                  %3591 = dbg_stmt(7, 13)
                  %3607 = block({
                    %3592 = decl_ref("testing") token_offset:523:17
                    %3593 = field_call_bind(%3592, "expectEqual") node_offset:523:24
                    %3594 = dbg_stmt(7, 36)
                    %3595 = param_type(%3593, 0)
                    %3596 = field_call_bind(%3534, "fetchOr") node_offset:523:38
                    %3597 = dbg_stmt(7, 46)
                    %3598 = param_type(%3596, 0)
                    %3599 = int(2)
                    %3600 = param_type(%3596, 1)
                    %3601 = call(.auto, %3596, [%3599, %3530]) node_offset:523:46
                    %3602 = param_type(%3593, 1)
                    %3603 = int(7)
                    %3604 = call(.auto, %3593, [%3601, %3603]) node_offset:523:36
                    %3605 = is_non_err(%3604) node_offset:523:13
                    %3606 = condbr(%3605, {
                      %3608 = err_union_payload_unsafe(%3604) node_offset:523:13
                      %3611 = break(%3607, %3608)
                    }, {
                      %3609 = err_union_code(%3604) node_offset:523:13
                      %3610 = ret_node(%3609) node_offset:523:13
                    }) node_offset:523:13
                  }) node_offset:523:13
                  %3612 = ensure_result_used(%3607) node_offset:523:13
                  %3613 = dbg_stmt(8, 13)
                  %3628 = block({
                    %3614 = decl_ref("testing") token_offset:524:17
                    %3615 = field_call_bind(%3614, "expectEqual") node_offset:524:24
                    %3616 = dbg_stmt(8, 36)
                    %3617 = param_type(%3615, 0)
                    %3618 = field_call_bind(%3534, "load") node_offset:524:38
                    %3619 = dbg_stmt(8, 43)
                    %3620 = param_type(%3618, 0)
                    %3621 = enum_literal("SeqCst") token_offset:524:45
                    %3622 = call(.auto, %3618, [%3621]) node_offset:524:43
                    %3623 = param_type(%3615, 1)
                    %3624 = int(7)
                    %3625 = call(.auto, %3615, [%3622, %3624]) node_offset:524:36
                    %3626 = is_non_err(%3625) node_offset:524:13
                    %3627 = condbr(%3626, {
                      %3629 = err_union_payload_unsafe(%3625) node_offset:524:13
                      %3632 = break(%3628, %3629)
                    }, {
                      %3630 = err_union_code(%3625) node_offset:524:13
                      %3631 = ret_node(%3630) node_offset:524:13
                    }) node_offset:524:13
                  }) node_offset:524:13
                  %3634 = dbg_block_end())
                  %3635 = dbg_block_end())
                  %3633 = ensure_result_used(%3628) node_offset:524:13
                  %3636 = break_inline(%3524, @Zir.Inst.Ref.void_value)
                }, {
                  %3637 = break_inline(%3520, @Zir.Inst.Ref.void_value)
                }) node_offset:519:16
              }) node_offset:519:16
              %3525 = load(%3518) node_offset:519:21
              %3526 = add(%3525, @Zir.Inst.Ref.one_usize) node_offset:519:16
              %3527 = store(%3518, %3526)
              %3528 = repeat_inline() node_offset:519:16
            }) node_offset:519:16
            %3639 = dbg_block_end())
            %3640 = dbg_block_end())
            %3638 = ensure_result_used(%3520) node_offset:519:16
            %3641 = break_inline(%3505, @Zir.Inst.Ref.void_value)
          }, {
            %3642 = break_inline(%3501, @Zir.Inst.Ref.void_value)
          }) node_offset:518:12
        }) node_offset:518:12
        %3506 = load(%3499) node_offset:518:31
        %3507 = add(%3506, @Zir.Inst.Ref.one_usize) node_offset:518:12
        %3508 = store(%3499, %3507)
        %3509 = repeat_inline() node_offset:518:12
      }) node_offset:518:12
      %3644 = dbg_block_end())
      %3643 = ensure_result_used(%3501) node_offset:518:12
      %3645 = ret_tok(@Zir.Inst.Ref.void_value) token_offset:527:1
    }) (lbrace=1:23,rbrace=11:1) node_offset:517:1
    %3647 = break_inline(%3491, %3646)
  }) node_offset:517:1
  [8567] test "@"Atomic.fetchXor"" line(528) hash(310f86f3da6a14aeddb2cc20d9c7e1c5): %3648 = block_inline({
    %3799 = func_extended(test, ret_ty=void, inferror, body={
      %3649 = dbg_block_begin())
      %3650 = dbg_stmt(2, 5)
      %3651 = dbg_stmt(2, 17)
      %3652 = decl_val("atomicIntTypes") token_offset:530:17
      %3653 = dbg_stmt(2, 31)
      %3654 = call(.auto, %3652, []) node_offset:530:31
      %3655 = indexable_ptr_len(%3654) node_offset:530:31
      %3656 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:530:12
      %3657 = store(%3656, @Zir.Inst.Ref.zero_usize)
      %3658 = block_inline({
        %3662 = block_inline({
          %3659 = load(%3656) node_offset:530:31
          %3660 = cmp_lt(%3659, %3655) node_offset:530:31
          %3661 = condbr_inline(%3660, {
            %3667 = dbg_block_begin())
            %3668 = elem_val(%3654, %3659)
            %3669 = dbg_var_val(%3668, "Int")
            %3670 = dbg_block_begin())
            %3671 = dbg_stmt(3, 9)
            %3672 = dbg_stmt(3, 21)
            %3673 = decl_val("atomic_rmw_orderings") token_offset:531:21
            %3674 = indexable_ptr_len(%3673) node_offset:531:21
            %3675 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:531:16
            %3676 = store(%3675, @Zir.Inst.Ref.zero_usize)
            %3677 = block_inline({
              %3681 = block_inline({
                %3678 = load(%3675) node_offset:531:21
                %3679 = cmp_lt(%3678, %3674) node_offset:531:21
                %3680 = condbr_inline(%3679, {
                  %3686 = dbg_block_begin())
                  %3687 = elem_val(%3673, %3678)
                  %3688 = dbg_var_val(%3687, "ordering")
                  %3689 = dbg_block_begin())
                  %3690 = dbg_stmt(4, 13)
                  %3691 = alloc_inferred_mut() node_offset:532:13
                  %3692 = decl_val("Atomic") token_offset:532:21
                  %3693 = dbg_stmt(4, 27)
                  %3694 = param_type(%3692, 0)
                  %3695 = call(.auto, %3692, [%3668]) node_offset:532:27
                  %3696 = ref(%3695) token_offset:532:21
                  %3697 = field_call_bind(%3696, "init") node_offset:532:32
                  %3698 = dbg_stmt(4, 37)
                  %3699 = param_type(%3697, 0)
                  %3700 = int(3)
                  %3701 = call(.auto, %3697, [%3700]) node_offset:532:37
                  %3702 = store_to_inferred_ptr(%3691, %3701)
                  %3703 = resolve_inferred_alloc(%3691) node_offset:532:13
                  %3704 = dbg_var_ptr(%3691, "x")
                  %3705 = dbg_stmt(5, 13)
                  %3721 = block({
                    %3706 = decl_ref("testing") token_offset:533:17
                    %3707 = field_call_bind(%3706, "expectEqual") node_offset:533:24
                    %3708 = dbg_stmt(5, 36)
                    %3709 = param_type(%3707, 0)
                    %3710 = field_call_bind(%3691, "fetchXor") node_offset:533:38
                    %3711 = dbg_stmt(5, 47)
                    %3712 = param_type(%3710, 0)
                    %3713 = int(2)
                    %3714 = param_type(%3710, 1)
                    %3715 = call(.auto, %3710, [%3713, %3687]) node_offset:533:47
                    %3716 = param_type(%3707, 1)
                    %3717 = int(3)
                    %3718 = call(.auto, %3707, [%3715, %3717]) node_offset:533:36
                    %3719 = is_non_err(%3718) node_offset:533:13
                    %3720 = condbr(%3719, {
                      %3722 = err_union_payload_unsafe(%3718) node_offset:533:13
                      %3725 = break(%3721, %3722)
                    }, {
                      %3723 = err_union_code(%3718) node_offset:533:13
                      %3724 = ret_node(%3723) node_offset:533:13
                    }) node_offset:533:13
                  }) node_offset:533:13
                  %3726 = ensure_result_used(%3721) node_offset:533:13
                  %3727 = dbg_stmt(6, 13)
                  %3741 = block({
                    %3728 = decl_ref("testing") token_offset:534:17
                    %3729 = field_call_bind(%3728, "expectEqual") node_offset:534:24
                    %3730 = dbg_stmt(6, 36)
                    %3731 = param_type(%3729, 0)
                    %3732 = field_call_bind(%3691, "load") node_offset:534:38
                    %3733 = dbg_stmt(6, 43)
                    %3734 = param_type(%3732, 0)
                    %3735 = enum_literal("SeqCst") token_offset:534:45
                    %3736 = call(.auto, %3732, [%3735]) node_offset:534:43
                    %3737 = param_type(%3729, 1)
                    %3738 = call(.auto, %3729, [%3736, @Zir.Inst.Ref.one]) node_offset:534:36
                    %3739 = is_non_err(%3738) node_offset:534:13
                    %3740 = condbr(%3739, {
                      %3742 = err_union_payload_unsafe(%3738) node_offset:534:13
                      %3745 = break(%3741, %3742)
                    }, {
                      %3743 = err_union_code(%3738) node_offset:534:13
                      %3744 = ret_node(%3743) node_offset:534:13
                    }) node_offset:534:13
                  }) node_offset:534:13
                  %3746 = ensure_result_used(%3741) node_offset:534:13
                  %3747 = dbg_stmt(7, 13)
                  %3761 = block({
                    %3748 = decl_ref("testing") token_offset:535:17
                    %3749 = field_call_bind(%3748, "expectEqual") node_offset:535:24
                    %3750 = dbg_stmt(7, 36)
                    %3751 = param_type(%3749, 0)
                    %3752 = field_call_bind(%3691, "fetchXor") node_offset:535:38
                    %3753 = dbg_stmt(7, 47)
                    %3754 = param_type(%3752, 0)
                    %3755 = param_type(%3752, 1)
                    %3756 = call(.auto, %3752, [@Zir.Inst.Ref.one, %3687]) node_offset:535:47
                    %3757 = param_type(%3749, 1)
                    %3758 = call(.auto, %3749, [%3756, @Zir.Inst.Ref.one]) node_offset:535:36
                    %3759 = is_non_err(%3758) node_offset:535:13
                    %3760 = condbr(%3759, {
                      %3762 = err_union_payload_unsafe(%3758) node_offset:535:13
                      %3765 = break(%3761, %3762)
                    }, {
                      %3763 = err_union_code(%3758) node_offset:535:13
                      %3764 = ret_node(%3763) node_offset:535:13
                    }) node_offset:535:13
                  }) node_offset:535:13
                  %3766 = ensure_result_used(%3761) node_offset:535:13
                  %3767 = dbg_stmt(8, 13)
                  %3781 = block({
                    %3768 = decl_ref("testing") token_offset:536:17
                    %3769 = field_call_bind(%3768, "expectEqual") node_offset:536:24
                    %3770 = dbg_stmt(8, 36)
                    %3771 = param_type(%3769, 0)
                    %3772 = field_call_bind(%3691, "load") node_offset:536:38
                    %3773 = dbg_stmt(8, 43)
                    %3774 = param_type(%3772, 0)
                    %3775 = enum_literal("SeqCst") token_offset:536:45
                    %3776 = call(.auto, %3772, [%3775]) node_offset:536:43
                    %3777 = param_type(%3769, 1)
                    %3778 = call(.auto, %3769, [%3776, @Zir.Inst.Ref.zero]) node_offset:536:36
                    %3779 = is_non_err(%3778) node_offset:536:13
                    %3780 = condbr(%3779, {
                      %3782 = err_union_payload_unsafe(%3778) node_offset:536:13
                      %3785 = break(%3781, %3782)
                    }, {
                      %3783 = err_union_code(%3778) node_offset:536:13
                      %3784 = ret_node(%3783) node_offset:536:13
                    }) node_offset:536:13
                  }) node_offset:536:13
                  %3787 = dbg_block_end())
                  %3788 = dbg_block_end())
                  %3786 = ensure_result_used(%3781) node_offset:536:13
                  %3789 = break_inline(%3681, @Zir.Inst.Ref.void_value)
                }, {
                  %3790 = break_inline(%3677, @Zir.Inst.Ref.void_value)
                }) node_offset:531:16
              }) node_offset:531:16
              %3682 = load(%3675) node_offset:531:21
              %3683 = add(%3682, @Zir.Inst.Ref.one_usize) node_offset:531:16
              %3684 = store(%3675, %3683)
              %3685 = repeat_inline() node_offset:531:16
            }) node_offset:531:16
            %3792 = dbg_block_end())
            %3793 = dbg_block_end())
            %3791 = ensure_result_used(%3677) node_offset:531:16
            %3794 = break_inline(%3662, @Zir.Inst.Ref.void_value)
          }, {
            %3795 = break_inline(%3658, @Zir.Inst.Ref.void_value)
          }) node_offset:530:12
        }) node_offset:530:12
        %3663 = load(%3656) node_offset:530:31
        %3664 = add(%3663, @Zir.Inst.Ref.one_usize) node_offset:530:12
        %3665 = store(%3656, %3664)
        %3666 = repeat_inline() node_offset:530:12
      }) node_offset:530:12
      %3797 = dbg_block_end())
      %3796 = ensure_result_used(%3658) node_offset:530:12
      %3798 = ret_tok(@Zir.Inst.Ref.void_value) token_offset:539:1
    }) (lbrace=1:24,rbrace=11:1) node_offset:529:1
    %3800 = break_inline(%3648, %3799)
  }) node_offset:529:1
  [8575] test "@"Atomic.bitSet"" line(540) hash(0ded9a01ccca3bea525162498f3f55ba): %3801 = block_inline({
    %4077 = func_extended(test, ret_ty=void, inferror, body={
      %3802 = dbg_block_begin())
      %3803 = dbg_stmt(2, 5)
      %3804 = dbg_stmt(2, 17)
      %3805 = decl_val("atomicIntTypes") token_offset:542:17
      %3806 = dbg_stmt(2, 31)
      %3807 = call(.auto, %3805, []) node_offset:542:31
      %3808 = indexable_ptr_len(%3807) node_offset:542:31
      %3809 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:542:12
      %3810 = store(%3809, @Zir.Inst.Ref.zero_usize)
      %3811 = block_inline({
        %3815 = block_inline({
          %3812 = load(%3809) node_offset:542:31
          %3813 = cmp_lt(%3812, %3808) node_offset:542:31
          %3814 = condbr_inline(%3813, {
            %3820 = dbg_block_begin())
            %3821 = elem_val(%3807, %3812)
            %3822 = dbg_var_val(%3821, "Int")
            %3823 = dbg_block_begin())
            %3824 = dbg_stmt(3, 9)
            %3825 = dbg_stmt(3, 21)
            %3826 = decl_val("atomic_rmw_orderings") token_offset:543:21
            %3827 = indexable_ptr_len(%3826) node_offset:543:21
            %3828 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:543:16
            %3829 = store(%3828, @Zir.Inst.Ref.zero_usize)
            %3830 = block_inline({
              %3834 = block_inline({
                %3831 = load(%3828) node_offset:543:21
                %3832 = cmp_lt(%3831, %3827) node_offset:543:21
                %3833 = condbr_inline(%3832, {
                  %3839 = dbg_block_begin())
                  %3840 = elem_val(%3826, %3831)
                  %3841 = dbg_var_val(%3840, "ordering")
                  %3842 = dbg_block_begin())
                  %3843 = dbg_stmt(4, 13)
                  %3844 = alloc_inferred_mut() node_offset:544:13
                  %3845 = decl_val("Atomic") token_offset:544:21
                  %3846 = dbg_stmt(4, 27)
                  %3847 = param_type(%3845, 0)
                  %3848 = call(.auto, %3845, [%3821]) node_offset:544:27
                  %3849 = ref(%3848) token_offset:544:21
                  %3850 = field_call_bind(%3849, "init") node_offset:544:32
                  %3851 = dbg_stmt(4, 37)
                  %3852 = param_type(%3850, 0)
                  %3853 = call(.auto, %3850, [@Zir.Inst.Ref.zero]) node_offset:544:37
                  %3854 = store_to_inferred_ptr(%3844, %3853)
                  %3855 = resolve_inferred_alloc(%3844) node_offset:544:13
                  %3856 = dbg_var_ptr(%3844, "x")
                  %3857 = dbg_stmt(5, 13)
                  %3858 = bit_size_of(%3821) node_offset:545:36
                  %3859 = array_type(%3858, @Zir.Inst.Ref.void_type)
                  %3860 = as_node(%3859, @Zir.Inst.Ref.undef) node_offset:545:58
                  %3861 = dbg_var_val(%3860, "bit_array")
                  %3862 = dbg_stmt(7, 13)
                  %3863 = dbg_stmt(7, 18)
                  %3864 = indexable_ptr_len(%3860) node_offset:547:18
                  %3865 = alloc(@Zir.Inst.Ref.usize_type) node_offset:547:13
                  %3866 = store(%3865, @Zir.Inst.Ref.zero_usize)
                  %3867 = loop({
                    %3871 = block({
                      %3868 = load(%3865) node_offset:547:18
                      %3869 = cmp_lt(%3868, %3864) node_offset:547:18
                      %3870 = condbr(%3869, {
                        %3876 = dbg_block_begin())
                        %3877 = dbg_var_val(%3865, "bit_index")
                        %3878 = dbg_block_begin())
                        %3879 = dbg_stmt(8, 17)
                        %3880 = decl_ref("std") token_offset:548:38
                        %3881 = field_ptr(%3880, "math") node_offset:548:41
                        %3882 = field_call_bind(%3881, "Log2Int") node_offset:548:46
                        %3883 = dbg_stmt(8, 54)
                        %3884 = param_type(%3882, 0)
                        %3885 = call(.compile_time, %3882, [%3821]) node_offset:548:54
                        %3886 = load(%3865) node_offset:548:61
                        %3887 = int_cast(%3885, %3886) node_offset:548:29
                        %3888 = dbg_var_val(%3887, "bit")
                        %3889 = dbg_stmt(9, 17)
                        %3890 = as_node(%3821, @Zir.Inst.Ref.one) node_offset:549:39
                        %3891 = typeof_log2_int_type(%3890) node_offset:549:30
                        %3892 = as_node(%3891, %3887) node_offset:549:45
                        %3893 = shl(%3890, %3892) node_offset:549:42
                        %3894 = dbg_var_val(%3893, "mask")
                        %3895 = dbg_stmt(12, 17)
                        %3910 = block({
                          %3896 = decl_ref("testing") token_offset:552:21
                          %3897 = field_call_bind(%3896, "expect") node_offset:552:28
                          %3898 = dbg_stmt(12, 35)
                          %3899 = param_type(%3897, 0)
                          %3900 = field_call_bind(%3844, "load") node_offset:552:37
                          %3901 = dbg_stmt(12, 42)
                          %3902 = param_type(%3900, 0)
                          %3903 = enum_literal("SeqCst") token_offset:552:44
                          %3904 = call(.auto, %3900, [%3903]) node_offset:552:42
                          %3905 = bit_and(%3904, %3893) node_offset:552:52
                          %3906 = cmp_eq(%3905, @Zir.Inst.Ref.zero) node_offset:552:59
                          %3907 = call(.auto, %3897, [%3906]) node_offset:552:35
                          %3908 = is_non_err(%3907) node_offset:552:17
                          %3909 = condbr(%3908, {
                            %3911 = err_union_payload_unsafe(%3907) node_offset:552:17
                            %3914 = break(%3910, %3911)
                          }, {
                            %3912 = err_union_code(%3907) node_offset:552:17
                            %3913 = ret_node(%3912) node_offset:552:17
                          }) node_offset:552:17
                        }) node_offset:552:17
                        %3915 = ensure_result_used(%3910) node_offset:552:17
                        %3916 = dbg_stmt(13, 17)
                        %3930 = block({
                          %3917 = decl_ref("testing") token_offset:553:21
                          %3918 = field_call_bind(%3917, "expectEqual") node_offset:553:28
                          %3919 = dbg_stmt(13, 40)
                          %3920 = param_type(%3918, 0)
                          %3921 = field_call_bind(%3844, "bitSet") node_offset:553:42
                          %3922 = dbg_stmt(13, 49)
                          %3923 = param_type(%3921, 0)
                          %3924 = param_type(%3921, 1)
                          %3925 = call(.auto, %3921, [%3887, %3840]) node_offset:553:49
                          %3926 = param_type(%3918, 1)
                          %3927 = call(.auto, %3918, [%3925, @Zir.Inst.Ref.zero]) node_offset:553:40
                          %3928 = is_non_err(%3927) node_offset:553:17
                          %3929 = condbr(%3928, {
                            %3931 = err_union_payload_unsafe(%3927) node_offset:553:17
                            %3934 = break(%3930, %3931)
                          }, {
                            %3932 = err_union_code(%3927) node_offset:553:17
                            %3933 = ret_node(%3932) node_offset:553:17
                          }) node_offset:553:17
                        }) node_offset:553:17
                        %3935 = ensure_result_used(%3930) node_offset:553:17
                        %3936 = dbg_stmt(14, 17)
                        %3951 = block({
                          %3937 = decl_ref("testing") token_offset:554:21
                          %3938 = field_call_bind(%3937, "expect") node_offset:554:28
                          %3939 = dbg_stmt(14, 35)
                          %3940 = param_type(%3938, 0)
                          %3941 = field_call_bind(%3844, "load") node_offset:554:37
                          %3942 = dbg_stmt(14, 42)
                          %3943 = param_type(%3941, 0)
                          %3944 = enum_literal("SeqCst") token_offset:554:44
                          %3945 = call(.auto, %3941, [%3944]) node_offset:554:42
                          %3946 = bit_and(%3945, %3893) node_offset:554:52
                          %3947 = cmp_neq(%3946, @Zir.Inst.Ref.zero) node_offset:554:59
                          %3948 = call(.auto, %3938, [%3947]) node_offset:554:35
                          %3949 = is_non_err(%3948) node_offset:554:17
                          %3950 = condbr(%3949, {
                            %3952 = err_union_payload_unsafe(%3948) node_offset:554:17
                            %3955 = break(%3951, %3952)
                          }, {
                            %3953 = err_union_code(%3948) node_offset:554:17
                            %3954 = ret_node(%3953) node_offset:554:17
                          }) node_offset:554:17
                        }) node_offset:554:17
                        %3956 = ensure_result_used(%3951) node_offset:554:17
                        %3957 = dbg_stmt(17, 17)
                        %3971 = block({
                          %3958 = decl_ref("testing") token_offset:557:21
                          %3959 = field_call_bind(%3958, "expectEqual") node_offset:557:28
                          %3960 = dbg_stmt(17, 40)
                          %3961 = param_type(%3959, 0)
                          %3962 = field_call_bind(%3844, "bitSet") node_offset:557:42
                          %3963 = dbg_stmt(17, 49)
                          %3964 = param_type(%3962, 0)
                          %3965 = param_type(%3962, 1)
                          %3966 = call(.auto, %3962, [%3887, %3840]) node_offset:557:49
                          %3967 = param_type(%3959, 1)
                          %3968 = call(.auto, %3959, [%3966, @Zir.Inst.Ref.one]) node_offset:557:40
                          %3969 = is_non_err(%3968) node_offset:557:17
                          %3970 = condbr(%3969, {
                            %3972 = err_union_payload_unsafe(%3968) node_offset:557:17
                            %3975 = break(%3971, %3972)
                          }, {
                            %3973 = err_union_code(%3968) node_offset:557:17
                            %3974 = ret_node(%3973) node_offset:557:17
                          }) node_offset:557:17
                        }) node_offset:557:17
                        %3976 = ensure_result_used(%3971) node_offset:557:17
                        %3977 = dbg_stmt(18, 17)
                        %3992 = block({
                          %3978 = decl_ref("testing") token_offset:558:21
                          %3979 = field_call_bind(%3978, "expect") node_offset:558:28
                          %3980 = dbg_stmt(18, 35)
                          %3981 = param_type(%3979, 0)
                          %3982 = field_call_bind(%3844, "load") node_offset:558:37
                          %3983 = dbg_stmt(18, 42)
                          %3984 = param_type(%3982, 0)
                          %3985 = enum_literal("SeqCst") token_offset:558:44
                          %3986 = call(.auto, %3982, [%3985]) node_offset:558:42
                          %3987 = bit_and(%3986, %3893) node_offset:558:52
                          %3988 = cmp_neq(%3987, @Zir.Inst.Ref.zero) node_offset:558:59
                          %3989 = call(.auto, %3979, [%3988]) node_offset:558:35
                          %3990 = is_non_err(%3989) node_offset:558:17
                          %3991 = condbr(%3990, {
                            %3993 = err_union_payload_unsafe(%3989) node_offset:558:17
                            %3996 = break(%3992, %3993)
                          }, {
                            %3994 = err_union_code(%3989) node_offset:558:17
                            %3995 = ret_node(%3994) node_offset:558:17
                          }) node_offset:558:17
                        }) node_offset:558:17
                        %3997 = ensure_result_used(%3992) node_offset:558:17
                        %3998 = dbg_stmt(21, 17)
                        %3999 = dbg_stmt(21, 22)
                        %4000 = ref(%3860) token_offset:561:22
                        %4001 = load(%3865) node_offset:561:35
                        %4002 = slice_end(%4000, @Zir.Inst.Ref.zero, %4001) node_offset:561:31
                        %4003 = indexable_ptr_len(%4002) node_offset:561:31
                        %4004 = alloc(@Zir.Inst.Ref.usize_type) node_offset:561:17
                        %4005 = store(%4004, @Zir.Inst.Ref.zero_usize)
                        %4006 = loop({
                          %4010 = block({
                            %4007 = load(%4004) node_offset:561:31
                            %4008 = cmp_lt(%4007, %4003) node_offset:561:31
                            %4009 = condbr(%4008, {
                              %4015 = dbg_block_begin())
                              %4016 = dbg_var_val(%4004, "prev_bit_index")
                              %4017 = dbg_block_begin())
                              %4018 = dbg_stmt(22, 21)
                              %4019 = decl_ref("std") token_offset:562:47
                              %4020 = field_ptr(%4019, "math") node_offset:562:50
                              %4021 = field_call_bind(%4020, "Log2Int") node_offset:562:55
                              %4022 = dbg_stmt(22, 63)
                              %4023 = param_type(%4021, 0)
                              %4024 = call(.compile_time, %4021, [%3821]) node_offset:562:63
                              %4025 = load(%4004) node_offset:562:70
                              %4026 = int_cast(%4024, %4025) node_offset:562:38
                              %4027 = dbg_var_val(%4026, "prev_bit")
                              %4028 = dbg_stmt(23, 21)
                              %4029 = as_node(%3821, @Zir.Inst.Ref.one) node_offset:563:48
                              %4030 = typeof_log2_int_type(%4029) node_offset:563:39
                              %4031 = as_node(%4030, %4026) node_offset:563:54
                              %4032 = shl(%4029, %4031) node_offset:563:51
                              %4033 = dbg_var_val(%4032, "prev_mask")
                              %4034 = dbg_stmt(24, 21)
                              %4049 = block({
                                %4035 = decl_ref("testing") token_offset:564:25
                                %4036 = field_call_bind(%4035, "expect") node_offset:564:32
                                %4037 = dbg_stmt(24, 39)
                                %4038 = param_type(%4036, 0)
                                %4039 = field_call_bind(%3844, "load") node_offset:564:41
                                %4040 = dbg_stmt(24, 46)
                                %4041 = param_type(%4039, 0)
                                %4042 = enum_literal("SeqCst") token_offset:564:48
                                %4043 = call(.auto, %4039, [%4042]) node_offset:564:46
                                %4044 = bit_and(%4043, %4032) node_offset:564:56
                                %4045 = cmp_neq(%4044, @Zir.Inst.Ref.zero) node_offset:564:68
                                %4046 = call(.auto, %4036, [%4045]) node_offset:564:39
                                %4047 = is_non_err(%4046) node_offset:564:21
                                %4048 = condbr(%4047, {
                                  %4050 = err_union_payload_unsafe(%4046) node_offset:564:21
                                  %4053 = break(%4049, %4050)
                                }, {
                                  %4051 = err_union_code(%4046) node_offset:564:21
                                  %4052 = ret_node(%4051) node_offset:564:21
                                }) node_offset:564:21
                              }) node_offset:564:21
                              %4055 = dbg_block_end())
                              %4056 = dbg_block_end())
                              %4054 = ensure_result_used(%4049) node_offset:564:21
                              %4057 = break(%4010, @Zir.Inst.Ref.void_value)
                            }, {
                              %4058 = break(%4006, @Zir.Inst.Ref.void_value)
                            }) node_offset:561:17
                          }) node_offset:561:17
                          %4011 = load(%4004) node_offset:561:31
                          %4012 = add(%4011, @Zir.Inst.Ref.one_usize) node_offset:561:17
                          %4013 = store(%4004, %4012)
                          %4014 = repeat() node_offset:561:17
                        }) node_offset:561:17
                        %4060 = dbg_block_end())
                        %4061 = dbg_block_end())
                        %4059 = ensure_result_used(%4006) node_offset:561:17
                        %4062 = break(%3871, @Zir.Inst.Ref.void_value)
                      }, {
                        %4063 = break(%3867, @Zir.Inst.Ref.void_value)
                      }) node_offset:547:13
                    }) node_offset:547:13
                    %3872 = load(%3865) node_offset:547:18
                    %3873 = add(%3872, @Zir.Inst.Ref.one_usize) node_offset:547:13
                    %3874 = store(%3865, %3873)
                    %3875 = repeat() node_offset:547:13
                  }) node_offset:547:13
                  %4065 = dbg_block_end())
                  %4066 = dbg_block_end())
                  %4064 = ensure_result_used(%3867) node_offset:547:13
                  %4067 = break_inline(%3834, @Zir.Inst.Ref.void_value)
                }, {
                  %4068 = break_inline(%3830, @Zir.Inst.Ref.void_value)
                }) node_offset:543:16
              }) node_offset:543:16
              %3835 = load(%3828) node_offset:543:21
              %3836 = add(%3835, @Zir.Inst.Ref.one_usize) node_offset:543:16
              %3837 = store(%3828, %3836)
              %3838 = repeat_inline() node_offset:543:16
            }) node_offset:543:16
            %4070 = dbg_block_end())
            %4071 = dbg_block_end())
            %4069 = ensure_result_used(%3830) node_offset:543:16
            %4072 = break_inline(%3815, @Zir.Inst.Ref.void_value)
          }, {
            %4073 = break_inline(%3811, @Zir.Inst.Ref.void_value)
          }) node_offset:542:12
        }) node_offset:542:12
        %3816 = load(%3809) node_offset:542:31
        %3817 = add(%3816, @Zir.Inst.Ref.one_usize) node_offset:542:12
        %3818 = store(%3809, %3817)
        %3819 = repeat_inline() node_offset:542:12
      }) node_offset:542:12
      %4075 = dbg_block_end())
      %4074 = ensure_result_used(%3811) node_offset:542:12
      %4076 = ret_tok(@Zir.Inst.Ref.void_value) token_offset:569:1
    }) (lbrace=1:22,rbrace=29:1) node_offset:541:1
    %4078 = break_inline(%3801, %4077)
  }) node_offset:541:1
  [8583] test "@"Atomic.bitReset"" line(570) hash(42856488d1bebf3a2141bdd3f717b9a7): %4079 = block_inline({
    %4364 = func_extended(test, ret_ty=void, inferror, body={
      %4080 = dbg_block_begin())
      %4081 = dbg_stmt(2, 5)
      %4082 = dbg_stmt(2, 17)
      %4083 = decl_val("atomicIntTypes") token_offset:572:17
      %4084 = dbg_stmt(2, 31)
      %4085 = call(.auto, %4083, []) node_offset:572:31
      %4086 = indexable_ptr_len(%4085) node_offset:572:31
      %4087 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:572:12
      %4088 = store(%4087, @Zir.Inst.Ref.zero_usize)
      %4089 = block_inline({
        %4093 = block_inline({
          %4090 = load(%4087) node_offset:572:31
          %4091 = cmp_lt(%4090, %4086) node_offset:572:31
          %4092 = condbr_inline(%4091, {
            %4098 = dbg_block_begin())
            %4099 = elem_val(%4085, %4090)
            %4100 = dbg_var_val(%4099, "Int")
            %4101 = dbg_block_begin())
            %4102 = dbg_stmt(3, 9)
            %4103 = dbg_stmt(3, 21)
            %4104 = decl_val("atomic_rmw_orderings") token_offset:573:21
            %4105 = indexable_ptr_len(%4104) node_offset:573:21
            %4106 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:573:16
            %4107 = store(%4106, @Zir.Inst.Ref.zero_usize)
            %4108 = block_inline({
              %4112 = block_inline({
                %4109 = load(%4106) node_offset:573:21
                %4110 = cmp_lt(%4109, %4105) node_offset:573:21
                %4111 = condbr_inline(%4110, {
                  %4117 = dbg_block_begin())
                  %4118 = elem_val(%4104, %4109)
                  %4119 = dbg_var_val(%4118, "ordering")
                  %4120 = dbg_block_begin())
                  %4121 = dbg_stmt(4, 13)
                  %4122 = alloc_inferred_mut() node_offset:574:13
                  %4123 = decl_val("Atomic") token_offset:574:21
                  %4124 = dbg_stmt(4, 27)
                  %4125 = param_type(%4123, 0)
                  %4126 = call(.auto, %4123, [%4099]) node_offset:574:27
                  %4127 = ref(%4126) token_offset:574:21
                  %4128 = field_call_bind(%4127, "init") node_offset:574:32
                  %4129 = dbg_stmt(4, 37)
                  %4130 = param_type(%4128, 0)
                  %4131 = call(.auto, %4128, [@Zir.Inst.Ref.zero]) node_offset:574:37
                  %4132 = store_to_inferred_ptr(%4122, %4131)
                  %4133 = resolve_inferred_alloc(%4122) node_offset:574:13
                  %4134 = dbg_var_ptr(%4122, "x")
                  %4135 = dbg_stmt(5, 13)
                  %4136 = bit_size_of(%4099) node_offset:575:36
                  %4137 = array_type(%4136, @Zir.Inst.Ref.void_type)
                  %4138 = as_node(%4137, @Zir.Inst.Ref.undef) node_offset:575:58
                  %4139 = dbg_var_val(%4138, "bit_array")
                  %4140 = dbg_stmt(7, 13)
                  %4141 = dbg_stmt(7, 18)
                  %4142 = indexable_ptr_len(%4138) node_offset:577:18
                  %4143 = alloc(@Zir.Inst.Ref.usize_type) node_offset:577:13
                  %4144 = store(%4143, @Zir.Inst.Ref.zero_usize)
                  %4145 = loop({
                    %4149 = block({
                      %4146 = load(%4143) node_offset:577:18
                      %4147 = cmp_lt(%4146, %4142) node_offset:577:18
                      %4148 = condbr(%4147, {
                        %4154 = dbg_block_begin())
                        %4155 = dbg_var_val(%4143, "bit_index")
                        %4156 = dbg_block_begin())
                        %4157 = dbg_stmt(8, 17)
                        %4158 = decl_ref("std") token_offset:578:38
                        %4159 = field_ptr(%4158, "math") node_offset:578:41
                        %4160 = field_call_bind(%4159, "Log2Int") node_offset:578:46
                        %4161 = dbg_stmt(8, 54)
                        %4162 = param_type(%4160, 0)
                        %4163 = call(.compile_time, %4160, [%4099]) node_offset:578:54
                        %4164 = load(%4143) node_offset:578:61
                        %4165 = int_cast(%4163, %4164) node_offset:578:29
                        %4166 = dbg_var_val(%4165, "bit")
                        %4167 = dbg_stmt(9, 17)
                        %4168 = as_node(%4099, @Zir.Inst.Ref.one) node_offset:579:39
                        %4169 = typeof_log2_int_type(%4168) node_offset:579:30
                        %4170 = as_node(%4169, %4165) node_offset:579:45
                        %4171 = shl(%4168, %4170) node_offset:579:42
                        %4172 = dbg_var_val(%4171, "mask")
                        %4173 = dbg_stmt(10, 17)
                        %4174 = field_call_bind(%4122, "storeUnchecked") node_offset:580:18
                        %4175 = dbg_stmt(10, 33)
                        %4176 = param_type(%4174, 0)
                        %4177 = field_call_bind(%4122, "loadUnchecked") node_offset:580:35
                        %4178 = dbg_stmt(10, 49)
                        %4179 = call(.auto, %4177, []) node_offset:580:49
                        %4180 = bit_or(%4179, %4171) node_offset:580:52
                        %4181 = call(nodiscard .auto, %4174, [%4180]) node_offset:580:33
                        %4182 = dbg_stmt(13, 17)
                        %4197 = block({
                          %4183 = decl_ref("testing") token_offset:583:21
                          %4184 = field_call_bind(%4183, "expect") node_offset:583:28
                          %4185 = dbg_stmt(13, 35)
                          %4186 = param_type(%4184, 0)
                          %4187 = field_call_bind(%4122, "load") node_offset:583:37
                          %4188 = dbg_stmt(13, 42)
                          %4189 = param_type(%4187, 0)
                          %4190 = enum_literal("SeqCst") token_offset:583:44
                          %4191 = call(.auto, %4187, [%4190]) node_offset:583:42
                          %4192 = bit_and(%4191, %4171) node_offset:583:52
                          %4193 = cmp_neq(%4192, @Zir.Inst.Ref.zero) node_offset:583:59
                          %4194 = call(.auto, %4184, [%4193]) node_offset:583:35
                          %4195 = is_non_err(%4194) node_offset:583:17
                          %4196 = condbr(%4195, {
                            %4198 = err_union_payload_unsafe(%4194) node_offset:583:17
                            %4201 = break(%4197, %4198)
                          }, {
                            %4199 = err_union_code(%4194) node_offset:583:17
                            %4200 = ret_node(%4199) node_offset:583:17
                          }) node_offset:583:17
                        }) node_offset:583:17
                        %4202 = ensure_result_used(%4197) node_offset:583:17
                        %4203 = dbg_stmt(14, 17)
                        %4217 = block({
                          %4204 = decl_ref("testing") token_offset:584:21
                          %4205 = field_call_bind(%4204, "expectEqual") node_offset:584:28
                          %4206 = dbg_stmt(14, 40)
                          %4207 = param_type(%4205, 0)
                          %4208 = field_call_bind(%4122, "bitReset") node_offset:584:42
                          %4209 = dbg_stmt(14, 51)
                          %4210 = param_type(%4208, 0)
                          %4211 = param_type(%4208, 1)
                          %4212 = call(.auto, %4208, [%4165, %4118]) node_offset:584:51
                          %4213 = param_type(%4205, 1)
                          %4214 = call(.auto, %4205, [%4212, @Zir.Inst.Ref.one]) node_offset:584:40
                          %4215 = is_non_err(%4214) node_offset:584:17
                          %4216 = condbr(%4215, {
                            %4218 = err_union_payload_unsafe(%4214) node_offset:584:17
                            %4221 = break(%4217, %4218)
                          }, {
                            %4219 = err_union_code(%4214) node_offset:584:17
                            %4220 = ret_node(%4219) node_offset:584:17
                          }) node_offset:584:17
                        }) node_offset:584:17
                        %4222 = ensure_result_used(%4217) node_offset:584:17
                        %4223 = dbg_stmt(15, 17)
                        %4238 = block({
                          %4224 = decl_ref("testing") token_offset:585:21
                          %4225 = field_call_bind(%4224, "expect") node_offset:585:28
                          %4226 = dbg_stmt(15, 35)
                          %4227 = param_type(%4225, 0)
                          %4228 = field_call_bind(%4122, "load") node_offset:585:37
                          %4229 = dbg_stmt(15, 42)
                          %4230 = param_type(%4228, 0)
                          %4231 = enum_literal("SeqCst") token_offset:585:44
                          %4232 = call(.auto, %4228, [%4231]) node_offset:585:42
                          %4233 = bit_and(%4232, %4171) node_offset:585:52
                          %4234 = cmp_eq(%4233, @Zir.Inst.Ref.zero) node_offset:585:59
                          %4235 = call(.auto, %4225, [%4234]) node_offset:585:35
                          %4236 = is_non_err(%4235) node_offset:585:17
                          %4237 = condbr(%4236, {
                            %4239 = err_union_payload_unsafe(%4235) node_offset:585:17
                            %4242 = break(%4238, %4239)
                          }, {
                            %4240 = err_union_code(%4235) node_offset:585:17
                            %4241 = ret_node(%4240) node_offset:585:17
                          }) node_offset:585:17
                        }) node_offset:585:17
                        %4243 = ensure_result_used(%4238) node_offset:585:17
                        %4244 = dbg_stmt(18, 17)
                        %4258 = block({
                          %4245 = decl_ref("testing") token_offset:588:21
                          %4246 = field_call_bind(%4245, "expectEqual") node_offset:588:28
                          %4247 = dbg_stmt(18, 40)
                          %4248 = param_type(%4246, 0)
                          %4249 = field_call_bind(%4122, "bitReset") node_offset:588:42
                          %4250 = dbg_stmt(18, 51)
                          %4251 = param_type(%4249, 0)
                          %4252 = param_type(%4249, 1)
                          %4253 = call(.auto, %4249, [%4165, %4118]) node_offset:588:51
                          %4254 = param_type(%4246, 1)
                          %4255 = call(.auto, %4246, [%4253, @Zir.Inst.Ref.zero]) node_offset:588:40
                          %4256 = is_non_err(%4255) node_offset:588:17
                          %4257 = condbr(%4256, {
                            %4259 = err_union_payload_unsafe(%4255) node_offset:588:17
                            %4262 = break(%4258, %4259)
                          }, {
                            %4260 = err_union_code(%4255) node_offset:588:17
                            %4261 = ret_node(%4260) node_offset:588:17
                          }) node_offset:588:17
                        }) node_offset:588:17
                        %4263 = ensure_result_used(%4258) node_offset:588:17
                        %4264 = dbg_stmt(19, 17)
                        %4279 = block({
                          %4265 = decl_ref("testing") token_offset:589:21
                          %4266 = field_call_bind(%4265, "expect") node_offset:589:28
                          %4267 = dbg_stmt(19, 35)
                          %4268 = param_type(%4266, 0)
                          %4269 = field_call_bind(%4122, "load") node_offset:589:37
                          %4270 = dbg_stmt(19, 42)
                          %4271 = param_type(%4269, 0)
                          %4272 = enum_literal("SeqCst") token_offset:589:44
                          %4273 = call(.auto, %4269, [%4272]) node_offset:589:42
                          %4274 = bit_and(%4273, %4171) node_offset:589:52
                          %4275 = cmp_eq(%4274, @Zir.Inst.Ref.zero) node_offset:589:59
                          %4276 = call(.auto, %4266, [%4275]) node_offset:589:35
                          %4277 = is_non_err(%4276) node_offset:589:17
                          %4278 = condbr(%4277, {
                            %4280 = err_union_payload_unsafe(%4276) node_offset:589:17
                            %4283 = break(%4279, %4280)
                          }, {
                            %4281 = err_union_code(%4276) node_offset:589:17
                            %4282 = ret_node(%4281) node_offset:589:17
                          }) node_offset:589:17
                        }) node_offset:589:17
                        %4284 = ensure_result_used(%4279) node_offset:589:17
                        %4285 = dbg_stmt(22, 17)
                        %4286 = dbg_stmt(22, 22)
                        %4287 = ref(%4138) token_offset:592:22
                        %4288 = load(%4143) node_offset:592:35
                        %4289 = slice_end(%4287, @Zir.Inst.Ref.zero, %4288) node_offset:592:31
                        %4290 = indexable_ptr_len(%4289) node_offset:592:31
                        %4291 = alloc(@Zir.Inst.Ref.usize_type) node_offset:592:17
                        %4292 = store(%4291, @Zir.Inst.Ref.zero_usize)
                        %4293 = loop({
                          %4297 = block({
                            %4294 = load(%4291) node_offset:592:31
                            %4295 = cmp_lt(%4294, %4290) node_offset:592:31
                            %4296 = condbr(%4295, {
                              %4302 = dbg_block_begin())
                              %4303 = dbg_var_val(%4291, "prev_bit_index")
                              %4304 = dbg_block_begin())
                              %4305 = dbg_stmt(23, 21)
                              %4306 = decl_ref("std") token_offset:593:47
                              %4307 = field_ptr(%4306, "math") node_offset:593:50
                              %4308 = field_call_bind(%4307, "Log2Int") node_offset:593:55
                              %4309 = dbg_stmt(23, 63)
                              %4310 = param_type(%4308, 0)
                              %4311 = call(.compile_time, %4308, [%4099]) node_offset:593:63
                              %4312 = load(%4291) node_offset:593:70
                              %4313 = int_cast(%4311, %4312) node_offset:593:38
                              %4314 = dbg_var_val(%4313, "prev_bit")
                              %4315 = dbg_stmt(24, 21)
                              %4316 = as_node(%4099, @Zir.Inst.Ref.one) node_offset:594:48
                              %4317 = typeof_log2_int_type(%4316) node_offset:594:39
                              %4318 = as_node(%4317, %4313) node_offset:594:54
                              %4319 = shl(%4316, %4318) node_offset:594:51
                              %4320 = dbg_var_val(%4319, "prev_mask")
                              %4321 = dbg_stmt(25, 21)
                              %4336 = block({
                                %4322 = decl_ref("testing") token_offset:595:25
                                %4323 = field_call_bind(%4322, "expect") node_offset:595:32
                                %4324 = dbg_stmt(25, 39)
                                %4325 = param_type(%4323, 0)
                                %4326 = field_call_bind(%4122, "load") node_offset:595:41
                                %4327 = dbg_stmt(25, 46)
                                %4328 = param_type(%4326, 0)
                                %4329 = enum_literal("SeqCst") token_offset:595:48
                                %4330 = call(.auto, %4326, [%4329]) node_offset:595:46
                                %4331 = bit_and(%4330, %4319) node_offset:595:56
                                %4332 = cmp_eq(%4331, @Zir.Inst.Ref.zero) node_offset:595:68
                                %4333 = call(.auto, %4323, [%4332]) node_offset:595:39
                                %4334 = is_non_err(%4333) node_offset:595:21
                                %4335 = condbr(%4334, {
                                  %4337 = err_union_payload_unsafe(%4333) node_offset:595:21
                                  %4340 = break(%4336, %4337)
                                }, {
                                  %4338 = err_union_code(%4333) node_offset:595:21
                                  %4339 = ret_node(%4338) node_offset:595:21
                                }) node_offset:595:21
                              }) node_offset:595:21
                              %4342 = dbg_block_end())
                              %4343 = dbg_block_end())
                              %4341 = ensure_result_used(%4336) node_offset:595:21
                              %4344 = break(%4297, @Zir.Inst.Ref.void_value)
                            }, {
                              %4345 = break(%4293, @Zir.Inst.Ref.void_value)
                            }) node_offset:592:17
                          }) node_offset:592:17
                          %4298 = load(%4291) node_offset:592:31
                          %4299 = add(%4298, @Zir.Inst.Ref.one_usize) node_offset:592:17
                          %4300 = store(%4291, %4299)
                          %4301 = repeat() node_offset:592:17
                        }) node_offset:592:17
                        %4347 = dbg_block_end())
                        %4348 = dbg_block_end())
                        %4346 = ensure_result_used(%4293) node_offset:592:17
                        %4349 = break(%4149, @Zir.Inst.Ref.void_value)
                      }, {
                        %4350 = break(%4145, @Zir.Inst.Ref.void_value)
                      }) node_offset:577:13
                    }) node_offset:577:13
                    %4150 = load(%4143) node_offset:577:18
                    %4151 = add(%4150, @Zir.Inst.Ref.one_usize) node_offset:577:13
                    %4152 = store(%4143, %4151)
                    %4153 = repeat() node_offset:577:13
                  }) node_offset:577:13
                  %4352 = dbg_block_end())
                  %4353 = dbg_block_end())
                  %4351 = ensure_result_used(%4145) node_offset:577:13
                  %4354 = break_inline(%4112, @Zir.Inst.Ref.void_value)
                }, {
                  %4355 = break_inline(%4108, @Zir.Inst.Ref.void_value)
                }) node_offset:573:16
              }) node_offset:573:16
              %4113 = load(%4106) node_offset:573:21
              %4114 = add(%4113, @Zir.Inst.Ref.one_usize) node_offset:573:16
              %4115 = store(%4106, %4114)
              %4116 = repeat_inline() node_offset:573:16
            }) node_offset:573:16
            %4357 = dbg_block_end())
            %4358 = dbg_block_end())
            %4356 = ensure_result_used(%4108) node_offset:573:16
            %4359 = break_inline(%4093, @Zir.Inst.Ref.void_value)
          }, {
            %4360 = break_inline(%4089, @Zir.Inst.Ref.void_value)
          }) node_offset:572:12
        }) node_offset:572:12
        %4094 = load(%4087) node_offset:572:31
        %4095 = add(%4094, @Zir.Inst.Ref.one_usize) node_offset:572:12
        %4096 = store(%4087, %4095)
        %4097 = repeat_inline() node_offset:572:12
      }) node_offset:572:12
      %4362 = dbg_block_end())
      %4361 = ensure_result_used(%4089) node_offset:572:12
      %4363 = ret_tok(@Zir.Inst.Ref.void_value) token_offset:600:1
    }) (lbrace=1:24,rbrace=30:1) node_offset:571:1
    %4365 = break_inline(%4079, %4364)
  }) node_offset:571:1
  [8591] test "@"Atomic.bitToggle"" line(601) hash(65cc9dec60f210abdd1bb286931e2bd7): %4366 = block_inline({
    %4642 = func_extended(test, ret_ty=void, inferror, body={
      %4367 = dbg_block_begin())
      %4368 = dbg_stmt(2, 5)
      %4369 = dbg_stmt(2, 17)
      %4370 = decl_val("atomicIntTypes") token_offset:603:17
      %4371 = dbg_stmt(2, 31)
      %4372 = call(.auto, %4370, []) node_offset:603:31
      %4373 = indexable_ptr_len(%4372) node_offset:603:31
      %4374 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:603:12
      %4375 = store(%4374, @Zir.Inst.Ref.zero_usize)
      %4376 = block_inline({
        %4380 = block_inline({
          %4377 = load(%4374) node_offset:603:31
          %4378 = cmp_lt(%4377, %4373) node_offset:603:31
          %4379 = condbr_inline(%4378, {
            %4385 = dbg_block_begin())
            %4386 = elem_val(%4372, %4377)
            %4387 = dbg_var_val(%4386, "Int")
            %4388 = dbg_block_begin())
            %4389 = dbg_stmt(3, 9)
            %4390 = dbg_stmt(3, 21)
            %4391 = decl_val("atomic_rmw_orderings") token_offset:604:21
            %4392 = indexable_ptr_len(%4391) node_offset:604:21
            %4393 = alloc_comptime_mut(@Zir.Inst.Ref.usize_type) node_offset:604:16
            %4394 = store(%4393, @Zir.Inst.Ref.zero_usize)
            %4395 = block_inline({
              %4399 = block_inline({
                %4396 = load(%4393) node_offset:604:21
                %4397 = cmp_lt(%4396, %4392) node_offset:604:21
                %4398 = condbr_inline(%4397, {
                  %4404 = dbg_block_begin())
                  %4405 = elem_val(%4391, %4396)
                  %4406 = dbg_var_val(%4405, "ordering")
                  %4407 = dbg_block_begin())
                  %4408 = dbg_stmt(4, 13)
                  %4409 = alloc_inferred_mut() node_offset:605:13
                  %4410 = decl_val("Atomic") token_offset:605:21
                  %4411 = dbg_stmt(4, 27)
                  %4412 = param_type(%4410, 0)
                  %4413 = call(.auto, %4410, [%4386]) node_offset:605:27
                  %4414 = ref(%4413) token_offset:605:21
                  %4415 = field_call_bind(%4414, "init") node_offset:605:32
                  %4416 = dbg_stmt(4, 37)
                  %4417 = param_type(%4415, 0)
                  %4418 = call(.auto, %4415, [@Zir.Inst.Ref.zero]) node_offset:605:37
                  %4419 = store_to_inferred_ptr(%4409, %4418)
                  %4420 = resolve_inferred_alloc(%4409) node_offset:605:13
                  %4421 = dbg_var_ptr(%4409, "x")
                  %4422 = dbg_stmt(5, 13)
                  %4423 = bit_size_of(%4386) node_offset:606:36
                  %4424 = array_type(%4423, @Zir.Inst.Ref.void_type)
                  %4425 = as_node(%4424, @Zir.Inst.Ref.undef) node_offset:606:58
                  %4426 = dbg_var_val(%4425, "bit_array")
                  %4427 = dbg_stmt(7, 13)
                  %4428 = dbg_stmt(7, 18)
                  %4429 = indexable_ptr_len(%4425) node_offset:608:18
                  %4430 = alloc(@Zir.Inst.Ref.usize_type) node_offset:608:13
                  %4431 = store(%4430, @Zir.Inst.Ref.zero_usize)
                  %4432 = loop({
                    %4436 = block({
                      %4433 = load(%4430) node_offset:608:18
                      %4434 = cmp_lt(%4433, %4429) node_offset:608:18
                      %4435 = condbr(%4434, {
                        %4441 = dbg_block_begin())
                        %4442 = dbg_var_val(%4430, "bit_index")
                        %4443 = dbg_block_begin())
                        %4444 = dbg_stmt(8, 17)
                        %4445 = decl_ref("std") token_offset:609:38
                        %4446 = field_ptr(%4445, "math") node_offset:609:41
                        %4447 = field_call_bind(%4446, "Log2Int") node_offset:609:46
                        %4448 = dbg_stmt(8, 54)
                        %4449 = param_type(%4447, 0)
                        %4450 = call(.compile_time, %4447, [%4386]) node_offset:609:54
                        %4451 = load(%4430) node_offset:609:61
                        %4452 = int_cast(%4450, %4451) node_offset:609:29
                        %4453 = dbg_var_val(%4452, "bit")
                        %4454 = dbg_stmt(9, 17)
                        %4455 = as_node(%4386, @Zir.Inst.Ref.one) node_offset:610:39
                        %4456 = typeof_log2_int_type(%4455) node_offset:610:30
                        %4457 = as_node(%4456, %4452) node_offset:610:45
                        %4458 = shl(%4455, %4457) node_offset:610:42
                        %4459 = dbg_var_val(%4458, "mask")
                        %4460 = dbg_stmt(12, 17)
                        %4475 = block({
                          %4461 = decl_ref("testing") token_offset:613:21
                          %4462 = field_call_bind(%4461, "expect") node_offset:613:28
                          %4463 = dbg_stmt(12, 35)
                          %4464 = param_type(%4462, 0)
                          %4465 = field_call_bind(%4409, "load") node_offset:613:37
                          %4466 = dbg_stmt(12, 42)
                          %4467 = param_type(%4465, 0)
                          %4468 = enum_literal("SeqCst") token_offset:613:44
                          %4469 = call(.auto, %4465, [%4468]) node_offset:613:42
                          %4470 = bit_and(%4469, %4458) node_offset:613:52
                          %4471 = cmp_eq(%4470, @Zir.Inst.Ref.zero) node_offset:613:59
                          %4472 = call(.auto, %4462, [%4471]) node_offset:613:35
                          %4473 = is_non_err(%4472) node_offset:613:17
                          %4474 = condbr(%4473, {
                            %4476 = err_union_payload_unsafe(%4472) node_offset:613:17
                            %4479 = break(%4475, %4476)
                          }, {
                            %4477 = err_union_code(%4472) node_offset:613:17
                            %4478 = ret_node(%4477) node_offset:613:17
                          }) node_offset:613:17
                        }) node_offset:613:17
                        %4480 = ensure_result_used(%4475) node_offset:613:17
                        %4481 = dbg_stmt(13, 17)
                        %4495 = block({
                          %4482 = decl_ref("testing") token_offset:614:21
                          %4483 = field_call_bind(%4482, "expectEqual") node_offset:614:28
                          %4484 = dbg_stmt(13, 40)
                          %4485 = param_type(%4483, 0)
                          %4486 = field_call_bind(%4409, "bitToggle") node_offset:614:42
                          %4487 = dbg_stmt(13, 52)
                          %4488 = param_type(%4486, 0)
                          %4489 = param_type(%4486, 1)
                          %4490 = call(.auto, %4486, [%4452, %4405]) node_offset:614:52
                          %4491 = param_type(%4483, 1)
                          %4492 = call(.auto, %4483, [%4490, @Zir.Inst.Ref.zero]) node_offset:614:40
                          %4493 = is_non_err(%4492) node_offset:614:17
                          %4494 = condbr(%4493, {
                            %4496 = err_union_payload_unsafe(%4492) node_offset:614:17
                            %4499 = break(%4495, %4496)
                          }, {
                            %4497 = err_union_code(%4492) node_offset:614:17
                            %4498 = ret_node(%4497) node_offset:614:17
                          }) node_offset:614:17
                        }) node_offset:614:17
                        %4500 = ensure_result_used(%4495) node_offset:614:17
                        %4501 = dbg_stmt(14, 17)
                        %4516 = block({
                          %4502 = decl_ref("testing") token_offset:615:21
                          %4503 = field_call_bind(%4502, "expect") node_offset:615:28
                          %4504 = dbg_stmt(14, 35)
                          %4505 = param_type(%4503, 0)
                          %4506 = field_call_bind(%4409, "load") node_offset:615:37
                          %4507 = dbg_stmt(14, 42)
                          %4508 = param_type(%4506, 0)
                          %4509 = enum_literal("SeqCst") token_offset:615:44
                          %4510 = call(.auto, %4506, [%4509]) node_offset:615:42
                          %4511 = bit_and(%4510, %4458) node_offset:615:52
                          %4512 = cmp_neq(%4511, @Zir.Inst.Ref.zero) node_offset:615:59
                          %4513 = call(.auto, %4503, [%4512]) node_offset:615:35
                          %4514 = is_non_err(%4513) node_offset:615:17
                          %4515 = condbr(%4514, {
                            %4517 = err_union_payload_unsafe(%4513) node_offset:615:17
                            %4520 = break(%4516, %4517)
                          }, {
                            %4518 = err_union_code(%4513) node_offset:615:17
                            %4519 = ret_node(%4518) node_offset:615:17
                          }) node_offset:615:17
                        }) node_offset:615:17
                        %4521 = ensure_result_used(%4516) node_offset:615:17
                        %4522 = dbg_stmt(17, 17)
                        %4536 = block({
                          %4523 = decl_ref("testing") token_offset:618:21
                          %4524 = field_call_bind(%4523, "expectEqual") node_offset:618:28
                          %4525 = dbg_stmt(17, 40)
                          %4526 = param_type(%4524, 0)
                          %4527 = field_call_bind(%4409, "bitToggle") node_offset:618:42
                          %4528 = dbg_stmt(17, 52)
                          %4529 = param_type(%4527, 0)
                          %4530 = param_type(%4527, 1)
                          %4531 = call(.auto, %4527, [%4452, %4405]) node_offset:618:52
                          %4532 = param_type(%4524, 1)
                          %4533 = call(.auto, %4524, [%4531, @Zir.Inst.Ref.one]) node_offset:618:40
                          %4534 = is_non_err(%4533) node_offset:618:17
                          %4535 = condbr(%4534, {
                            %4537 = err_union_payload_unsafe(%4533) node_offset:618:17
                            %4540 = break(%4536, %4537)
                          }, {
                            %4538 = err_union_code(%4533) node_offset:618:17
                            %4539 = ret_node(%4538) node_offset:618:17
                          }) node_offset:618:17
                        }) node_offset:618:17
                        %4541 = ensure_result_used(%4536) node_offset:618:17
                        %4542 = dbg_stmt(18, 17)
                        %4557 = block({
                          %4543 = decl_ref("testing") token_offset:619:21
                          %4544 = field_call_bind(%4543, "expect") node_offset:619:28
                          %4545 = dbg_stmt(18, 35)
                          %4546 = param_type(%4544, 0)
                          %4547 = field_call_bind(%4409, "load") node_offset:619:37
                          %4548 = dbg_stmt(18, 42)
                          %4549 = param_type(%4547, 0)
                          %4550 = enum_literal("SeqCst") token_offset:619:44
                          %4551 = call(.auto, %4547, [%4550]) node_offset:619:42
                          %4552 = bit_and(%4551, %4458) node_offset:619:52
                          %4553 = cmp_eq(%4552, @Zir.Inst.Ref.zero) node_offset:619:59
                          %4554 = call(.auto, %4544, [%4553]) node_offset:619:35
                          %4555 = is_non_err(%4554) node_offset:619:17
                          %4556 = condbr(%4555, {
                            %4558 = err_union_payload_unsafe(%4554) node_offset:619:17
                            %4561 = break(%4557, %4558)
                          }, {
                            %4559 = err_union_code(%4554) node_offset:619:17
                            %4560 = ret_node(%4559) node_offset:619:17
                          }) node_offset:619:17
                        }) node_offset:619:17
                        %4562 = ensure_result_used(%4557) node_offset:619:17
                        %4563 = dbg_stmt(21, 17)
                        %4564 = dbg_stmt(21, 22)
                        %4565 = ref(%4425) token_offset:622:22
                        %4566 = load(%4430) node_offset:622:35
                        %4567 = slice_end(%4565, @Zir.Inst.Ref.zero, %4566) node_offset:622:31
                        %4568 = indexable_ptr_len(%4567) node_offset:622:31
                        %4569 = alloc(@Zir.Inst.Ref.usize_type) node_offset:622:17
                        %4570 = store(%4569, @Zir.Inst.Ref.zero_usize)
                        %4571 = loop({
                          %4575 = block({
                            %4572 = load(%4569) node_offset:622:31
                            %4573 = cmp_lt(%4572, %4568) node_offset:622:31
                            %4574 = condbr(%4573, {
                              %4580 = dbg_block_begin())
                              %4581 = dbg_var_val(%4569, "prev_bit_index")
                              %4582 = dbg_block_begin())
                              %4583 = dbg_stmt(22, 21)
                              %4584 = decl_ref("std") token_offset:623:47
                              %4585 = field_ptr(%4584, "math") node_offset:623:50
                              %4586 = field_call_bind(%4585, "Log2Int") node_offset:623:55
                              %4587 = dbg_stmt(22, 63)
                              %4588 = param_type(%4586, 0)
                              %4589 = call(.compile_time, %4586, [%4386]) node_offset:623:63
                              %4590 = load(%4569) node_offset:623:70
                              %4591 = int_cast(%4589, %4590) node_offset:623:38
                              %4592 = dbg_var_val(%4591, "prev_bit")
                              %4593 = dbg_stmt(23, 21)
                              %4594 = as_node(%4386, @Zir.Inst.Ref.one) node_offset:624:48
                              %4595 = typeof_log2_int_type(%4594) node_offset:624:39
                              %4596 = as_node(%4595, %4591) node_offset:624:54
                              %4597 = shl(%4594, %4596) node_offset:624:51
                              %4598 = dbg_var_val(%4597, "prev_mask")
                              %4599 = dbg_stmt(24, 21)
                              %4614 = block({
                                %4600 = decl_ref("testing") token_offset:625:25
                                %4601 = field_call_bind(%4600, "expect") node_offset:625:32
                                %4602 = dbg_stmt(24, 39)
                                %4603 = param_type(%4601, 0)
                                %4604 = field_call_bind(%4409, "load") node_offset:625:41
                                %4605 = dbg_stmt(24, 46)
                                %4606 = param_type(%4604, 0)
                                %4607 = enum_literal("SeqCst") token_offset:625:48
                                %4608 = call(.auto, %4604, [%4607]) node_offset:625:46
                                %4609 = bit_and(%4608, %4597) node_offset:625:56
                                %4610 = cmp_eq(%4609, @Zir.Inst.Ref.zero) node_offset:625:68
                                %4611 = call(.auto, %4601, [%4610]) node_offset:625:39
                                %4612 = is_non_err(%4611) node_offset:625:21
                                %4613 = condbr(%4612, {
                                  %4615 = err_union_payload_unsafe(%4611) node_offset:625:21
                                  %4618 = break(%4614, %4615)
                                }, {
                                  %4616 = err_union_code(%4611) node_offset:625:21
                                  %4617 = ret_node(%4616) node_offset:625:21
                                }) node_offset:625:21
                              }) node_offset:625:21
                              %4620 = dbg_block_end())
                              %4621 = dbg_block_end())
                              %4619 = ensure_result_used(%4614) node_offset:625:21
                              %4622 = break(%4575, @Zir.Inst.Ref.void_value)
                            }, {
                              %4623 = break(%4571, @Zir.Inst.Ref.void_value)
                            }) node_offset:622:17
                          }) node_offset:622:17
                          %4576 = load(%4569) node_offset:622:31
                          %4577 = add(%4576, @Zir.Inst.Ref.one_usize) node_offset:622:17
                          %4578 = store(%4569, %4577)
                          %4579 = repeat() node_offset:622:17
                        }) node_offset:622:17
                        %4625 = dbg_block_end())
                        %4626 = dbg_block_end())
                        %4624 = ensure_result_used(%4571) node_offset:622:17
                        %4627 = break(%4436, @Zir.Inst.Ref.void_value)
                      }, {
                        %4628 = break(%4432, @Zir.Inst.Ref.void_value)
                      }) node_offset:608:13
                    }) node_offset:608:13
                    %4437 = load(%4430) node_offset:608:18
                    %4438 = add(%4437, @Zir.Inst.Ref.one_usize) node_offset:608:13
                    %4439 = store(%4430, %4438)
                    %4440 = repeat() node_offset:608:13
                  }) node_offset:608:13
                  %4630 = dbg_block_end())
                  %4631 = dbg_block_end())
                  %4629 = ensure_result_used(%4432) node_offset:608:13
                  %4632 = break_inline(%4399, @Zir.Inst.Ref.void_value)
                }, {
                  %4633 = break_inline(%4395, @Zir.Inst.Ref.void_value)
                }) node_offset:604:16
              }) node_offset:604:16
              %4400 = load(%4393) node_offset:604:21
              %4401 = add(%4400, @Zir.Inst.Ref.one_usize) node_offset:604:16
              %4402 = store(%4393, %4401)
              %4403 = repeat_inline() node_offset:604:16
            }) node_offset:604:16
            %4635 = dbg_block_end())
            %4636 = dbg_block_end())
            %4634 = ensure_result_used(%4395) node_offset:604:16
            %4637 = break_inline(%4380, @Zir.Inst.Ref.void_value)
          }, {
            %4638 = break_inline(%4376, @Zir.Inst.Ref.void_value)
          }) node_offset:603:12
        }) node_offset:603:12
        %4381 = load(%4374) node_offset:603:31
        %4382 = add(%4381, @Zir.Inst.Ref.one_usize) node_offset:603:12
        %4383 = store(%4374, %4382)
        %4384 = repeat_inline() node_offset:603:12
      }) node_offset:603:12
      %4640 = dbg_block_end())
      %4639 = ensure_result_used(%4376) node_offset:603:12
      %4641 = ret_tok(@Zir.Inst.Ref.void_value) token_offset:630:1
    }) (lbrace=1:25,rbrace=29:1) node_offset:602:1
    %4643 = break_inline(%4366, %4642)
  }) node_offset:602:1
}, {}, {})
Imports:
  @import("../std.zig") token_abs:1:21
  @import("builtin") token_abs:2:25
